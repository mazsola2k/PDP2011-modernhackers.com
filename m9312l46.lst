       1                                         .title   M9312 11/04-34-etc Console/Diagnostic PROM
       2                                
       3                                ; This source code is a modified copy of the DEC M9312 23-248F1 console PROM
       4                                ; taken from copied from http://ak6dn.dyndns.org/PDP-11/M9312/
       5                                ;
       6                                ; I've made a change to the original source to allow lower case input, but
       7                                ; in such a way that almost everything is still at the same address, since
       8                                ; at least the high rom code branches directly to a number of places.
       9                                ;
      10                                ; This console/diagnostic PROM is for 11/04-34-etc CPUs, but works in every 11.
      11                                ;
      12                                ; $Revision: 1.6 $
      13                                
      14 177560                         dlbase   =177560              ; console DL11 base
      15 177560                         dlrcsr   =dlbase+0            ; console RX status
      16 177562                         dlrbuf   =dlbase+2            ; console RX data
      17 177564                         dlxcsr   =dlbase+4            ; console TX status
      18 177566                         dlxbuf   =dlbase+6            ; console TX data
      19                                
      20 000500                         memloc   =500                 ; low memory test location
      21 173000                         btprom   =173000              ; lowest boot PROM base address
      22                                
      23 000001                         bit0     =000001              ; plain old bit definitions
      24 000002                         bit1     =000002              ;
      25 000004                         bit2     =000004              ;
      26 000010                         bit3     =000010              ;
      27 000020                         bit4     =000020              ;
      28 000040                         bit5     =000040              ;
      29 000100                         bit6     =000100              ;
      30 000200                         bit7     =000200              ;
      31 000400                         bit8     =000400              ;
      32 001000                         bit9     =001000              ;
      33 002000                         bit10    =002000              ;
      34 004000                         bit11    =004000              ;
      35 010000                         bit12    =010000              ;
      36 020000                         bit13    =020000              ;
      37 040000                         bit14    =040000              ;
      38 100000                         bit15    =100000              ;
      39                                
      40 000040                         BL       =040                 ; ascii SPACE
      41 000015                         CR       =015                 ; ascii CR
      42 000012                         LF       =012                 ; ascii LF
      43 000400                         U        =bit8                ; upperbyte multiplier
      44 000001                         L        =bit0                ; lowerbyte multiplier
      45                                
      46                                         .asect
      47 165000                                  .=165000
      48                                
      49 165000                                  base     =.
      50                                
      51 165000 165000                  data0:   .word data0          ; test data structures
      52 165002 165000                           .word data0          ;
      53 165004    000                  data1:   .byte 000            ;
      54 165005    200                           .byte 200            ;
      55 165006 177777                  data2:   .word 177777         ;
      56 165010 165006                           .word data2          ;
      57 165012 165006                           .word data2          ;
      58 165014 000500                           .word memloc+0       ;
      59 165016 000501                           .word memloc+1       ;
      60                                
      61                                ; ------------------------------------------------------------
      62                                ; ------------------------------------------------------------
      63                                
      64                                ;         .=base+20
      65                                DIAG: ; PRIMARY DIAGNOSTIC ENTRY POINT
      66                                
      67                                ; ------------------------------------------------------------
      68                                ; ------------------------------------------------------------
      69                                
      70                                
      71 165020 005003                  T1:      clr   r3          ; R3=000000 C=0
      72 165022 005203                           inc   r3          ; R3=000001 C=0
      73 165024 005103                           com   r3          ; R3=177776 C=1
      74 165026 006203                           asr   r3          ; R3=177777 C=0
      75 165030 006303                           asl   r3          ; R3=177776 C=1
      76 165032 006003                           ror   r3          ; R3=177777 C=0
      77 165034 005703                           tst   r3          ; R3=177777 C=0
      78 165036 005403                           neg   r3          ; R3=000001 C=1
      79 165040 005303                           dec   r3          ; R3=000000 C=1
      80 165042 005603                           sbc   r3          ; R3=177777 C=1
      81 165044 006103                           rol   r3          ; R3=177777 C=1
      82 165046 005503                           adc   r3          ; R3=000000 C=1
      83 165050 000303                           swab  r3          ; R3=000000 C=0
      84 165052 001377                           bne   .           ; br . if FAIL
      85                                
      86                                ; ------------------------------------------------------------
      87                                
      88 165054 012702  165000          T2:      mov   #data0,r2   ; R2=165000
      89 165060 011203                           mov   (r2),r3     ; R2=165000 R3=165000
      90 165062 022203                           cmp   (r2)+,r3    ; R2=165002 R3=165000
      91 165064 001377                           bne   .           ; br . if FAIL
      92 165066 063203                           add   @(r2)+,r3   ; R2=165004 R3=152000
      93 165070 165203                           sub   @-(r2),r3   ; R2=165002 R3=165000
      94 165072 044203                           bic   -(r2),r3    ; R2=165000 R3=000000
      95 165074 056203  000012                   bis   12(r2),r3   ; R2=165000 R3=165006
      96 165100 037203  000012                   bit   @12(r2),r3  ; R2=165000 R3=165006
      97 165104 001777                           beq   .           ; br . if FAIL
      98                                
      99                                ; ------------------------------------------------------------
     100                                
     101 165106 010703                  T3:      mov   pc,r3       ; R3=165110
     102 165110 000123                           jmp   (r3)+       ; jmp self, R3=165112
     103 165112 012703  165122                   mov   #T3B,r3     ; R3=165122
     104 165116 000133                           jmp   @(r3)+      ; R3=165124 PC=165120
     105 165120 000113                  T3A:     jmp   (r3)        ; R3=165124 PC=165124
     106 165122 165120                  T3B:     .word T3A         ; point to previous instr
     107                                
     108                                ; ------------------------------------------------------------
     109                                
     110 165124 105737  165004          T4:      tstb  @#data1     ; test a byte, if we get here... ;; original: tstb data1, causes an internal relocation which genblkram does not handle
     111 165130 001377                           bne   .           ; br . if FAIL
     112 165132 022222                           cmp   (r2)+,(r2)+    ; (R2)+=165000 (R2)+=165002 R2=165004
     113 165134 105722                           tstb  (r2)+       ; (R2)+=000 R2=165005
     114 165136 001377                           bne   .           ; br . if FAIL
     115 165140 105712                           tstb  (r2)        ; R2=165005 (R2)=200
     116 165142 100377                           bpl   .           ; br . if fail
     117                                
     118                                ; ------------------------------------------------------------
     119                                ; ------------------------------------------------------------
     120                                
     121 165144                                  .=base+144
     122                                NODIAG:  ; NO DIAGNOSTIC ENTRY POINT
     123                                
     124 165144 010701                           mov   pc,r1          ; ret addr
     125 165146 000554                           br    prteol         ; print EOL
     126                                
     127 165150 010701                           mov   pc,r1          ; ret addr
     128 165152 000526                           br    prtoct         ; print 6 octal R0 + space
     129                                
     130 165154 010400                           mov   r4,r0          ; get R4 value
     131 165156 000524                           br    prtoct         ; print 6 octal R4 + space
     132                                
     133 165160 010600                  nxtdpy:  mov   sp,r0          ; get R6 value
     134 165162 010701                           mov   pc,r1          ; ret addr
     135 165164 000521                           br    prtoct         ; print 6 octal R6 + space
     136                                
     137 165166 010500                           mov   r5,r0          ; get R5 value
     138 165170 000517                           br    prtoct         ; print 6 octal R5 + space
     139                                
     140 165172 010605                           mov   sp,r5          ; save old pc in R5
     141                                
     142 165174 010701                  nxtcmd:  mov   pc,r1          ; ret addr
     143 165176 000540                           br    prteol         ; print EOL
     144                                
     145 165200 112702  000100                   movb  #<'@>,r2       ; prompt char @
     146 165204 010703                           mov   pc,r3          ; ret addr
     147 165206 000554                           br    txchar         ; print char in R2
     148 165210 010706                           mov   pc,sp          ; save pc for display
     149 165212 000456                           br    rxchar         ; read one char into R2 low
     150 165214 000302                           swab  r2             ; save old char in high
     151 165216 000454                           br    rxchar         ; read next char into R2 low
     152                                
     153 165220 020227  046040                   cmp   r2,#<'L*U>+<BL*L>       ; check for 'L ' load address
     154 165224 001441                           beq   cmdlda         ; br if yes
     155                                
     156 165226 020402                           cmp   r4,r2          ; same cmd this time as last time?
     157 165230 001001                           bne   1$             ; br if not
     158 165232 005725                           tst   (r5)+          ; yes, bump stored load addr for autoinc
     159 165234 010204                  1$:      mov   r2,r4          ; remember cmd for next time
     160                                
     161 165236 020227  042440                   cmp   r2,#<'E*U>+<BL*L>       ; check for 'E ' examine memory
     162 165242 001437                           beq   cmdexm         ; br if yes
     163                                
     164 165244 020227  042040                   cmp   r2,#<'D*U>+<BL*L>       ; check for 'D ' deposit memory
     165 165250 001423                           beq   cmddep         ; br if yes
     166                                
     167 165252 020227  051415                   cmp   r2,#<'S*U>+<CR*L>       ; check for 'S<CR>' start
     168 165256 001002                           bne   2$             ; br if not
     169                                
     170 165260 000005                           reset                ; start; reset the world
     171 165262 000115                           jmp   (r5)           ; jump to saved value from 'load address'
     172                                
     173 165264 012704  173000          2$:      mov   #btprom,r4     ; address of first boot prom
     174                                3$:      ;bit   (r4),#200      ; check for next prom exists                    ??? FIXME
     175                                         ;bne   NODIAG         ; nope, go back to start                        ??? FIXME
     176 165270 022402                           cmp   (r4)+,r2       ; compare command vs boot prom id code
     177 165272 001405                           beq   cmdboo         ; br if a match
     178 165274 061404                           add   (r4),r4        ; else offset to next boot prom header
     179 165276 020427  174000                   cmp   r4,#btprom+<4*200>      ; check if ran off the end
     180 165302 001734                           beq   nxtcmd         ; br if yes
     181 165304 000771                           br    3$             ; not yet, loop for next prom
     182                                
     183 165306 010701                  cmdboo:  mov   pc,r1          ; ret addr
     184 165310 000426                           br    getoct         ; get unit number (or zero) in R0
     185                                ;         reset                ; reset the world
     186                                ;
     187                                ; FIXME, I'm guessing the next 3 insn are meant to take the carry bit from the prom (board?) to govern diagnostics
     188                                ; changed to always cause diagnostics
     189                                ;
     190                                ;         movb  @#btprom+24,r5    ; (?WHY?) grab byte at offset 24 in 1st prom
     191                                ;         rolb  r5             ; (?WHY?) rotate left
     192                                ;         rolb  r5             ; (?WHY?) and again
     193 165312 000241                           clc
     194 165314 000164  000010                   jmp   10(r4)         ; jump into boot prom at actual offset +12
     195                                                              ; which is boot std CSR and unit in R0
     196                                
     197 165320 010701                  cmddep:  mov   pc,r1          ; ret addr
     198 165322 000421                           br    getoct         ; get octal data into R0
     199 165324 010015                           mov   r0,(r5)        ; store data at saved load address
     200 165326 000722                           br    nxtcmd         ; get another command
     201                                
     202 165330 010701                  cmdlda:  mov   pc,r1          ; ret addr
     203 165332 000415                           br    getoct         ; get octal addr into R0
     204 165334 010005                           mov   r0,r5          ; save load address in R5
     205                                
     206 165336 005004                  cmdnxt:  clr   r4             ; clear out command memory
     207 165340 000715                           br    nxtcmd         ; get another command
     208                                
     209 165342 010506                  cmdexm:  mov   r5,sp          ; save load address into SP for display
     210 165344 011505                           mov   (r5),r5        ; get memory data into R5 for display
     211 165346 000704                           br    nxtdpy         ; go display SP and R5 as addr/data
     212                                
     213                                ; --------------------------------------------------
     214                                
     215                                ; character RX routine
     216                                ;
     217                                ; R2 = new 7bit character returned in R2<7:0>, R2<15:08> n/c
     218                                ; R3 = return address
     219                                   
     220 165350 105737  177560          rxchar:  tstb  @#dlrcsr       ; wait for RX ready
     221 165354 100375                           bpl   rxchar         ; no character yet, loop
     222 165356 105002                           clrb  r2             ; clear low byte only
     223 165360 153702  177562                   bisb  @#dlrbuf,r2    ; insert character in low byte
     224 165364 000457                           br    rxc2
     225                                
     226                                ; --------------------------------------------------
     227                                
     228                                ; get a new octal number, terminate input by CR
     229                                ;
     230                                ; R0 = input octal value
     231                                ; R1 = return address
     232                                ; R2 = temp char
     233                                ; R3 = temp addr
     234                                
     235 165366 005000                  getoct:  clr   r0             ; accumulate value here
     236 165370 005002                  1$:      clr   r2             ; new character goes here
     237 165372 010703                           mov   pc,r3          ; ret addr
     238 165374 000765                           br    rxchar         ; read a char into R2
     239 165376 120227  000015                   cmpb  r2,#CR         ; was the char a CR
     240 165402 001433                           beq   retR1          ; yes, return
     241 165404 162702  000070                   sub   #<'8>,r2       ; offset by ascii 8 code
     242 165410 062702  000010                   add   #<'8>-<'0>,r2  ; good char now in range 0..7
     243 165414 103350                           bcc   cmdnxt         ; br if bad char - FAIL exit
     244 165416 006300                           asl   r0             ; shift old value left 3b
     245 165420 006300                           asl   r0             ;
     246 165422 006300                           asl   r0             ;
     247 165424 050200                           bis   r2,r0          ; insert 3 new bits in lsb
     248 165426 000760                           br    1$             ; loop for more char
     249                                
     250                                ; print an octal number followed by one <SP>
     251                                ;
     252                                ; R0 = register value to print
     253                                ; R1 = return address
     254                                ; R2 = temp char
     255                                ; R3 = temp addr
     256                                
     257 165430 012702  000030          prtoct:  mov   #<'0/bit1>,r2  ; ascii 0 right 1b
     258 165434 000261                           sec                  ; shift a 1 into R0 lsb as done bit
     259 165436 006100                  1$:      rol   r0             ; msb out of R0
     260 165440 106102                           rolb  r2             ; into lsb of R2
     261 165442 010703                           mov   pc,r3          ; ret addr
     262 165444 000435                           br    txchar         ; print char in R2
     263 165446 012702  020206                   mov   #<BL*bit8>+200+<'0/bit3>,r2 ; ascii SP upper, ascii 0 right 3b lower
     264 165452 006300                  2$:      asl   r0             ; msb out of R0
     265 165454 001403                           beq   3$             ; when R0 has gone to zero we are done
     266 165456 106102                           rolb  r2             ; into lsb of R2
     267 165460 103774                           bcs   2$             ; loop once more if flagbit was set
     268 165462 000765                           br    1$             ; go get last bit and print char
     269 165464 000302                  3$:      swab  r2             ; move the SP from upper byte to lower
     270 165466 010703                           mov   pc,r3          ; ret addr
     271 165470 000423                           br    txchar         ; print the space char in R2
     272 165472 022121                  retR1:   cmp   (r1)+,(r1)+    ; bump return address ptr R1 by +4
     273 165474 000161  177776                   jmp   -2(r1)         ; return to (R1)-2
     274                                
     275                                ; print 1*<LF> followed by 12*<CR>
     276                                ;
     277                                ; R1 = return address
     278                                ; R2 = temp char
     279                                ; R3 = temp addr
     280                                
     281 165500 012702  014012          prteol:  mov   #<30*U>+<LF*L>,r2       ; LSB is LF, MSB is count
     282 165504 010703                  1$:      mov   pc,r3          ; ret addr
     283 165506 000414                           br    txchar         ; print char in R2
     284 165510 061702                           add   (pc),r2        ; bump count
     285 165512 003767                           ble   retR1          ; done if expired
     286 165514 105002                           clrb  r2             ;
     287 165516 152702  000015                   bisb  #CR,r2         ; set char to CR
     288 165522 000770                           br 1$                ; loop
     289                                ;
     290                                ;
     291                                ;
     292                                rxc2:
     293 165524 000240                           nop
     294 165526 132702  000100                   bitb  #100,r2        ; check if high half of ascii set
     295 165532 001402                           beq   $10            ; no
     296 165534 142702  000040                   bicb  #40,r2         ; clear bit to make into upper case
     297                                $10:                          ; fall thru for auto echo
     298                                ; character TX routine
     299                                ;
     300                                ; R2 = 8b character to TX in R2<7:0>
     301                                ; R3 = return address
     302                                
     303 165540 105737  177564          txchar:  tstb  @#dlxcsr       ; wait for TX ready
     304 165544 100375                           bpl   txchar         ; not ready yet, loop
     305 165546 110237  177566                   movb  r2,@#dlxbuf    ; TX exactly what we RX'ed
     306 165552 142702  100200                   bicb  #<200*U>+<200*L>,r2     ; clear MSB upper/lower characters
     307                                
     308 165556 022323                  retR3:   cmp   (r3)+,(r3)+    ; bump return address ptr R3 by +4
     309 165560 000163  177776                   jmp   -2(r3)         ; return to (R3)-2
     310                                
     311                                ; ------------------------------------------------------------
     312                                ; ------------------------------------------------------------
     313                                
     314 165564                                  .=base+564
     315                                RESTRT:                       ; SECONDARY DIAGNOSTIC ENTRY POINT
     316                                
     317                                ; ------------------------------------------------------------
     318                                ; ------------------------------------------------------------
     319                                
     320 165564 012705  165006          T6:      mov   #data2,r5      ; ptr to data R5=165006
     321 165570 012702  000500                   mov   #memloc,r2     ; ptr to memory R2=500
     322 165574 011503                           mov   (r5),r3        ; R3=177777
     323 165576 005012                           clr   (r2)           ; M[500]=0
     324 165600 112512                           movb  (r5)+,(r2)     ; M[500]=377 R5=165007
     325 165602 005202                           inc   r2             ; R2=501
     326 165604 112512                           movb  (r5)+,(r2)     ; M[501]=377 R5=165010
     327 165606 005302                           dec   r2             ; R2=500
     328 165610 023512                           cmp   @(r5)+,(r2)    ; @M[DATA2]=M[500]? R5=165012
     329 165612 001015                           bne   T6Z            ; br if FAIL
     330 165614 005202                           inc   r2             ; R2=501
     331 165616 143522                           bicb  @(r5)+,(r2)+   ; R5=165014 R2=502
     332 165620 024542                           cmp   -(r5),-(r2)    ; R5=165012 R2=500
     333 165622 143522                           bicb  @(r5)+,(r2)+   ; R5=165014 R2=501
     334 165624 001010                           bne   T6Z            ; br if FAIL
     335 165626 010502                           mov   r5,r2          ; R2=500
     336 165630 016505  177772                   mov   -6(r5),r5      ; R5=177777
     337 165634 110532                           movb  r5,@(r2)+      ; R5=177777 R2=502
     338 165636 150572  000000                   bisb  r5,@0(r2)      ; R5=177777
     339 165642 020352                           cmp   r3,@-(r2)      ; R5=177777 R2=500
     340 165644 001407                           beq   T7             ; br if PASS
     341 165646 000000                  T6Z:     halt                 ; FAILED
     342                                
     343                                ; ------------------------------------------------------------
     344                                
     345 165650 005723                  T7A:     tst   (r3)+          ; bump return pc, test HALT instr
     346 165652 001011                           bne   T7Z            ; br in not a halt to HALT
     347 165654 021605                  T7B:     cmp   (sp),r5        ; top of stack word whould match
     348 165656 001007                           bne   T7Z            ; br if FAIL
     349 165660 000203                           rts   r3             ; return to caller
     350 165662 000000                           halt                 ; die
     351                                
     352 165664 011206                  T7:      mov   (r2),sp        ; setup stack pointer
     353 165666 012702  165650                   mov   #T7A,r2        ; addr of subr
     354 165672 005726                           tst   (sp)+          ; test sp pop
     355 165674 004312                           jsr   r3,(r2)        ; jsr to test code entry T7A
     356 165676 000000                  T7Z:     halt                 ; should bump past this
     357 165700 004362  000004                   jsr   r3,4(r2)       ; jsr to test code entry T7B
     358                                
     359                                ; ------------------------------------------------------------
     360                                
     361 165704 012705  160000          T8:      mov   #160000,r5     ; 28KW memory boundary
     362 165710 005037  000006                   clr   @#6            ; zap trap priority level
     363 165714 012737  165722  000004           mov   #T8A,@#4       ; point trap handler at next instr
     364 165722 012706  000502          T8A:     mov   #memloc+2,sp   ; reset the stack pointer
     365 165726 005745                           tst   -(r5)          ; set R5 as last memory address
     366                                                              ; will continue to trap thru 4 until OK
     367                                                              ; this effectively sizes memory in R5
     368                                
     369 165730 005003                           clr   r3             ; init memory addr at zero
     370 165732 010313                  T8B:     mov   r3,(r3)        ; ADDR -> (ADDR)
     371 165734 005723                           tst   (r3)+          ; reread and bump pointer
     372 165736 020305                           cmp   r3,r5          ; hit memsize limit?
     373 165740 101774                           blos  T8B            ; loop until done
     374                                
     375 165742 005003                           clr   r3             ; init memory addr at zero
     376 165744 005413                  T8C:     neg   (r3)           ; negate current data to -ADDR
     377 165746 060313                           add   r3,(r3)        ; add ADDR + (-ADDR) to get ZERO
     378 165750 005723                           tst   (r3)+          ; reread, test for zero, bump pointer
     379 165752 001004                           bne   T8D            ; br if FAIL
     380 165754 020305                           cmp   r3,r5          ; hit memsize limit?
     381 165756 101772                           blos  T8C            ; loop until done
     382                                
     383 165760 000164  000002                   jmp   2(r4)          ; PASS - return to CALLER at offset+2
     384                                
     385 165764 014304                  T8D:     mov   -(r3),r4       ; memory FAIL, put bad data to R4
     386 165766 010300                           mov   r3,r0          ; put bad addr to R0
     387 165770 005006                           clr   sp             ; zap SP
     388 165772 000000                           halt                 ; and DIE
     389                                
     390                                   ; ------------------------------------------------------------
     391                                
     392                                
     393 165774                                  .=base+774
     394 165774    060     101          verson:  .ascii   "0A"        ; version ID
     395                                
     396 165776                                  .=base+776
     397 165776 123162                  crc16:   .word <123162>       ; CRC-16 will go here
     398                                
     399                                   .end
     399                                

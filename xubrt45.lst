       1                                         .title test45 - xu proof of concept code
       2                                
       3                                ;--
       4                                ;-- Copyright (c) 2008-2019 Sytse van Slooten
       5                                ;--
       6                                ;-- Permission is hereby granted to any person obtaining a copy of these VHDL source files and
       7                                ;-- other language source files and associated documentation files ("the materials") to use
       8                                ;-- these materials solely for personal, non-commercial purposes.
       9                                ;-- You are also granted permission to make changes to the materials, on the condition that this
      10                                ;-- copyright notice is retained unchanged.
      11                                ;--
      12                                ;-- The materials are distributed in the hope that they will be useful, but WITHOUT ANY WARRANTY;
      13                                ;-- without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
      14                                ;--
      15                                ;
      16                                ;
      17                                ;
      18 000000 000167  000774                   jmp t45
      19                                ;
      20                                ; reserve space for vectors, stack space
      21                                ;
      22 000004                                  .blkw 376
      23                                ;
      24                                ; misc definitions
      25                                ;
      26 000011                         ht       = 11
      27 000012                         lf       = 12
      28 000015                         cr       = 15
      29 177776                         ps       = 177776
      30                                ;
      31                                ; encx24j600 names
      32                                ;
      33 000040                         rcru     = 40
      34 000042                         wcru     = 42
      35 000044                         bfsu     = 44
      36 000046                         bfcu     = 46
      37 000052                         wgpdata  = 52
      38 000054                         rrxdata  = 54
      39 000300                         b0sel    = 300
      40 000314                         setpktdec = 314
      41                                ;
      42 000000                         etxst    = 0
      43 000002                         etxlen   = 2
      44 000004                         erxst    = 4
      45 000006                         erxtail  = 6
      46 000032                         estat    = 32
      47 000036                         econ1    = 36
      48 000064                         erxfcon  = 64
      49 000066                         eudast   = 66
      50 000100                         macon1   = 100
      51 000156                         econ2    = 156
      52 000140                         maadr3   = 140
      53 000164                         eidled   = 164
      54 000210                         egpwrpt  = 210
      55 000212                         erxrdpt  = 212
      56                                ;
      57                                ; general purpose register definitions
      58                                ;
      59 000000                         r0       = %0
      60 000001                         r1       = %1
      61 000002                         r2       = %2
      62 000003                         r3       = %3
      63 000004                         r4       = %4
      64 000005                         r5       = %5
      65 000006                         r6       = %6
      66 000007                         r7       = %7
      67 000006                         sp       = %6
      68 000007                         pc       = %7
      69                                ;
      70                                ; macros
      71                                ;
      72                                         .macro xubl f,fl,t,tl
      73                                         jsr    pc,xubl
      74                                         .word  f
      75                                         .word  fl
      76                                         .word  t
      77                                         .word  tl
      78                                         .endm
      79                                ;
      80                                         .macro xubm u,u18,x,l
      81                                         jsr    pc,xubm
      82                                         .word  u
      83                                         .word  u18
      84                                         .word  x
      85                                         .word  l
      86                                         .endm
      87                                ;
      88                                         .macro xasciz w
      89                                         jsr    pc,xasciz
      90                                         .asciz /w/
      91                                         .even
      92                                         .endm
      93                                ;
      94                                         .macro xascil w
      95                                         jsr    pc,xasciz
      96                                         .ascii /w/
      97                                         .asciz <15><12>
      98                                         .even
      99                                         .endm
     100                                ;
     101                                         .macro xascnl
     102                                         jsr    pc,xasciz
     103                                         .asciz <15><12>
     104                                         .even
     105                                         .endm
     106                                ;
     107                                         .macro xbhx w,l
     108                                         jsr    pc,xbhx
     109                                         .word  w
     110                                         .word  l
     111                                         .endm
     112                                ;
     113                                         .macro xwhx w,l
     114                                         jsr    pc,xwhx
     115                                         .word  w
     116                                         .word  l
     117                                         .endm
     118                                ;
     119                                ; start of code
     120                                ;
     121                                t45:
     122 001000 012737  000340  177776           mov    #340,@#177776          ; set psw prio to 7 - block interrupts
     123 001006 012706  001000                   mov    #1000,sp               ; setup stack
     124 001012 005067  013542                   clr    dogtick                ; clear watchdog count
     125 001016 012737  014466  000100           mov    #dog,@#100             ; setup vector for watchdog
     126 001024 012737  000340  000102           mov    #340,@#102             ; psw for watchdog vector
     127 001032 012737  000100  177546           mov    #100,@#177546          ; enable clock interrupt
     128                                ;
     129                                ; init ourselves
     130                                ;
     131 001040 004767  013254                   jsr    pc,init
     132 001044 004767  013402                   jsr    pc,waitabit
     133                                         xascil <Hello, world: xu-cpu [t45] deuna microcode>
       1 001050 004767  012560                   jsr    pc,xasciz
       2 001054    110     145     154           .ascii /Hello, world: xu-cpu [t45] deuna microcode/
         001057    154     157     054  
         001062    040     167     157  
         001065    162     154     144  
         001070    072     040     170  
         001073    165     055     143  
         001076    160     165     040  
         001101    133     164     064  
         001104    065     135     040  
         001107    144     145     165  
         001112    156     141     040  
         001115    155     151     143  
         001120    162     157     143  
         001123    157     144     145  
       3 001126    015     012     000           .asciz <15><12>
       4 001131    000                           .even
     134 001132 004767  007262                   jsr    pc,initenc
     135                                ;
     136 001136 005037  177776                   clr    @#177776               ; clear psw - this enables the watchdog interrupts
     137                                ;
     138 001142 012737  004000  174510           mov    #4000,@#174510         ; pcsr0 - dni
     139 001150 005700                           tst    r0
     140 001152 001403                           beq    5$
     141 001154 005037  174512                   clr    @#174512               ; pcsr1 - state=reset
     142 001160 000404                           br     10$
     143                                5$:
     144 001162 012737  000002  174512           mov    #2,@#174512            ; pcsr1 - state=ready
     145 001170 000400                           br     10$
     146                                ;
     147                                ; main service loop - receive packets if we're running
     148                                ;
     149                                10$:
     150 001172 005067  013362                   clr    dogtick                ; need to do this every 10 seconds, or watchdog will cause reboot
     151 001176 005767  013346                   tst    running                ; in running state?
     152 001202 001411                           beq    20$                    ; no - jump
     153 001204 004767  006050                   jsr    pc,pktin               ; process input packets
     154 001210 005767  013476                   tst    recvdw                 ; did we do any work receiving?
     155 001214 001404                           beq    20$                    ; no - jump
     156 001216 052737  020000  174510           bis    #20000,@#174510        ; set rxi
     157 001224 000762                           br     10$                    ; see if there is another frame - FIXME, check if there is an owned buffer first?
     158                                20$:
     159                                ;
     160                                ; check if the chip is ok
     161                                ;
     162 001226 005067  010556                   clr    deidled
     163                                         xubl   reidled,20,deidled,20
       1 001232 004767  010740                   jsr    pc,xubl
       2 001236 012006                           .word  reidled
       3 001240 000020                           .word  20
       4 001242 012010                           .word  deidled
       5 001244 000020                           .word  20
     164 001246 005767  010536                   tst    deidled
     165 001252 001135                           bne    30$
     166                                         xascil <cannot read eidled>
       1 001254 004767  012354                   jsr    pc,xasciz
       2 001260    143     141     156           .ascii /cannot read eidled/
         001263    156     157     164  
         001266    040     162     145  
         001271    141     144     040  
         001274    145     151     144  
         001277    154     145     144  
       3 001302    015     012     000           .asciz <15><12>
       4 001305    000                           .even
     167                                ;         clr    @#174512               ; pcsr1 - state=reset  FIXME, this kills the software on bsd
     168 001306 004767  007106                   jsr    pc,initenc
     169 001312 004767  013134                   jsr    pc,waitabit
     170 001316 105767  010640                   tstb   wlaa+2                 ; check to see if the mac address was set
     171 001322 001017                           bne    22$
     172 001324 105767  010633                   tstb   wlaa+3
     173 001330 001014                           bne    22$
     174 001332 105767  010626                   tstb   wlaa+4
     175 001336 001011                           bne    22$
     176 001340 105767  010621                   tstb   wlaa+5
     177 001344 001006                           bne    22$
     178 001346 105767  010614                   tstb   wlaa+6
     179 001352 001003                           bne    22$
     180 001354 105767  010607                   tstb   wlaa+7
     181 001360 001436                           beq    23$
     182                                22$:
     183                                         xascil <restoring laa>        ; restore the mac address to what was set
       1 001362 004767  012246                   jsr    pc,xasciz
       2 001366    162     145     163           .ascii /restoring laa/
         001371    164     157     162  
         001374    151     156     147  
         001377    040     154     141  
         001402    141                  
       3 001403    015     012     000           .asciz <15><12>
       4                                         .even
     184 001406 116767  010550  010560           movb   wlaa+2,dlaa+4
     185 001414 116767  010543  010553           movb   wlaa+3,dlaa+5
     186 001422 116767  010536  010542           movb   wlaa+4,dlaa+2
     187 001430 116767  010531  010535           movb   wlaa+5,dlaa+3
     188 001436 116767  010524  010524           movb   wlaa+6,dlaa+0
     189 001444 116767  010517  010517           movb   wlaa+7,dlaa+1
     190 001452 004767  010420                   jsr    pc,setlaa
     191                                23$:
     192 001456 005767  013100                   tst    modebits
     193 001462 001417                           beq    24$
     194                                         xascil <restoring modebits>   ; restore the mode bits to what was set
       1 001464 004767  012144                   jsr    pc,xasciz
       2 001470    162     145     163           .ascii /restoring modebits/
         001473    164     157     162  
         001476    151     156     147  
         001501    040     155     157  
         001504    144     145     142  
         001507    151     164     163  
       3 001512    015     012     000           .asciz <15><12>
       4 001515    000                           .even
     195 001516 004767  011752                   jsr    pc,setmodebits
     196                                24$:
     197                                         xascil <chip reset>
       1 001522 004767  012106                   jsr    pc,xasciz
       2 001526    143     150     151           .ascii /chip reset/
         001531    160     040     162  
         001534    145     163     145  
         001537    164                  
       3 001540    015     012     000           .asciz <15><12>
       4 001543    000                           .even
     198 001544 000612                           br     10$
     199                                ;
     200                                ; check for command from host
     201                                ;
     202                                30$:
     203 001546 004767  000122                   jsr    pc,pcsrsrv             ; check pcsr register for command from host
     204 001552 013700  174512                   mov    @#174512,r0            ; get status from register
     205 001556 042700  177760                   bic    #177760,r0             ;
     206 001562 005700                           tst    r0                     ; 0 - reset, which is not ok, but the host should act on it, not us
     207 001564 001002                           bne    32$
     208 001566 000167  177400                   jmp    10$                    ; yes - jump
     209                                32$:
     210 001572 022700  000002                   cmp    #2,r0                  ; 2 - ready ie ok, but not running as in not yet had start command
     211 001576 001002                           bne    33$
     212 001600 000167  177366                   jmp    10$                    ; yes - jump
     213                                33$:
     214 001604 022700  000003                   cmp    #3,r0                  ; 3 - running
     215 001610 001002                           bne    34$
     216 001612 000167  177354                   jmp    10$                    ; yes - jump
     217                                34$:
     218                                         xasciz <pcsr1 value wrong : >
       1 001616 004767  012012                   jsr    pc,xasciz
       2 001622    160     143     163           .asciz /pcsr1 value wrong : /
         001625    162     061     040  
         001630    166     141     154  
         001633    165     145     040  
         001636    167     162     157  
         001641    156     147     040  
         001644    072     040     000  
       3 001647    000                           .even
     219                                         xwhx   174510,10
       1 001650 004767  012126                   jsr    pc,xwhx
       2 001654 174510                           .word  174510
       3 001656 000010                           .word  10
     220                                         xascil
       1 001660 004767  011750                   jsr    pc,xasciz
       2                                         .ascii //
       3 001664    015     012     000           .asciz <15><12>
       4 001667    000                           .even
     221 001670 000167  177276                   jmp    10$                    ; FIXME, come up with something slightly more sensible
     222                                ;
     223                                ; pcsrsrv - service commands issued through the pcsr registers
     224                                ;
     225                                pcsrsrv:
     226 001674 013701  174510                   mov    @#174510,r1            ; #20 bit flags if a new command is in the register
     227                                ;
     228                                ; check if the reset bit is set in pcsr0
     229                                ;
     230 001700 032701  000040                   bit    #40,r1                 ; rset bit set?
     231 001704 001404                           beq    psv100                 ; no
     232 001706 105037  174510                   clrb   @#174510               ; reset rset bit - only a byte write to the low byte does this :-)
     233 001712 000167  177062                   jmp    t45                    ; not a reboot, but fairly close
     234                                ;
     235                                ; check if the #20 bit is set - this is a bit in an unused bit field of the original deuna, that xu uses to detect that pcsr0 was written into
     236                                ;
     237                                psv100:
     238 001716 032701  000020                   bit    #20,r1                 ; cmd written bit set?
     239 001722 001002                           bne    psv110                 ; yes
     240 001724 000167  000026                   jmp    psv900                 ; no
     241                                psv110:
     242 001730 105037  174510                   clrb   @#174510               ; reset flag bit - only a byte write to the low byte does this :-)
     243 001734 042701  177760                   bic    #177760,r1             ; mask off p0cmd bit field from pcsr0
     244 001740 010167  012612                   mov    r1,p0cmd               ; store it
     245 001744 006301                           asl    r1
     246 001746 062701  002660                   add    #ptab,r1               ; add code to base of jump table
     247 001752 011101                           mov    (r1),r1
     248 001754 004711                           jsr    pc,(r1)                ; call the service routine
     249                                psv900:
     250 001756 000207                           rts pc                        ; done
     251                                ;
     252                                ; nop : the real nop, command code 0
     253                                ;
     254                                crnop:
     255                                         xasciz <pcsr0 noop : >
       1 001760 004767  011650                   jsr    pc,xasciz
       2 001764    160     143     163           .asciz /pcsr0 noop : /
         001767    162     060     040  
         001772    156     157     157  
         001775    160     040     072  
         002000    040     000          
       3                                         .even
     256                                         xwhx   174510,2
       1 002002 004767  011774                   jsr    pc,xwhx
       2 002006 174510                           .word  174510
       3 002010 000002                           .word  2
     257                                         xascil
       1 002012 004767  011616                   jsr    pc,xasciz
       2                                         .ascii //
       3 002016    015     012     000           .asciz <15><12>
       4 002021    000                           .even
     258                                         ; ? manual says no-op, and dni bit not set
     259 002022 052737  004000  174510           bis    #4000,@#174510
     260 002030 000207                           rts    pc
     261                                ;
     262                                ; nop : other command codes
     263                                ;
     264                                conop:
     265                                         xasciz <pcsr0 noopx: >
       1 002032 004767  011576                   jsr    pc,xasciz
       2 002036    160     143     163           .asciz /pcsr0 noopx: /
         002041    162     060     040  
         002044    156     157     157  
         002047    160     170     072  
         002052    040     000          
       3                                         .even
     266                                         xwhx   174510,2
       1 002054 004767  011722                   jsr    pc,xwhx
       2 002060 174510                           .word  174510
       3 002062 000002                           .word  2
     267                                         xascil
       1 002064 004767  011544                   jsr    pc,xasciz
       2                                         .ascii //
       3 002070    015     012     000           .asciz <15><12>
       4 002073    000                           .even
     268 002074 052737  004000  174510           bis    #4000,@#174510
     269 002102 000207                           rts    pc
     270                                
     271                                ;
     272                                ; cmd 1
     273                                ;
     274                                c0001:
     275                                         xasciz <pcsr0 cmd1 get pcbb : >
       1 002104 004767  011524                   jsr    pc,xasciz
       2 002110    160     143     163           .asciz /pcsr0 cmd1 get pcbb : /
         002113    162     060     040  
         002116    143     155     144  
         002121    061     040     147  
         002124    145     164     040  
         002127    160     143     142  
         002132    142     040     072  
         002135    040     000          
       3 002137    000                           .even
     276                                         xwhx   174510,10
       1 002140 004767  011636                   jsr    pc,xwhx
       2 002144 174510                           .word  174510
       3 002146 000010                           .word  10
     277                                         xascil
       1 002150 004767  011460                   jsr    pc,xasciz
       2                                         .ascii //
       3 002154    015     012     000           .asciz <15><12>
       4 002157    000                           .even
     278 002160 013767  174514  012530           mov    @#174514,pcbbl
     279 002166 013767  174516  012524           mov    @#174516,pcbbh
     280 002174 052737  004000  174510           bis    #4000,@#174510            ; dni
     281 002202 000207                           rts    pc
     282                                ;
     283                                ; cmd 2
     284                                ;
     285                                c0010:                                 ; get cmd
     286                                         xasciz <pcsr0 cmd2 get cmd: >
       1 002204 004767  011424                   jsr    pc,xasciz
       2 002210    160     143     163           .asciz /pcsr0 cmd2 get cmd: /
         002213    162     060     040  
         002216    143     155     144  
         002221    062     040     147  
         002224    145     164     040  
         002227    143     155     144  
         002232    072     040     000  
       3 002235    000                           .even
     287                                         xwhx   174510,10
       1 002236 004767  011540                   jsr    pc,xwhx
       2 002242 174510                           .word  174510
       3 002244 000010                           .word  10
     288                                         xascil
       1 002246 004767  011362                   jsr    pc,xasciz
       2                                         .ascii //
       3 002252    015     012     000           .asciz <15><12>
       4 002255    000                           .even
     289                                
     290 002256 013767  174514  000012           mov    @#174514,10$
     291 002264 013767  174516  000006           mov    @#174516,11$
     292 002272 004767  007750                   jsr    pc,xubm
     293 002276 000000                  10$:     .word  0
     294 002300 000000                  11$:     .word  0
     295 002302 014722                           .word  pcbb
     296 002304 000010                           .word  10
     297                                         xasciz <pcbb  cmd2 : >
       1 002306 004767  011322                   jsr    pc,xasciz
       2 002312    160     143     142           .asciz /pcbb  cmd2 : /
         002315    142     040     040  
         002320    143     155     144  
         002323    062     040     072  
         002326    040     000          
       3                                         .even
     298                                         xwhx   pcbb,10
       1 002330 004767  011446                   jsr    pc,xwhx
       2 002334 014722                           .word  pcbb
       3 002336 000010                           .word  10
     299                                         xascil
       1 002340 004767  011270                   jsr    pc,xasciz
       2                                         .ascii //
       3 002344    015     012     000           .asciz <15><12>
       4 002347    000                           .even
     300 002350 116700  012346                   movb   pcbb,r0
     301 002354 122700  000026                   cmpb   #26,r0
     302 002360 002405                           blt    90$
     303 002362 006300                           asl    r0
     304 002364 062700  002720                   add    #fctbl,r0
     305 002370 011000                           mov    (r0),r0
     306 002372 004710                           jsr    pc,(r0)
     307                                90$:
     308 002374 000207                           rts    pc
     309                                ;
     310                                ; cmd 3 - self-test
     311                                ;
     312                                c0011:                                 ; self-test
     313 002376 052737  004000  174510           bis    #4000,@#174510            ; dni
     314 002404 000207                           rts    pc
     315                                ;
     316                                ; cmd 4 - start
     317                                ;
     318                                c0100:                                 ; start
     319                                         xasciz <pcsr0 START : >
       1 002406 004767  011222                   jsr    pc,xasciz
       2 002412    160     143     163           .asciz /pcsr0 START : /
         002415    162     060     040  
         002420    123     124     101  
         002423    122     124     040  
         002426    072     040     000  
       3 002431    000                           .even
     320                                         xwhx   174510,10
       1 002432 004767  011344                   jsr    pc,xwhx
       2 002436 174510                           .word  174510
       3 002440 000010                           .word  10
     321                                         xascil
       1 002442 004767  011166                   jsr    pc,xasciz
       2                                         .ascii //
       3 002446    015     012     000           .asciz <15><12>
       4 002451    000                           .even
     322 002452 012737  000003  174512           mov    #3,@#174512            ; set state to running, clear error bits if any
     323 002460 005767  012064                   tst    running
     324 002464 001022                           bne    90$                    ; was already running, skip resetting rings to start
     325 002466 012767  000001  012054           mov    #1,running             ; set state
     326                                ;
     327 002474 016767  012064  012124           mov    tdrbh,xcurrh              ; clear xcurr - manual 4-9
     328 002502 016767  012060  012120           mov    tdrbl,xcurrl
     329                                ;
     330 002510 016767  012064  012100           mov    rdrbh,rcurrh              ; clear rcurr - manual 4-9
     331 002516 016767  012060  012074           mov    rdrbl,rcurrl
     332                                ;
     333 002524 052737  004000  174510           bis    #4000,@#174510         ; dni
     334                                90$:
     335 002532 000207                           rts    pc
     336                                ;
     337                                ; cmd 5 - boot
     338                                ;
     339                                c0101:                                 ; boot
     340 002534 052737  004000  174510           bis    #4000,@#174510         ; dni
     341 002542 000207                           rts    pc
     342                                ;
     343                                ; cmd 8 - polling demand
     344                                ;
     345                                c1000:                                 ; pdmd
     346                                ;         xasciz <pcsr0 PDMD : >
     347                                ;         xwhx   174510,10
     348                                ;         xascil
     349 002544 004767  003430                   jsr    pc,xmitpl              ; poll xmit ring
     350 002550 005767  012140                   tst    xmitdw
     351 002554 001403                           beq    10$
     352 002556 052737  010000  174510           bis    #10000,@#174510        ; txi --- FIXME, might not even be needed to set txi
     353                                ;         jsr pc,waitabit
     354                                10$:
     355 002564 052737  004000  174510           bis    #4000,@#174510         ; dni
     356 002572 000207                           rts    pc
     357                                ;
     358                                ; cmd 15 : stop
     359                                ;
     360                                c1111:                                 ; stop
     361                                         xasciz <pcsr0 STOP : >
       1 002574 004767  011034                   jsr    pc,xasciz
       2 002600    160     143     163           .asciz /pcsr0 STOP : /
         002603    162     060     040  
         002606    123     124     117  
         002611    120     040     072  
         002614    040     000          
       3                                         .even
     362                                         xwhx   174510,10
       1 002616 004767  011160                   jsr    pc,xwhx
       2 002622 174510                           .word  174510
       3 002624 000010                           .word  10
     363                                         xascil
       1 002626 004767  011002                   jsr    pc,xasciz
       2                                         .ascii //
       3 002632    015     012     000           .asciz <15><12>
       4 002635    000                           .even
     364 002636 005067  011706                   clr    running                ; set state
     365 002642 012737  000002  174512           mov    #2,@#174512            ; set state
     366 002650 052737  004000  174510           bis    #4000,@#174510         ; dni
     367 002656 000207                           rts    pc
     368                                ;
     369                                ; command branch table
     370                                ;
     371                                ptab:
     372 002660 001760                           .word  crnop                     ; 0
     373 002662 002104                           .word  c0001                     ; 1
     374 002664 002204                           .word  c0010                     ; 2
     375 002666 002376                           .word  c0011                     ; 3
     376 002670 002406                           .word  c0100                     ; 4
     377 002672 002534                           .word  c0101                     ; 5
     378 002674 002032                           .word  conop                     ; 6
     379 002676 002032                           .word  conop                     ; 7
     380 002700 002544                           .word  c1000                     ; 10
     381 002702 002032                           .word  conop                     ; 11
     382 002704 002032                           .word  conop                     ; 12
     383 002706 002032                           .word  conop                     ; 13
     384 002710 002032                           .word  conop                     ; 14
     385 002712 002032                           .word  conop                     ; 15
     386 002714 002032                           .word  conop                     ; 16
     387 002716 002574                           .word  c1111                     ; 17
     388                                ;
     389                                ; function branch table
     390                                ;
     391 002720 003000                  fctbl:   .word  fc0
     392 002722 003032                           .word  fc1
     393 002724 003074                           .word  fc2
     394 002726 003360                           .word  fc3
     395 002730 003424                           .word  fc4
     396 002732 003572                           .word  fc5
     397 002734 003740                           .word  fc6
     398 002736 004062                           .word  fc7
     399 002740 004542                           .word  fc10
     400 002742 004730                           .word  fc11
     401 002744 005324                           .word  fc12
     402 002746 005370                           .word  fc13
     403 002750 005446                           .word  fc14
     404 002752 005550                           .word  fc15
     405 002754 005674                           .word  fc16
     406 002756 005712                           .word  fc17
     407 002760 005730                           .word  fc20
     408 002762 006002                           .word  fc21
     409 002764 006054                           .word  fc22
     410 002766 006072                           .word  fc23
     411 002770 006110                           .word  fc24
     412 002772 006126                           .word  fc25
     413 002774 006144                           .word  fc26
     414 002776 006162                           .word  fc27
     415                                ;
     416                                ; fc0 - no-op
     417                                ;
     418                                fc0:
     419                                         xascil <fc0 - noop>
       1 003000 004767  010630                   jsr    pc,xasciz
       2 003004    146     143     060           .ascii /fc0 - noop/
         003007    040     055     040  
         003012    156     157     157  
         003015    160                  
       3 003016    015     012     000           .asciz <15><12>
       4 003021    000                           .even
     420 003022 052737  004000  174510           bis    #4000,@#174510            ; dni
     421 003030 000207                           rts    pc
     422                                ;
     423                                ; fc1
     424                                ;
     425                                fc1:
     426                                         xasciz <fc1 - load and start>
       1 003032 004767  010576                   jsr    pc,xasciz
       2 003036    146     143     061           .asciz /fc1 - load and start/
         003041    040     055     040  
         003044    154     157     141  
         003047    144     040     141  
         003052    156     144     040  
         003055    163     164     141  
         003060    162     164     000  
       3 003063    000                           .even
     427 003064 052737  040000  174510           bis    #40000,@#174510           ; pcei - this function is not implemented
     428 003072 000207                           rts    pc
     429                                ;
     430                                ; fc2
     431                                ;
     432                                fc2:
     433                                         xasciz <fc2 - read default physical address >
       1 003074 004767  010534                   jsr    pc,xasciz
       2 003100    146     143     062           .asciz /fc2 - read default physical address /
         003103    040     055     040  
         003106    162     145     141  
         003111    144     040     144  
         003114    145     146     141  
         003117    165     154     164  
         003122    040     160     150  
         003125    171     163     151  
         003130    143     141     154  
         003133    040     141     144  
         003136    144     162     145  
         003141    163     163     040  
         003144    000                  
       3 003145    000                           .even
     434 003146 004767  007144                   jsr    pc,getpcbb
     435                                ;
     436                                ; the bia is in crazy-chip format
     437                                ;
     438                                         xbhx   dbia+4,1
       1 003152 004767  010526                   jsr    pc,xbhx
       2 003156 012000                           .word  dbia+4
       3 003160 000001                           .word  1
     439                                         xasciz <:>
       1 003162 004767  010446                   jsr    pc,xasciz
       2 003166    072     000                   .asciz /:/
       3                                         .even
     440                                         xbhx   dbia+5,1
       1 003170 004767  010510                   jsr    pc,xbhx
       2 003174 012001                           .word  dbia+5
       3 003176 000001                           .word  1
     441                                         xasciz <:>
       1 003200 004767  010430                   jsr    pc,xasciz
       2 003204    072     000                   .asciz /:/
       3                                         .even
     442                                         xbhx   dbia+2,1
       1 003206 004767  010472                   jsr    pc,xbhx
       2 003212 011776                           .word  dbia+2
       3 003214 000001                           .word  1
     443                                         xasciz <:>
       1 003216 004767  010412                   jsr    pc,xasciz
       2 003222    072     000                   .asciz /:/
       3                                         .even
     444                                         xbhx   dbia+3,1
       1 003224 004767  010454                   jsr    pc,xbhx
       2 003230 011777                           .word  dbia+3
       3 003232 000001                           .word  1
     445                                         xasciz <:>
       1 003234 004767  010374                   jsr    pc,xasciz
       2 003240    072     000                   .asciz /:/
       3                                         .even
     446                                         xbhx   dbia+0,1
       1 003242 004767  010436                   jsr    pc,xbhx
       2 003246 011774                           .word  dbia+0
       3 003250 000001                           .word  1
     447                                         xasciz <:>
       1 003252 004767  010356                   jsr    pc,xasciz
       2 003256    072     000                   .asciz /:/
       3                                         .even
     448                                         xbhx   dbia+1,1
       1 003260 004767  010420                   jsr    pc,xbhx
       2 003264 011775                           .word  dbia+1
       3 003266 000001                           .word  1
     449                                         xascnl
       1 003270 004767  010340                   jsr    pc,xasciz
       2 003274    015     012     000           .asciz <15><12>
       3 003277    000                           .even
     450                                
     451 003300 116767  006474  011416           movb   dbia+4,pcbb+2
     452 003306 116767  006467  011411           movb   dbia+5,pcbb+3
     453 003314 116767  006456  011404           movb   dbia+2,pcbb+4
     454 003322 116767  006451  011377           movb   dbia+3,pcbb+5
     455 003330 116767  006440  011372           movb   dbia+0,pcbb+6
     456 003336 116767  006433  011365           movb   dbia+1,pcbb+7
     457                                
     458 003344 004767  007006                   jsr    pc,putpcbb
     459 003350 052737  004000  174510           bis    #4000,@#174510            ; dni
     460 003356 000207                           rts    pc
     461                                ;
     462                                ; fc3
     463                                ;
     464                                fc3:
     465                                         xascil <fc3 - no op function>
       1 003360 004767  010250                   jsr    pc,xasciz
       2 003364    146     143     063           .ascii /fc3 - no op function/
         003367    040     055     040  
         003372    156     157     040  
         003375    157     160     040  
         003400    146     165     156  
         003403    143     164     151  
         003406    157     156          
       3 003410    015     012     000           .asciz <15><12>
       4 003413    000                           .even
     466 003414 052737  004000  174510           bis    #4000,@#174510            ; dni, ach welja
     467 003422 000207                           rts    pc
     468                                ;
     469                                ; fc4
     470                                ;
     471                                fc4:
     472                                         xasciz <fc4 - read physical address >
       1 003424 004767  010204                   jsr    pc,xasciz
       2 003430    146     143     064           .asciz /fc4 - read physical address /
         003433    040     055     040  
         003436    162     145     141  
         003441    144     040     160  
         003444    150     171     163  
         003447    151     143     141  
         003452    154     040     141  
         003455    144     144     162  
         003460    145     163     163  
         003463    040     000          
       3 003465    000                           .even
     473 003466 004767  006624                   jsr    pc,getpcbb
     474 003472 116767  006472  011224           movb   dlaa+0,pcbb+2
     475 003500 116767  006465  011217           movb   dlaa+1,pcbb+3
     476 003506 116767  006460  011212           movb   dlaa+2,pcbb+4
     477 003514 116767  006453  011205           movb   dlaa+3,pcbb+5
     478 003522 116767  006446  011200           movb   dlaa+4,pcbb+6
     479 003530 116767  006441  011173           movb   dlaa+5,pcbb+7
     480                                         xbhx   pcbb+2,6
       1 003536 004767  010142                   jsr    pc,xbhx
       2 003542 014724                           .word  pcbb+2
       3 003544 000006                           .word  6
     481                                         xascil
       1 003546 004767  010062                   jsr    pc,xasciz
       2                                         .ascii //
       3 003552    015     012     000           .asciz <15><12>
       4 003555    000                           .even
     482 003556 004767  006574                   jsr    pc,putpcbb
     483 003562 052737  004000  174510           bis    #4000,@#174510            ; dni
     484 003570 000207                           rts    pc
     485                                ;
     486                                ; fc5
     487                                ;
     488                                fc5:
     489                                         xasciz <fc5 - write physical address >
       1 003572 004767  010036                   jsr    pc,xasciz
       2 003576    146     143     065           .asciz /fc5 - write physical address /
         003601    040     055     040  
         003604    167     162     151  
         003607    164     145     040  
         003612    160     150     171  
         003615    163     151     143  
         003620    141     154     040  
         003623    141     144     144  
         003626    162     145     163  
         003631    163     040     000  
       3                                         .even
     490 003634 004767  006456                   jsr    pc,getpcbb
     491 003640 116767  011060  006322           movb   pcbb+2,dlaa+0
     492 003646 116767  011053  006315           movb   pcbb+3,dlaa+1
     493 003654 116767  011046  006310           movb   pcbb+4,dlaa+2
     494 003662 116767  011041  006303           movb   pcbb+5,dlaa+3
     495 003670 116767  011034  006276           movb   pcbb+6,dlaa+4
     496 003676 116767  011027  006271           movb   pcbb+7,dlaa+5
     497                                         xbhx   dlaa,6
       1 003704 004767  007774                   jsr    pc,xbhx
       2 003710 012170                           .word  dlaa
       3 003712 000006                           .word  6
     498                                         xascil
       1 003714 004767  007714                   jsr    pc,xasciz
       2                                         .ascii //
       3 003720    015     012     000           .asciz <15><12>
       4 003723    000                           .even
     499 003724 004767  006146                   jsr    pc,setlaa
     500 003730 052737  004000  174510           bis    #4000,@#174510            ; dni
     501 003736 000207                           rts    pc
     502                                ;
     503                                ; fc6
     504                                ;
     505                                fc6:
     506                                         xascil <fc6 - read multicast address list>
       1 003740 004767  007670                   jsr    pc,xasciz
       2 003744    146     143     066           .ascii /fc6 - read multicast address list/
         003747    040     055     040  
         003752    162     145     141  
         003755    144     040     155  
         003760    165     154     164  
         003763    151     143     141  
         003766    163     164     040  
         003771    141     144     144  
         003774    162     145     163  
         003777    163     040     154  
         004002    151     163     164  
       3 004005    015     012     000           .asciz <15><12>
       4                                         .even
     507 004010 004767  006302                   jsr    pc,getpcbb
     508 004014 116700  010707                   movb   pcbb+5,r0
     509 004020 022700  000012                   cmp    #12,r0
     510 004024 002412                           blt    90$
     511 004026 010067  010700                   mov    r0,mltreq
     512 004032 005700                           tst    r0
     513 004034 001402                           beq    80$
     514 004036 004767  007312                   jsr    pc,putmlt
     515                                80$:
     516 004042 052737  004000  174510           bis    #4000,@#174510            ; dni
     517 004050 000207                           rts    pc
     518                                90$:
     519 004052 052737  044000  174510           bis    #44000,@#174510           ; pcei - error in req
     520 004060 000207                           rts    pc
     521                                ;
     522                                ; fc7
     523                                ;
     524                                fc7:
     525                                         xasciz <fc7 - write multicast address list >             ; FIXME, incomplete - the multicast list is ignored, only the mcen bit is set in the chip to match whether or not the list contains any entries at all             ; FIXME, incomplete
       1 004062 004767  007546                   jsr    pc,xasciz
       2 004066    146     143     067           .asciz /fc7 - write multicast address list /
         004071    040     055     040  
         004074    167     162     151  
         004077    164     145     040  
         004102    155     165     154  
         004105    164     151     143  
         004110    141     163     164  
         004113    040     141     144  
         004116    144     162     145  
         004121    163     163     040  
         004124    154     151     163  
         004127    164     040     000  
       3                                         .even
     526 004132 004767  006160                   jsr    pc,getpcbb
     527 004136 116700  010565                   movb   pcbb+5,r0
     528 004142 010067  010566                   mov    r0,mltlen
     529 004146 005700                           tst    r0
     530 004150 001014                           bne    20$
     531                                         xubl   cmcen,40
       1 004152 004767  006020                   jsr    pc,xubl
       2 004156 012072                           .word  cmcen
       3 004160 000040                           .word  40
       4 004162 000000                           .word  
       5 004164 000000                           .word  
     532                                         xasciz <clear>
       1 004166 004767  007442                   jsr    pc,xasciz
       2 004172    143     154     145           .asciz /clear/
         004175    141     162     000  
       3                                         .even
     533 004200 000544                           br     80$
     534                                20$:
     535 004202 022700  000012                   cmp    #12,r0
     536 004206 002551                           blt    90$
     537                                         xubl   smcen,40
       1 004210 004767  005762                   jsr    pc,xubl
       2 004214 012066                           .word  smcen
       3 004216 000040                           .word  40
       4 004220 000000                           .word  
       5 004222 000000                           .word  
     538 004224 004767  007036                   jsr    pc,getmlt
     539                                         xwhx   mltlen,2
       1 004230 004767  007546                   jsr    pc,xwhx
       2 004234 014734                           .word  mltlen
       3 004236 000002                           .word  2
     540                                         xascil
       1 004240 004767  007370                   jsr    pc,xasciz
       2                                         .ascii //
       3 004244    015     012     000           .asciz <15><12>
       4 004247    000                           .even
     541                                         xasciz <fc7        : >
       1 004250 004767  007360                   jsr    pc,xasciz
       2 004254    146     143     067           .asciz /fc7        : /
         004257    040     040     040  
         004262    040     040     040  
         004265    040     040     072  
         004270    040     000          
       3                                         .even
     542                                         xbhx   mltlist,14
       1 004272 004767  007406                   jsr    pc,xbhx
       2 004276 014736                           .word  mltlist
       3 004300 000014                           .word  14
     543                                         xascil
       1 004302 004767  007326                   jsr    pc,xasciz
       2                                         .ascii //
       3 004306    015     012     000           .asciz <15><12>
       4 004311    000                           .even
     544                                         xasciz <fc7        : >
       1 004312 004767  007316                   jsr    pc,xasciz
       2 004316    146     143     067           .asciz /fc7        : /
         004321    040     040     040  
         004324    040     040     040  
         004327    040     040     072  
         004332    040     000          
       3                                         .even
     545                                         xbhx   mltlist+14,14
       1 004334 004767  007344                   jsr    pc,xbhx
       2 004340 014752                           .word  mltlist+14
       3 004342 000014                           .word  14
     546                                         xascil
       1 004344 004767  007264                   jsr    pc,xasciz
       2                                         .ascii //
       3 004350    015     012     000           .asciz <15><12>
       4 004353    000                           .even
     547                                         xasciz <fc7        : >
       1 004354 004767  007254                   jsr    pc,xasciz
       2 004360    146     143     067           .asciz /fc7        : /
         004363    040     040     040  
         004366    040     040     040  
         004371    040     040     072  
         004374    040     000          
       3                                         .even
     548                                         xbhx   mltlist+30,14
       1 004376 004767  007302                   jsr    pc,xbhx
       2 004402 014766                           .word  mltlist+30
       3 004404 000014                           .word  14
     549                                         xascil
       1 004406 004767  007222                   jsr    pc,xasciz
       2                                         .ascii //
       3 004412    015     012     000           .asciz <15><12>
       4 004415    000                           .even
     550                                         xasciz <fc7        : >
       1 004416 004767  007212                   jsr    pc,xasciz
       2 004422    146     143     067           .asciz /fc7        : /
         004425    040     040     040  
         004430    040     040     040  
         004433    040     040     072  
         004436    040     000          
       3                                         .even
     551                                         xbhx   mltlist+44,14
       1 004440 004767  007240                   jsr    pc,xbhx
       2 004444 015002                           .word  mltlist+44
       3 004446 000014                           .word  14
     552                                         xascil
       1 004450 004767  007160                   jsr    pc,xasciz
       2                                         .ascii //
       3 004454    015     012     000           .asciz <15><12>
       4 004457    000                           .even
     553                                         xasciz <fc7        : >
       1 004460 004767  007150                   jsr    pc,xasciz
       2 004464    146     143     067           .asciz /fc7        : /
         004467    040     040     040  
         004472    040     040     040  
         004475    040     040     072  
         004500    040     000          
       3                                         .even
     554                                         xbhx   mltlist+60,14
       1 004502 004767  007176                   jsr    pc,xbhx
       2 004506 015016                           .word  mltlist+60
       3 004510 000014                           .word  14
     555                                ;         xascil
     556                                ;         xasciz <fc7        : >
     557                                ;         xbhx   mltlist+74,14
     558                                80$:
     559                                         xascil
       1 004512 004767  007116                   jsr    pc,xasciz
       2                                         .ascii //
       3 004516    015     012     000           .asciz <15><12>
       4 004521    000                           .even
     560 004522 052737  004000  174510           bis    #4000,@#174510            ; dni
     561 004530 000207                           rts    pc
     562                                90$:
     563 004532 052737  044000  174510           bis    #44000,@#174510           ; pcei - error in req
     564 004540 000207                           rts    pc
     565                                ;
     566                                ; fc10
     567                                ;
     568                                fc10:
     569                                         xascil <fc10 - read ring format >
       1 004542 004767  007066                   jsr    pc,xasciz
       2 004546    146     143     061           .ascii /fc10 - read ring format /
         004551    060     040     055  
         004554    040     162     145  
         004557    141     144     040  
         004562    162     151     156  
         004565    147     040     146  
         004570    157     162     155  
         004573    141     164     040  
       3 004576    015     012     000           .asciz <15><12>
       4 004601    000                           .even
     570 004602 004767  005510                   jsr    pc,getpcbb
     571                                ;
     572 004606 016767  007754  010220           mov    tdrbl,udbb
     573 004614 016767  007744  010214           mov    tdrbh,udbb+2
     574 004622 116767  007742  010207           movb   telen,udbb+3
     575 004630 016767  007736  010202           mov    trlen,udbb+4
     576 004636 016767  007740  010176           mov    rdrbl,udbb+6
     577 004644 016767  007730  010172           mov    rdrbh,udbb+10
     578 004652 116767  007726  010165           movb   relen,udbb+11
     579 004660 016767  007722  010160           mov    rrlen,udbb+12
     580                                ;
     581                                         xwhx   udbb,14
       1 004666 004767  007110                   jsr    pc,xwhx
       2 004672 015034                           .word  udbb
       3 004674 000014                           .word  14
     582                                         xascil
       1 004676 004767  006732                   jsr    pc,xasciz
       2                                         .ascii //
       3 004702    015     012     000           .asciz <15><12>
       4 004705    000                           .even
     583                                ;
     584 004706 012767  000014  010116           mov    #14,udbblen
     585 004714 004767  005536                   jsr    pc,putudbb
     586 004720 052737  004000  174510           bis    #4000,@#174510            ; dni
     587 004726 000207                           rts    pc
     588                                ;
     589                                ; fc11
     590                                ;
     591                                fc11:
     592                                         xasciz <fc11 - write ring format >
       1 004730 004767  006700                   jsr    pc,xasciz
       2 004734    146     143     061           .asciz /fc11 - write ring format /
         004737    061     040     055  
         004742    040     167     162  
         004745    151     164     145  
         004750    040     162     151  
         004753    156     147     040  
         004756    146     157     162  
         004761    155     141     164  
         004764    040     000          
       3                                         .even
     593 004766 004767  005324                   jsr    pc,getpcbb
     594                                ;
     595 004772 012767  000014  010032           mov    #14,udbblen
     596 005000 004767  005412                   jsr    pc,getudbb
     597                                         xwhx   udbb,14
       1 005004 004767  006772                   jsr    pc,xwhx
       2 005010 015034                           .word  udbb
       3 005012 000014                           .word  14
     598                                         xascil
       1 005014 004767  006614                   jsr    pc,xasciz
       2                                         .ascii //
       3 005020    015     012     000           .asciz <15><12>
       4 005023    000                           .even
     599                                ;
     600 005024 016767  010004  007534           mov    udbb,tdrbl
     601 005032 042767  000001  007526           bic    #1,tdrbl
     602 005040 016767  007772  007516           mov    udbb+2,tdrbh
     603 005046 042767  177774  007510           bic    #177774,tdrbh
     604 005054 116700  007757                   movb   udbb+3,r0
     605 005060 010067  007504                   mov    r0,telen
     606 005064 016767  007750  007500           mov    udbb+4,trlen
     607 005072 016767  007744  007502           mov    udbb+6,rdrbl
     608 005100 042767  000001  007474           bic    #1,rdrbl
     609 005106 016767  007732  007464           mov    udbb+10,rdrbh
     610 005114 042767  177774  007456           bic    #177774,rdrbh
     611 005122 116700  007717                   movb   udbb+11,r0
     612 005126 010067  007452                   mov    r0,relen
     613 005132 016767  007710  007446           mov    udbb+12,rrlen
     614 005140 052737  004000  174510           bis    #4000,@#174510            ; dni
     615                                ;
     616 005146 016767  007412  007452           mov    tdrbh,xcurrh              ; clear xcurr
     617 005154 016767  007406  007446           mov    tdrbl,xcurrl
     618                                ;
     619 005162 016767  007412  007426           mov    rdrbh,rcurrh              ; clear rcurr
     620 005170 016767  007406  007422           mov    rdrbl,rcurrl
     621                                ;
     622                                ; setup pointers to last buffer
     623                                ;
     624 005176 016767  007362  007370           mov    tdrbh,tdrmxh
     625 005204 016767  007356  007364           mov    tdrbl,tdrmxl
     626                                
     627 005212 016700  007354                   mov    trlen,r0
     628 005216 005300                           dec    r0
     629                                10$:
     630 005220 066767  007344  007350           add    telen,tdrmxl
     631 005226 005567  007342                   adc    tdrmxh
     632 005232 066767  007332  007336           add    telen,tdrmxl
     633 005240 005567  007330                   adc    tdrmxh
     634 005244 005300                           dec    r0
     635 005246 001364                           bne    10$
     636                                
     637 005250 016767  007324  007332           mov    rdrbh,rdrmxh
     638 005256 016767  007320  007326           mov    rdrbl,rdrmxl
     639                                
     640 005264 016700  007316                   mov    rrlen,r0
     641 005270 005300                           dec    r0
     642                                20$:
     643 005272 066767  007306  007312           add    relen,rdrmxl
     644 005300 005567  007304                   adc    rdrmxh
     645 005304 066767  007274  007300           add    relen,rdrmxl
     646 005312 005567  007272                   adc    rdrmxh
     647 005316 005300                           dec    r0
     648 005320 001364                           bne    20$
     649                                
     650 005322 000207                           rts    pc
     651                                ;
     652                                ; fc12
     653                                ;
     654                                fc12:
     655                                         xascil <fc12 - read counters>
       1 005324 004767  006304                   jsr    pc,xasciz
       2 005330    146     143     061           .ascii /fc12 - read counters/
         005333    062     040     055  
         005336    040     162     145  
         005341    141     144     040  
         005344    143     157     165  
         005347    156     164     145  
         005352    162     163          
       3 005354    015     012     000           .asciz <15><12>
       4 005357    000                           .even
     656 005360 052737  004000  174510           bis    #4000,@#174510            ; dni
     657 005366 000207                           rts    pc
     658                                ;
     659                                ; fc13
     660                                ;
     661                                fc13:
     662                                         xascil <fc13 - read and clear counters>
       1 005370 004767  006240                   jsr    pc,xasciz
       2 005374    146     143     061           .ascii /fc13 - read and clear counters/
         005377    063     040     055  
         005402    040     162     145  
         005405    141     144     040  
         005410    141     156     144  
         005413    040     143     154  
         005416    145     141     162  
         005421    040     143     157  
         005424    165     156     164  
         005427    145     162     163  
       3 005432    015     012     000           .asciz <15><12>
       4 005435    000                           .even
     663 005436 052737  004000  174510           bis    #4000,@#174510            ; dni
     664 005444 000207                           rts    pc
     665                                ;
     666                                ; fc14
     667                                ;
     668                                fc14:
     669                                         xasciz <fc14 - read mode bits >
       1 005446 004767  006162                   jsr    pc,xasciz
       2 005452    146     143     061           .asciz /fc14 - read mode bits /
         005455    064     040     055  
         005460    040     162     145  
         005463    141     144     040  
         005466    155     157     144  
         005471    145     040     142  
         005474    151     164     163  
         005477    040     000          
       3 005501    000                           .even
     670                                         xwhx   modebits,2
       1 005502 004767  006274                   jsr    pc,xwhx
       2 005506 014562                           .word  modebits
       3 005510 000002                           .word  2
     671                                         xascil
       1 005512 004767  006116                   jsr    pc,xasciz
       2                                         .ascii //
       3 005516    015     012     000           .asciz <15><12>
       4 005521    000                           .even
     672 005522 004767  004570                   jsr    pc,getpcbb
     673 005526 016767  007030  007170           mov    modebits,pcbb+2
     674 005534 004767  004616                   jsr    pc,putpcbb
     675 005540 052737  004000  174510           bis    #4000,@#174510            ; dni
     676 005546 000207                           rts    pc
     677                                ;
     678                                ; fc15
     679                                ;
     680                                fc15:
     681                                         xasciz <fc15 - write mode bits >
       1 005550 004767  006060                   jsr    pc,xasciz
       2 005554    146     143     061           .asciz /fc15 - write mode bits /
         005557    065     040     055  
         005562    040     167     162  
         005565    151     164     145  
         005570    040     155     157  
         005573    144     145     040  
         005576    142     151     164  
         005601    163     040     000  
       3                                         .even
     682                                         xwhx   modebits,2
       1 005604 004767  006172                   jsr    pc,xwhx
       2 005610 014562                           .word  modebits
       3 005612 000002                           .word  2
     683                                         xasciz ^/ -> /
       1 005614 004767  006014                   jsr    pc,xasciz
       2 005620    040     055     076           .asciz / -> /
         005623    040     000          
       3 005625    000                           .even
     684 005626 004767  004464                   jsr    pc,getpcbb
     685 005632 016767  007066  006722           mov    pcbb+2,modebits
     686                                         xwhx   modebits,2
       1 005640 004767  006136                   jsr    pc,xwhx
       2 005644 014562                           .word  modebits
       3 005646 000002                           .word  2
     687                                         xascil
       1 005650 004767  005760                   jsr    pc,xasciz
       2                                         .ascii //
       3 005654    015     012     000           .asciz <15><12>
       4 005657    000                           .even
     688                                ;
     689 005660 004767  005610                   jsr    pc,setmodebits
     690                                ;
     691 005664 052737  004000  174510           bis    #4000,@#174510            ; dni
     692 005672 000207                           rts    pc
     693                                ;
     694                                ; fc16
     695                                ;
     696                                fc16:
     697                                         xascil <fc16>
       1 005674 004767  005734                   jsr    pc,xasciz
       2 005700    146     143     061           .ascii /fc16/
         005703    066                  
       3 005704    015     012     000           .asciz <15><12>
       4 005707    000                           .even
     698 005710 000207                           rts    pc
     699                                ;
     700                                ; fc17
     701                                ;
     702                                fc17:
     703                                         xascil <fc17>
       1 005712 004767  005716                   jsr    pc,xasciz
       2 005716    146     143     061           .ascii /fc17/
         005721    067                  
       3 005722    015     012     000           .asciz <15><12>
       4 005725    000                           .even
     704 005726 000207                           rts    pc
     705                                ;
     706                                ; fc20
     707                                ;
     708                                fc20:
     709                                         xascil <fc20 - dump internal memory>
       1 005730 004767  005700                   jsr    pc,xasciz
       2 005734    146     143     062           .ascii /fc20 - dump internal memory/
         005737    060     040     055  
         005742    040     144     165  
         005745    155     160     040  
         005750    151     156     164  
         005753    145     162     156  
         005756    141     154     040  
         005761    155     145     155  
         005764    157     162     171  
       3 005767    015     012     000           .asciz <15><12>
       4                                         .even
     710 005772 052737  044000  174510           bis    #44000,@#174510           ; pcei - this function is not implemented
     711 006000 000207                           rts    pc
     712                                ;
     713                                ; fc21
     714                                ;
     715                                fc21:
     716                                         xascil <fc21 - load internal memory>
       1 006002 004767  005626                   jsr    pc,xasciz
       2 006006    146     143     062           .ascii /fc21 - load internal memory/
         006011    061     040     055  
         006014    040     154     157  
         006017    141     144     040  
         006022    151     156     164  
         006025    145     162     156  
         006030    141     154     040  
         006033    155     145     155  
         006036    157     162     171  
       3 006041    015     012     000           .asciz <15><12>
       4                                         .even
     717 006044 052737  044000  174510           bis    #44000,@#174510           ; pcei - this function is not implemented
     718 006052 000207                           rts    pc
     719                                ;
     720                                ; fc22
     721                                ;
     722                                fc22:
     723                                         xascil <fc22>
       1 006054 004767  005554                   jsr    pc,xasciz
       2 006060    146     143     062           .ascii /fc22/
         006063    062                  
       3 006064    015     012     000           .asciz <15><12>
       4 006067    000                           .even
     724 006070 000207                           rts    pc
     725                                ;
     726                                ; fc23
     727                                ;
     728                                fc23:
     729                                         xascil <fc23>
       1 006072 004767  005536                   jsr    pc,xasciz
       2 006076    146     143     062           .ascii /fc23/
         006101    063                  
       3 006102    015     012     000           .asciz <15><12>
       4 006105    000                           .even
     730 006106 000207                           rts    pc
     731                                ;
     732                                ; fc24
     733                                ;
     734                                fc24:
     735                                         xascil <fc24>
       1 006110 004767  005520                   jsr    pc,xasciz
       2 006114    146     143     062           .ascii /fc24/
         006117    064                  
       3 006120    015     012     000           .asciz <15><12>
       4 006123    000                           .even
     736 006124 000207                           rts    pc
     737                                ;
     738                                ; fc25
     739                                ;
     740                                fc25:
     741                                         xascil <fc25>
       1 006126 004767  005502                   jsr    pc,xasciz
       2 006132    146     143     062           .ascii /fc25/
         006135    065                  
       3 006136    015     012     000           .asciz <15><12>
       4 006141    000                           .even
     742 006142 000207                           rts    pc
     743                                ;
     744                                ; fc26
     745                                ;
     746                                fc26:
     747                                         xascil <fc26>
       1 006144 004767  005464                   jsr    pc,xasciz
       2 006150    146     143     062           .ascii /fc26/
         006153    066                  
       3 006154    015     012     000           .asciz <15><12>
       4 006157    000                           .even
     748 006160 000207                           rts    pc
     749                                ;
     750                                ; fc27
     751                                ;
     752                                fc27:
     753                                         xascil <fc27>
       1 006162 004767  005446                   jsr    pc,xasciz
       2 006166    146     143     062           .ascii /fc27/
         006171    067                  
       3 006172    015     012     000           .asciz <15><12>
       4 006175    000                           .even
     754 006176 000207                           rts    pc
     755                                ;
     756                                ; xmitpl : poll xmit ring for entries with own set
     757                                ;
     758                                xmitpl:
     759 006200 005067  006510                   clr    xmitdw
     760                                ;         tst    running
     761                                ;         bne    xpl010
     762                                ;         jmp    xpl990
     763                                xpl010:
     764 006204 005767  006420                   tst    xcurrl
     765 006210 001005                           bne    xpl020
     766 006212 005767  006410                   tst    xcurrh
     767 006216 001002                           bne    xpl020
     768 006220 000167  000214                   jmp    xpl990
     769                                xpl020:
     770 006224 010046                           mov    r0,-(sp)
     771                                ;
     772                                ;         xasciz <xmit poll  : >
     773                                ;         xwhx   xcurrh,2
     774                                ;         xwhx   xcurrl,2
     775                                ;         xascil
     776                                ;
     777 006226 016767  006376  006404           mov    xcurrl,xolddl
     778 006234 016767  006366  006374           mov    xcurrh,xolddh
     779 006242 005067  006346                   clr    xplrun
     780                                ;
     781                                xpl200:
     782 006246 004767  004620                   jsr    pc,getxcnh                        ; get xcurr and next header
     783                                
     784 006252 032767  100000  006376           bit    #100000,xdre+4                   ; own bit set?
     785 006260 001001                           bne    xpl210
     786                                ;         xascil <not own, end>
     787 006262 000465                           br     xpl900                           ; not set - end run
     788                                
     789                                xpl210:
     790                                ;         xasciz <xmitpl ent : >
     791                                ;         xwhx   xcurrh,2
     792                                ;         xwhx   xcurrl,2
     793                                ;         xasciz < >
     794                                ;         xwhx   xdre,10
     795                                
     796 006264 005767  006324                   tst    xplrun
     797 006270 001401                           beq    xpl220                           ; not continuation
     798                                ;         xasciz <cont >
     799 006272 000412                           br     xpl320
     800                                
     801                                xpl220:
     802 006274 032767  001000  006354           bit    #1000,xdre+4                     ; stp bit set?
     803 006302 001001                           bne    xpl300                           ; yes
     804                                ;         xascil <skip >
     805 006304 000423                           br     xpl340                           ; own, but not stp in the first message - skip/rel
     806                                
     807                                xpl300:
     808                                ;         xasciz <start >
     809 006306 012767  000001  006300           mov    #1,xplrun
     810 006314 004767  000122                   jsr    pc,xmitst
     811                                ;
     812                                ; 320 - if we get here, we have either the start bit in this buffer, or it is a chained buffer and we already saw start
     813                                ;
     814                                xpl320:
     815 006320 032767  000400  006330           bit    #400,xdre+4                      ; enp bit set?
     816 006326 001402                           beq    xpl330                           ; no
     817 006330 005067  006260                   clr    xplrun
     818                                ;         xasciz <end >
     819                                
     820                                xpl330:
     821                                ;         xascil
     822 006334 004767  000254                   jsr    pc,xmitld
     823 006340 032767  000400  006310           bit    #400,xdre+4                      ; enp bit set?
     824 006346 001402                           beq    xpl340                           ; no
     825 006350 004767  000134                   jsr    pc,xmitxx
     826                                xpl340:
     827 006354 004767  000630                   jsr    pc,xmitrb
     828                                xpl350:
     829                                ;         xasciz <xmitpl rel : >
     830                                ;         xwhx   xcurrh,2
     831                                ;         xwhx   xcurrl,2
     832                                ;         xasciz < >
     833                                ;         xwhx   xdre,10
     834                                ;         xascil
     835                                ;
     836                                ; advance to next entry and loop back, if all entries have not been done yet
     837                                ;
     838                                xpl700:
     839 006360 026767  006250  006252           cmp    xnextl,xolddl
     840 006366 001013                           bne    xpl710
     841 006370 026767  006236  006240           cmp    xnexth,xolddh
     842 006376 001007                           bne    xpl710
     843 006400 016767  006230  006222           mov    xnextl,xcurrl
     844 006406 016767  006220  006212           mov    xnexth,xcurrh
     845 006414 000410                           br     xpl900                    ; looped round, end of run
     846                                xpl710:
     847 006416 016767  006212  006204           mov    xnextl,xcurrl
     848 006424 016767  006202  006174           mov    xnexth,xcurrh
     849 006432 000167  177610                   jmp    xpl200
     850                                ;
     851                                ; exit
     852                                ;
     853                                xpl900:
     854 006436 012600                           mov    (sp)+,r0
     855                                xpl990:
     856 006440 000207                           rts    pc
     857                                ;
     858                                ; xmitst: do starting things re transmission, amongst others to the chip
     859                                ;
     860                                xmitst:
     861                                ;
     862                                ; set egpwr pointer to zero
     863                                ;
     864                                         xubl   wegpwr,40
       1 006442 004767  003530                   jsr    pc,xubl
       2 006446 006500                           .word  wegpwr
       3 006450 000040                           .word  40
       4 006452 000000                           .word  
       5 006454 000000                           .word  
     865                                         xubl   wetxst,40
       1 006456 004767  003514                   jsr    pc,xubl
       2 006462 006504                           .word  wetxst
       3 006464 000040                           .word  40
       4 006466 000000                           .word  
       5 006470 000000                           .word  
     866 006472 005067  006144                   clr    xmitlen
     867 006476 000207                           rts    pc
     868                                ;
     869                                         .even
     870 006500    042     210     000  wegpwr:  .byte wcru,egpwrpt,0,0
         006503    000                  
     871                                         .even
     872 006504    042     000     000  wetxst:  .byte wcru,etxst,0,0
         006507    000                  
     873                                ;
     874                                ; xmitxx: do ending things re transmission, including causing the chip to transmit
     875                                ;
     876                                xmitxx:
     877 006510 005767  006130                   tst    xmitmch
     878 006514 001403                           beq    10$
     879 006516 052767  020000  006132           bis    #20000,xdre+4
     880                                10$:
     881 006524 016767  006112  000060           mov    xmitlen,wetxlen+2
     882                                         xubl   wetxlen,40
       1 006532 004767  003440                   jsr    pc,xubl
       2 006536 006610                           .word  wetxlen
       3 006540 000040                           .word  40
       4 006542 000000                           .word  
       5 006544 000000                           .word  
     883                                ;
     884                                         xubl   tecon1,40
       1 006546 004767  003424                   jsr    pc,xubl
       2 006552 012036                           .word  tecon1
       3 006554 000040                           .word  40
       4 006556 000000                           .word  
       5 006560 000000                           .word  
     885                                20$:
     886                                         xubl   recon1,20,decon1,20
       1 006562 004767  003410                   jsr    pc,xubl
       2 006566 012026                           .word  recon1
       3 006570 000020                           .word  20
       4 006572 012030                           .word  decon1
       5 006574 000020                           .word  20
     887                                ;         xasciz <econ1      : >
     888                                ;         xbhx   decon1,2
     889                                ;         xascnl
     890                                
     891 006576 132767  000002  003224           bitb   #2,decon1
     892 006604 001366                           bne    20$
     893 006606 000207                           rts    pc
     894                                         .even
     895 006610    042     002     000  wetxlen: .byte wcru,etxlen,0,0
         006613    000                  
     896                                ;
     897                                ; xmitld: load bytes from current buffer
     898                                ;
     899                                xmitld:
     900 006614 010046                           mov    r0,-(sp)
     901 006616 010146                           mov    r1,-(sp)
     902 006620 010246                           mov    r2,-(sp)
     903 006622 010346                           mov    r3,-(sp)
     904 006624 010446                           mov    r4,-(sp)
     905                                
     906 006626 016703  006020                   mov    xdre+0,r3                        ; load slen into r3
     907 006632 016701  006016                   mov    xdre+2,r1                        ; load segb
     908 006636 042701  000001                   bic    #1,r1                            ; clean segb l      ; FIXME, we're disregarding byte alignment here
     909 006642 016702  006010                   mov    xdre+4,r2                        ; load segb h
     910 006646 042702  177774                   bic    #177774,r2                       ; clean segb h
     911                                
     912                                10$:
     913 006652 010300                           mov    r3,r0                            ; copy remainder of slen
     914 006654 022703  000020                   cmp    #20,r3                           ; is the actual length left > 20
     915 006660 002002                           bge    20$                              ; no
     916 006662 012700  000020                   mov    #20,r0                           ; set length for this run
     917                                20$:
     918                                ;         xasciz <xmitld buf : >
     919                                ;         mov    r2,buf
     920                                ;         mov    r1,buf+2
     921                                ;         xwhx   buf,4
     922 006666 010004                           mov    r0,r4
     923 006670 032704  000001                   bit    #1,r4
     924 006674 001001                           bne    22$
     925                                ;         xasciz < >
     926 006676 000401                           br     23$
     927                                22$:
     928                                ;         xasciz <!>
     929 006700 005204                           inc    r4                                ; make length an even number
     930                                23$:
     931                                ;         xasciz <xubm       : >
     932                                
     933                                ;         mov    r2,workw
     934                                ;         xwhx   workw,2
     935                                ;         mov    r1,workw
     936                                ;         xwhx   workw,2
     937                                ;         xasciz < >
     938                                ;         mov    r4,workw
     939                                ;         xwhx   workw,2
     940                                ;         xasciz < >
     941                                ;         mov    xmitlen,workw
     942                                ;         xwhx   workw,2
     943                                ;         xascil
     944                                
     945 006702 010137  177100                   mov    r1,@#177100
     946 006706 010237  177102                   mov    r2,@#177102
     947 006712 012737  015142  177104           mov    #buf+2,@#177104
     948 006720 112737  000000  177107           movb   #0,@#177107
     949 006726 110437  177106                   movb   r4,@#177106
     950                                
     951 006732 005767  005704                   tst    xmitlen
     952 006736 001057                           bne    26$
     953                                ;
     954                                ; set mch bit for transmit ring entry
     955                                ;
     956 006740 005067  005700                   clr    xmitmch
     957 006744 126767  003220  006170           cmpb   dlaa+0,buf+2
     958 006752 001027                           bne    25$
     959 006754 126767  003211  006161           cmpb   dlaa+1,buf+3
     960 006762 001023                           bne    25$
     961 006764 126767  003202  006152           cmpb   dlaa+2,buf+4
     962 006772 001017                           bne    25$
     963 006774 126767  003173  006143           cmpb   dlaa+3,buf+5
     964 007002 001013                           bne    25$
     965 007004 126767  003164  006134           cmpb   dlaa+4,buf+6
     966 007012 001007                           bne    25$
     967 007014 126767  003155  006125           cmpb   dlaa+5,buf+7
     968 007022 001003                           bne    25$
     969 007024 012767  000001  005612           mov    #1,xmitmch
     970                                ;
     971                                ; set our own address into the frame
     972                                ;
     973                                25$:
     974 007032 116767  003132  006110           movb   dlaa+0,buf+10
     975 007040 116767  003125  006103           movb   dlaa+1,buf+11
     976 007046 116767  003120  006076           movb   dlaa+2,buf+12
     977 007054 116767  003113  006071           movb   dlaa+3,buf+13
     978 007062 116767  003106  006064           movb   dlaa+4,buf+14
     979 007070 116767  003101  006057           movb   dlaa+5,buf+15
     980                                ;         xasciz <xmitld fib : >
     981                                ;         xbhx   buf+2,6
     982                                ;         xasciz < : >
     983                                ;         xbhx   buf+10,6
     984                                ;         xascil
     985                                26$:
     986 007076 060067  005540                   add    r0,xmitlen
     987                                
     988                                30$:
     989 007102 112767  000300  006030           movb   #b0sel,buf
     990 007110 112767  000052  006023           movb   #wgpdata,buf+1
     991 007116 010004                           mov    r0,r4
     992 007120 005204                           inc    r4
     993 007122 005204                           inc    r4
     994 007124 006304                           asl    r4
     995 007126 006304                           asl    r4
     996 007130 006304                           asl    r4
     997 007132 010467  000006                   mov    r4,31$          ; set the number of bits in the parm list
     998 007136 004767  003034                   jsr    pc,xubl
     999 007142 015140                           .word  buf
    1000 007144 000000                  31$:     .word  0
    1001 007146 000000                           .word  0
    1002 007150 000000                           .word  0
    1003                                
    1004                                40$:
    1005                                ;         mov    r0,41$
    1006                                ;         jsr    pc,xbhx
    1007                                ;         .word  buf+2
    1008                                ;41$:     .word  0
    1009                                ;         xascil
    1010                                42$:
    1011                                
    1012 007152 060001                           add    r0,r1                            ; add length of run to low
    1013 007154 005502                           adc    r2                               ; carry to high
    1014                                
    1015 007156 022703  000020                   cmp    #20,r3
    1016 007162 002004                           bge    50$
    1017 007164 162703  000020                   sub    #20,r3
    1018 007170 000167  177456                   jmp    10$
    1019                                50$:
    1020 007174 012604                           mov    (sp)+,r4
    1021 007176 012603                           mov    (sp)+,r3
    1022 007200 012602                           mov    (sp)+,r2
    1023 007202 012601                           mov    (sp)+,r1
    1024 007204 012600                           mov    (sp)+,r0
    1025 007206 000207                           rts    pc
    1026                                ;
    1027                                ; xmitrb: release current buffer from xmit ring
    1028                                ;
    1029                                xmitrb:
    1030 007210 032767  000400  005440           bit    #400,xdre+4                      ; enp bit set?
    1031 007216 001012                           bne    30$                              ; yes
    1032 007220 032767  100000  005440           bit    #100000,xdre+14                  ; own bit set in next buffer?
    1033 007226 001006                           bne    30$                              ; yes
    1034                                ;
    1035                                ; not end, and the next buffer is not owned. Must release the buffer and set error codes
    1036                                ;
    1037 007230 052767  040000  005420           bis    #40000,xdre+4                   ; err summary bit
    1038 007236 052767  100000  005414           bis    #100000,xdre+6                  ; set bufl
    1039                                ;
    1040                                ; reset own and write back
    1041                                ;
    1042                                30$:
    1043 007244 042767  100000  005404           bic    #100000,xdre+4                  ; clear own
    1044 007252 004767  003524                   jsr    pc,putxdre                      ; write back
    1045 007256 000207                           rts    pc
    1046                                ;
    1047                                ; pktin: deal with packets incoming on the encx24j600
    1048                                ;
    1049                                pktin:
    1050 007260 010046                           mov    r0,-(sp)
    1051 007262 010146                           mov    r1,-(sp)
    1052 007264 010246                           mov    r2,-(sp)
    1053 007266 010346                           mov    r3,-(sp)
    1054 007270 010446                           mov    r4,-(sp)
    1055 007272 010546                           mov    r5,-(sp)
    1056 007274 005067  005412                   clr    recvdw                 ; clear flag, did not do any work yet
    1057                                ;
    1058                                ; check if there is a free buffer on the receive ring. If there isn't, skip - and hope that the encx24j600 has enough space to buffer
    1059                                ;
    1060 007300 005767  005314                   tst    rcurrl                 ; ring pointer valid?
    1061 007304 001005                           bne    10$                    ; yes
    1062 007306 005767  005304                   tst    rcurrh                 ; ring pointer valid?
    1063 007312 001002                           bne    10$                    ; yes
    1064 007314 000167  000220                   jmp    90$                    ; no - can't even check buffer space yet
    1065                                ;
    1066                                ; read estat
    1067                                ;
    1068                                10$:
    1069                                         xubl   restat,20,destat,20
       1 007320 004767  002652                   jsr    pc,xubl
       2 007324 012002                           .word  restat
       3 007326 000020                           .word  20
       4 007330 012004                           .word  destat
       5 007332 000020                           .word  20
    1070 007334 116767  002444  005572           movb   destat,pktcnt
    1071 007342 105767  005566                   tstb   pktcnt
    1072 007346 001002                           bne    15$
    1073 007350 000167  000164                   jmp    90$
    1074                                ;
    1075                                ; check if there is a buffer free
    1076                                ;
    1077                                15$:
    1078 007354 004767  003136                   jsr    pc,getrdre             ; might be current, but refresh just to be sure
    1079 007360 032767  100000  005310           bit    #100000,rdre+4         ; own?
    1080 007366 001464                           beq    90$                    ; not own - skip pktin
    1081                                ;
    1082                                ; process read pointer in chip
    1083                                ;
    1084 007370 016767  005156  000164           mov    npp,werxrdpt+2
    1085                                         xubl   werxrdpt,40            ; set erxrdpt to the value of npp
       1 007376 004767  002574                   jsr    pc,xubl
       2 007402 007560                           .word  werxrdpt
       3 007404 000040                           .word  40
       4 007406 000000                           .word  
       5 007410 000000                           .word  
    1086                                         xubl   rnpp,20,dnpp,20        ; read first two bytes - pointer to the new npp
       1 007412 004767  002560                   jsr    pc,xubl
       2 007416 007564                           .word  rnpp
       3 007420 000020                           .word  20
       4 007422 007566                           .word  dnpp
       5 007424 000020                           .word  20
    1087 007426 016767  000134  005116           mov    dnpp,npp               ; copy the new npp
    1088                                ;
    1089                                ; read next 6 bytes
    1090                                ;
    1091                                         xubl   rpkth,20,dpkth,60
       1 007434 004767  002536                   jsr    pc,xubl
       2 007440 007570                           .word  rpkth
       3 007442 000020                           .word  20
       4 007444 007572                           .word  dpkth
       5 007446 000060                           .word  60
    1092                                ;         xasciz <pkt header : >
    1093                                ;         xbhx   dpkth,6
    1094                                ;         xascnl
    1095                                ;
    1096                                ; take length from header - from first two bytes
    1097                                ;
    1098 007450 016767  000116  005076           mov    dpkth,flen
    1099                                ;
    1100                                ; process frame data
    1101                                ;
    1102                                20$:
    1103 007456 004767  000122                   jsr    pc,getfr
    1104                                ;
    1105                                ; calculate new erxtail
    1106                                ;
    1107                                30$:
    1108 007462 016700  005064                   mov    npp,r0
    1109 007466 162700  000002                   sub    #2,r0
    1110 007472 022700  044000                   cmp    #44000,r0
    1111 007476 002402                           blt    31$
    1112 007500 012700  057776                   mov    #57776,r0
    1113                                31$:
    1114                                ;
    1115                                ; update erxtail - this releases the buffer in the encx24j600
    1116                                ;
    1117 007504 010067  002314                   mov    r0,werxtail+2
    1118                                         xubl   werxtail,40
       1 007510 004767  002462                   jsr    pc,xubl
       2 007514 012022                           .word  werxtail
       3 007516 000040                           .word  40
       4 007520 000000                           .word  
       5 007522 000000                           .word  
    1119                                ;
    1120                                ; dec pktcnt
    1121                                ;
    1122                                         xubl   decpc,20
       1 007524 004767  002446                   jsr    pc,xubl
       2 007530 007602                           .word  decpc
       3 007532 000020                           .word  20
       4 007534 000000                           .word  
       5 007536 000000                           .word  
    1123                                ;
    1124                                ; done, exit
    1125                                ;
    1126                                90$:
    1127 007540 012605                           mov    (sp)+,r5
    1128 007542 012604                           mov    (sp)+,r4
    1129 007544 012603                           mov    (sp)+,r3
    1130 007546 012602                           mov    (sp)+,r2
    1131 007550 012601                           mov    (sp)+,r1
    1132 007552 012600                           mov    (sp)+,r0
    1133 007554 000207                           rts pc
    1134                                ;
    1135                                ; pktin data
    1136                                ;
    1137                                         .even
    1138 007556    000                  pincnt:  .byte 0
    1139                                
    1140 007557    000                           .even
    1141 007560    042     212     000  werxrdpt: .byte wcru,erxrdpt,0,0
         007563    000                  
    1142                                
    1143                                         .even
    1144 007564    300     054          rnpp:    .byte b0sel,rrxdata
    1145 007566 000000                  dnpp:    .word 0
    1146                                
    1147                                         .even
    1148 007570    300     054          rpkth:   .byte b0sel,rrxdata
    1149                                
    1150                                         .even
    1151 007572    000     000     000  dpkth:   .byte 0,0,0,0,0,0
         007575    000     000     000  
    1152                                
    1153                                         .even
    1154 007600    300     054          rdata:   .byte b0sel,rrxdata
    1155                                
    1156                                         .even
    1157 007602    300     314          decpc:   .byte b0sel,setpktdec
    1158                                ;
    1159                                ; getfr: move a frame from the chip onto the receive ring buffer
    1160                                ;
    1161                                getfr:
    1162 007604 005767  004740                   tst    running
    1163 007610 001002                           bne    1$
    1164 007612 000167  000600                   jmp    99$
    1165                                1$:
    1166 007616 010046                           mov    r0,-(sp)
    1167 007620 010146                           mov    r1,-(sp)
    1168 007622 010246                           mov    r2,-(sp)
    1169 007624 010346                           mov    r3,-(sp)
    1170 007626 010446                           mov    r4,-(sp)
    1171 007630 010546                           mov    r5,-(sp)
    1172                                
    1173 007632 005767  004762                   tst    rcurrl
    1174 007636 001005                           bne    2$
    1175 007640 005767  004752                   tst    rcurrh
    1176 007644 001002                           bne    2$
    1177 007646 000167  000530                   jmp    95$
    1178                                2$:
    1179 007652 016703  004676                   mov    flen,r3
    1180 007656 005067  004764                   clr    mlen
    1181 007662 004767  002630                   jsr    pc,getrdre             ; might be current, but refresh just to be sure
    1182 007666 016702  005002                   mov    rdre+2,r2              ; segbl into r2
    1183 007672 016704  005000                   mov    rdre+4,r4              ; segbh into r4
    1184 007676 042704  177774                   bic    #177774,r4             ; clean segbh
    1185 007702 016705  004764                   mov    rdre,r5                ; slen into r5
    1186 007706 005067  004766                   clr    rdre+6                 ; start clean
    1187 007712 032767  100000  004756           bit    #100000,rdre+4         ; own?
    1188 007720 001404                           beq    5$                     ; current buffer is not own
    1189 007722 052767  001000  004746           bis    #1000,rdre+4           ; set stp
    1190 007730 000405                           br     10$
    1191                                5$:
    1192 007732 052737  002000  174510           bis    #2000,@#174510         ; rcbi
    1193 007740 000167  000436                   jmp    95$                    ; done here!
    1194                                
    1195                                10$:
    1196 007744 010300                           mov    r3,r0
    1197 007746 022703  000020                   cmp    #20,r3                 ; is the actual length left > 20
    1198 007752 002002                           bge    20$                    ; no
    1199 007754 012700  000020                   mov    #20,r0                 ; set length for this run
    1200                                20$:
    1201 007760 020500                           cmp    r5,r0
    1202 007762 002001                           bge    22$
    1203 007764 010500                           mov    r5,r0
    1204                                22$:
    1205 007766 010001                           mov    r0,r1                  ; r1 now has copy of noof bytes
    1206 007770 032701  000001                   bit    #1,r1                  ; uneven number leftover? xubl can only deal with words...
    1207 007774 001401                           beq    28$                    ; no
    1208 007776 005201                           inc    r1                     ; make even
    1209                                28$:
    1210 010000 006301                           asl    r1                     ; make into noof bits
    1211 010002 006301                           asl    r1
    1212 010004 006301                           asl    r1
    1213                                
    1214                                30$:
    1215 010006 010167  000012                   mov    r1,31$                 ; set the number of bits in the parm list
    1216 010012 004767  002160                   jsr    pc,xubl
    1217 010016 007600                           .word  rdata
    1218 010020 000020                           .word  20
    1219 010022 015140                           .word  buf
    1220 010024 000000                  31$:     .word  0
    1221                                
    1222                                40$:
    1223 010026 010001                           mov    r0,r1                  ; copy length
    1224 010030 032701  000001                   bit    #1,r1                  ; uneven number of bytes?
    1225 010034 001401                           beq    42$                    ; no
    1226 010036 005201                           inc    r1                     ; round up to the next word
    1227                                42$:
    1228 010040 010237  177100                   mov    r2,@#177100            ; dest low word addr
    1229 010044 010437  177102                   mov    r4,@#177102            ; dest high word addr
    1230 010050 012737  015140  177104           mov    #buf,@#177104          ; src addr
    1231 010056 112737  000001  177107           movb   #1,@#177107            ; direction - to xu busmaster
    1232 010064 005701                           tst    r1
    1233 010066 001402                           beq    48$
    1234 010070 110137  177106                   movb   r1,@#177106
    1235                                48$:
    1236                                ;
    1237                                ;
    1238                                ;
    1239 010074 010001                           mov    r0,r1                  ; copy length of run
    1240 010076 060102                           add    r1,r2
    1241 010100 005504                           adc    r4
    1242 010102 160105                           sub    r1,r5
    1243 010104 060167  004536                   add    r1,mlen
    1244 010110 160103                           sub    r1,r3                  ; subtract actual run length from frame length
    1245 010112 022703  000000                   cmp    #0,r3                  ; finished frame?
    1246 010116 002070                           bge    90$                    ; yes
    1247                                
    1248                                50$:
    1249 010120 020527  000000                   cmp    r5,#0                  ; buffer filled?
    1250 010124 003063                           bgt    60$
    1251                                
    1252                                ;         xascil <BAZINGA!!!!!>
    1253 010126 005767  004516                   tst    drdc                   ; can we do data chaining?
    1254 010132 001412                           beq    52$                    ; yes, go on
    1255 010134 066767  004506  004536           add    mlen,rdre+6            ; set message length - leave other bits in there intact, given that we started out at zero...
    1256 010142 052767  100000  004530           bis    #100000,rdre+6         ; set bufl
    1257 010150 052767  040000  004520           bis    #40000,rdre+4          ; set errs
    1258 010156 000450                           br     90$
    1259                                52$:
    1260                                
    1261 010160 032767  100000  004520           bit    #100000,rdre+14        ; do we own the next buffer?
    1262 010166 001012                           bne    53$                    ; yes
    1263 010170 066767  004452  004502           add    mlen,rdre+6            ; set message length - leave other bits in there intact, given that we started out at zero...
    1264 010176 052767  100000  004474           bis    #100000,rdre+6         ; set bufl
    1265 010204 052767  040000  004464           bis    #40000,rdre+4          ; set errs
    1266 010212 000432                           br     90$
    1267                                
    1268                                53$:
    1269 010214 042767  100000  004454           bic    #100000,rdre+4         ; clear own
    1270 010222 004767  002464                   jsr    pc,putrdre                      ; write back
    1271 010226 016767  004370  004362           mov    rnexth,rcurrh          ; next buffer
    1272 010234 016767  004364  004356           mov    rnextl,rcurrl
    1273 010242 004767  002250                   jsr    pc,getrdre             ; might be current, but refresh just to be sure
    1274 010246 016702  004422                   mov    rdre+2,r2              ; segbl into r2
    1275 010252 016704  004420                   mov    rdre+4,r4              ; segbh into r4
    1276 010256 042704  177774                   bic    #177774,r4             ; clean segbh
    1277 010262 016705  004404                   mov    rdre,r5                ; slen into r5
    1278 010266 005067  004406                   clr    rdre+6                 ; start clean
    1279 010272 000624                           br     10$                    ; current buffer is own - we're in business
    1280                                60$:
    1281 010274 000167  177444                   jmp    10$
    1282                                ;
    1283                                ;
    1284                                ;
    1285                                90$:
    1286 010300 032767  100000  004370           bit    #100000,rdre+4
    1287 010306 001435                           beq    95$                    ; not own
    1288 010310 052767  000400  004360           bis    #400,rdre+4            ; set enp
    1289 010316 042767  100000  004352           bic    #100000,rdre+4         ; clear own
    1290 010324 032767  100000  004346           bit    #100000,rdre+6         ; bufl already set?
    1291 010332 001003                           bne    91$                    ; yes, skip setting mlen
    1292 010334 066767  004306  004336           add    mlen,rdre+6            ; set message length - leave other bits in there intact, given that we started out at zero...
    1293                                91$:
    1294 010342 005767  004302                   tst    drdc
    1295 010346 001403                           beq    92$
    1296 010350 052767  020000  004322           bis    #20000,rdre+6          ; set nchn
    1297                                92$:
    1298 010356 004767  002330                   jsr    pc,putrdre                      ; write back
    1299 010362 016767  004234  004226           mov    rnexth,rcurrh
    1300 010370 016767  004230  004222           mov    rnextl,rcurrl
    1301 010376 004767  002114                   jsr    pc,getrdre
    1302                                95$:
    1303 010402 012605                           mov    (sp)+,r5
    1304 010404 012604                           mov    (sp)+,r4
    1305 010406 012603                           mov    (sp)+,r3
    1306 010410 012602                           mov    (sp)+,r2
    1307 010412 012601                           mov    (sp)+,r1
    1308 010414 012600                           mov    (sp)+,r0
    1309                                99$:
    1310 010416 000207                           rts    pc
    1311                                ;
    1312                                ; init encx24j600 chip connected to spi xubl peripheral on our bus
    1313                                ;
    1314                                initenc:
    1315                                ;
    1316                                ; check eudast to see if we are in touch with the chip
    1317                                ;
    1318 010420 004767  001014                   jsr    pc,chkeudast
    1319 010424 005700                           tst    r0
    1320 010426 001402                           beq    10$
    1321 010430 000167  000776                   jmp    99$
    1322                                ;
    1323                                ; read estat, bit 12 - wait until that shows the chip finished powerup
    1324                                ;
    1325                                10$:
    1326 010434 012700  000012                   mov    #10.,r0
    1327                                11$:
    1328                                         xubl   restat,20,destat,20
       1 010440 004767  001532                   jsr    pc,xubl
       2 010444 012002                           .word  restat
       3 010446 000020                           .word  20
       4 010450 012004                           .word  destat
       5 010452 000020                           .word  20
    1329 010454 032767  010000  001322           bit    #10000,destat
    1330 010462 001025                           bne    20$
    1331                                         xasciz <estat      : >
       1 010464 004767  003144                   jsr    pc,xasciz
       2 010470    145     163     164           .asciz /estat      : /
         010473    141     164     040  
         010476    040     040     040  
         010501    040     040     072  
         010504    040     000          
       3                                         .even
    1332                                         xbhx   destat,2
       1 010506 004767  003172                   jsr    pc,xbhx
       2 010512 012004                           .word  destat
       3 010514 000002                           .word  2
    1333                                         xascnl
       1 010516 004767  003112                   jsr    pc,xasciz
       2 010522    015     012     000           .asciz <15><12>
       3 010525    000                           .even
    1334 010526 005300                           dec    r0
    1335 010530 001343                           bne    11$
    1336 010532 000167  000674                   jmp    99$
    1337                                20$:
    1338                                ;
    1339                                ; write reset bit into econ2
    1340                                ;
    1341                                         xubl   qecon2,40
       1 010536 004767  001434                   jsr    pc,xubl
       2 010542 012012                           .word  qecon2
       3 010544 000040                           .word  40
       4 010546 000000                           .word  
       5 010550 000000                           .word  
    1342                                ;
    1343                                ; wait
    1344                                ;
    1345 010552 004767  003674                   jsr    pc,waitabit
    1346                                ;
    1347                                ; read eudast again, see if the reset took place
    1348                                ;
    1349                                30$:
    1350                                         xubl   reudast,20,ceudast,20
       1 010556 004767  001414                   jsr    pc,xubl
       2 010562 011632                           .word  reudast
       3 010564 000020                           .word  20
       4 010566 011634                           .word  ceudast
       5 010570 000020                           .word  20
    1351 010572 005767  001036                   tst    ceudast
    1352 010576 001437                           beq    40$
    1353                                         xasciz <init: eudast did not reset, value is >
       1 010600 004767  003030                   jsr    pc,xasciz
       2 010604    151     156     151           .asciz /init: eudast did not reset, value is /
         010607    164     072     040  
         010612    145     165     144  
         010615    141     163     164  
         010620    040     144     151  
         010623    144     040     156  
         010626    157     164     040  
         010631    162     145     163  
         010634    145     164     054  
         010637    040     166     141  
         010642    154     165     145  
         010645    040     151     163  
         010650    040     000          
       3                                         .even
    1354                                         xbhx   ceudast,2
       1 010652 004767  003026                   jsr    pc,xbhx
       2 010656 011634                           .word  ceudast
       3 010660 000002                           .word  2
    1355                                         xascnl
       1 010662 004767  002746                   jsr    pc,xasciz
       2 010666    015     012     000           .asciz <15><12>
       3 010671    000                           .even
    1356 010672 000167  000534                   jmp    99$
    1357                                40$:
    1358                                ;
    1359                                ; read mac addr from the chip
    1360                                ;
    1361                                         xubl   rbia,20,dbia,60
       1 010676 004767  001274                   jsr    pc,xubl
       2 010702 011754                           .word  rbia
       3 010704 000020                           .word  20
       4 010706 011774                           .word  dbia
       5 010710 000060                           .word  60
    1362                                         xasciz <x24j600 bia: >
       1 010712 004767  002716                   jsr    pc,xasciz
       2 010716    170     062     064           .asciz /x24j600 bia: /
         010721    152     066     060  
         010724    060     040     142  
         010727    151     141     072  
         010732    040     000          
       3                                         .even
    1363                                         xbhx   dbia+4,1
       1 010734 004767  002744                   jsr    pc,xbhx
       2 010740 012000                           .word  dbia+4
       3 010742 000001                           .word  1
    1364                                         xasciz <:>
       1 010744 004767  002664                   jsr    pc,xasciz
       2 010750    072     000                   .asciz /:/
       3                                         .even
    1365                                         xbhx   dbia+5,1
       1 010752 004767  002726                   jsr    pc,xbhx
       2 010756 012001                           .word  dbia+5
       3 010760 000001                           .word  1
    1366                                         xasciz <:>
       1 010762 004767  002646                   jsr    pc,xasciz
       2 010766    072     000                   .asciz /:/
       3                                         .even
    1367                                         xbhx   dbia+2,1
       1 010770 004767  002710                   jsr    pc,xbhx
       2 010774 011776                           .word  dbia+2
       3 010776 000001                           .word  1
    1368                                         xasciz <:>
       1 011000 004767  002630                   jsr    pc,xasciz
       2 011004    072     000                   .asciz /:/
       3                                         .even
    1369                                         xbhx   dbia+3,1
       1 011006 004767  002672                   jsr    pc,xbhx
       2 011012 011777                           .word  dbia+3
       3 011014 000001                           .word  1
    1370                                         xasciz <:>
       1 011016 004767  002612                   jsr    pc,xasciz
       2 011022    072     000                   .asciz /:/
       3                                         .even
    1371                                         xbhx   dbia+0,1
       1 011024 004767  002654                   jsr    pc,xbhx
       2 011030 011774                           .word  dbia+0
       3 011032 000001                           .word  1
    1372                                         xasciz <:>
       1 011034 004767  002574                   jsr    pc,xasciz
       2 011040    072     000                   .asciz /:/
       3                                         .even
    1373                                         xbhx   dbia+1,1
       1 011042 004767  002636                   jsr    pc,xbhx
       2 011046 011775                           .word  dbia+1
       3 011050 000001                           .word  1
    1374                                         xascnl
       1 011052 004767  002556                   jsr    pc,xasciz
       2 011056    015     012     000           .asciz <15><12>
       3 011061    000                           .even
    1375 011062 116767  000712  001100           movb   dbia+4,dlaa+0
    1376 011070 116767  000705  001073           movb   dbia+5,dlaa+1
    1377 011076 116767  000674  001066           movb   dbia+2,dlaa+2
    1378 011104 116767  000667  001061           movb   dbia+3,dlaa+3
    1379 011112 116767  000656  001054           movb   dbia+0,dlaa+4
    1380 011120 116767  000651  001047           movb   dbia+1,dlaa+5
    1381                                ;
    1382                                ; set npp, erxst to initial value
    1383                                ;
    1384 011126 012767  044000  003416           mov    #44000,npp
    1385 011134 016767  003412  000656           mov    npp,werxst+2
    1386                                         xubl   werxst,40
       1 011142 004767  001030                   jsr    pc,xubl
       2 011146 012016                           .word  werxst
       3 011150 000040                           .word  40
       4 011152 000000                           .word  
       5 011154 000000                           .word  
    1387                                ;
    1388                                ; set erxtail
    1389                                ;
    1390 011156 012767  057776  000640           mov    #57776,werxtail+2
    1391                                         xubl   werxtail,40
       1 011164 004767  001006                   jsr    pc,xubl
       2 011170 012022                           .word  werxtail
       3 011172 000040                           .word  40
       4 011174 000000                           .word  
       5 011176 000000                           .word  
    1392                                ;
    1393                                ; read econ1, set rxen
    1394                                ;
    1395                                         xubl   recon1,20,decon1,20
       1 011200 004767  000772                   jsr    pc,xubl
       2 011204 012026                           .word  recon1
       3 011206 000020                           .word  20
       4 011210 012030                           .word  decon1
       5 011212 000020                           .word  20
    1396                                         xasciz <econ1      : >
       1 011214 004767  002414                   jsr    pc,xasciz
       2 011220    145     143     157           .asciz /econ1      : /
         011223    156     061     040  
         011226    040     040     040  
         011231    040     040     072  
         011234    040     000          
       3                                         .even
    1397                                         xbhx   decon1,2
       1 011236 004767  002442                   jsr    pc,xbhx
       2 011242 012030                           .word  decon1
       3 011244 000002                           .word  2
    1398                                         xascnl
       1 011246 004767  002362                   jsr    pc,xasciz
       2 011252    015     012     000           .asciz <15><12>
       3 011255    000                           .even
    1399                                         xubl   xecon1,40
       1 011256 004767  000714                   jsr    pc,xubl
       2 011262 012032                           .word  xecon1
       3 011264 000040                           .word  40
       4 011266 000000                           .word  
       5 011270 000000                           .word  
    1400                                         xubl   recon1,20,decon1,20
       1 011272 004767  000700                   jsr    pc,xubl
       2 011276 012026                           .word  recon1
       3 011300 000020                           .word  20
       4 011302 012030                           .word  decon1
       5 011304 000020                           .word  20
    1401                                         xasciz <econ1      : >
       1 011306 004767  002322                   jsr    pc,xasciz
       2 011312    145     143     157           .asciz /econ1      : /
         011315    156     061     040  
         011320    040     040     040  
         011323    040     040     072  
         011326    040     000          
       3                                         .even
    1402                                         xbhx   decon1,2
       1 011330 004767  002350                   jsr    pc,xbhx
       2 011334 012030                           .word  decon1
       3 011336 000002                           .word  2
    1403                                         xascnl
       1 011340 004767  002270                   jsr    pc,xasciz
       2 011344    015     012     000           .asciz <15><12>
       3 011347    000                           .even
    1404                                ;
    1405                                ; read econ2
    1406                                ;
    1407                                         xubl   recon2,20,decon2,20
       1 011350 004767  000622                   jsr    pc,xubl
       2 011354 012042                           .word  recon2
       3 011356 000020                           .word  20
       4 011360 012044                           .word  decon2
       5 011362 000020                           .word  20
    1408                                         xasciz <econ2      : >
       1 011364 004767  002244                   jsr    pc,xasciz
       2 011370    145     143     157           .asciz /econ2      : /
         011373    156     062     040  
         011376    040     040     040  
         011401    040     040     072  
         011404    040     000          
       3                                         .even
    1409                                         xbhx   decon2,2
       1 011406 004767  002272                   jsr    pc,xbhx
       2 011412 012044                           .word  decon2
       3 011414 000002                           .word  2
    1410                                         xascnl
       1 011416 004767  002212                   jsr    pc,xasciz
       2 011422    015     012     000           .asciz <15><12>
       3 011425    000                           .even
    1411                                ;
    1412                                ; end
    1413                                ;
    1414                                90$:
    1415 011426 005000                           clr    r0
    1416 011430 000207                           rts    pc
    1417                                99$:
    1418 011432 012700  000001                   mov    #1,r0
    1419 011436 000207                           rts    pc
    1420                                ;
    1421                                ; write, read, verify eudast
    1422                                ;
    1423                                chkeudast:
    1424                                10$:
    1425 011440 012700  000012                   mov    #10.,r0
    1426                                11$:
    1427 011444 012767  022522  000156           mov    #22522,weudast+2                 ; setup buffer
    1428                                         xubl   weudast,40,0,0                   ; xubl write
       1 011452 004767  000520                   jsr    pc,xubl
       2 011456 011626                           .word  weudast
       3 011460 000040                           .word  40
       4 011462 000000                           .word  0
       5 011464 000000                           .word  0
    1429 011466 005067  000142                   clr    ceudast                          ; make sure data isnt left here
    1430                                         xubl   reudast,20,ceudast,20            ; xubl read
       1 011472 004767  000500                   jsr    pc,xubl
       2 011476 011632                           .word  reudast
       3 011500 000020                           .word  20
       4 011502 011634                           .word  ceudast
       5 011504 000020                           .word  20
    1431 011506 022767  022522  000120           cmp    #22522,ceudast                   ; is it the pattern we did store in the eudast
    1432 011514 001442                           beq    20$                              ; yes, worked
    1433                                         xasciz <init: eudast did not reset, value is >
       1 011516 004767  002112                   jsr    pc,xasciz
       2 011522    151     156     151           .asciz /init: eudast did not reset, value is /
         011525    164     072     040  
         011530    145     165     144  
         011533    141     163     164  
         011536    040     144     151  
         011541    144     040     156  
         011544    157     164     040  
         011547    162     145     163  
         011552    145     164     054  
         011555    040     166     141  
         011560    154     165     145  
         011563    040     151     163  
         011566    040     000          
       3                                         .even
    1434                                         xbhx   ceudast,2                        ; and value
       1 011570 004767  002110                   jsr    pc,xbhx
       2 011574 011634                           .word  ceudast
       3 011576 000002                           .word  2
    1435                                         xascnl
       1 011600 004767  002030                   jsr    pc,xasciz
       2 011604    015     012     000           .asciz <15><12>
       3 011607    000                           .even
    1436 011610 005700                           tst    r0
    1437 011612 001314                           bne    11$
    1438 011614 012700  000001                   mov    #1,r0
    1439 011620 000207                           rts    pc
    1440                                20$:
    1441 011622 005000                           clr    r0
    1442 011624 000207                           rts    pc                               ; return
    1443                                ;
    1444                                ; data for initenc
    1445                                ;
    1446                                         .even
    1447 011626    042     066     000  weudast: .byte wcru,eudast,0,0
         011631    000                  
    1448                                          .even
    1449 011632    040     066          reudast: .byte rcru,eudast
    1450 011634 000000                  ceudast: .word 0
    1451                                
    1452 011636    151     156     151  seudast: .asciz /init: eudast did not update, value is /
         011641    164     072     040  
         011644    145     165     144  
         011647    141     163     164  
         011652    040     144     151  
         011655    144     040     156  
         011660    157     164     040  
         011663    165     160     144  
         011666    141     164     145  
         011671    054     040     166  
         011674    141     154     165  
         011677    145     040     151  
         011702    163     040     000  
    1453 011705    151     156     151  meudast: .asciz /init: eudast did not reset, value is /
         011710    164     072     040  
         011713    145     165     144  
         011716    141     163     164  
         011721    040     144     151  
         011724    144     040     156  
         011727    157     164     040  
         011732    162     145     163  
         011735    145     164     054  
         011740    040     166     141  
         011743    154     165     145  
         011746    040     151     163  
         011751    040     000          
    1454                                
    1455 011753    000                            .even
    1456 011754    040     140          rbia:    .byte rcru,maadr3l
    1457 011756    170     062     064  sbia:    .asciz /x24j600 bia: /
         011761    152     066     060  
         011764    060     040     142  
         011767    151     141     072  
         011772    040     000          
    1458                                
    1459                                         .even
    1460 011774    000     000     000  dbia:    .byte 0,0,0,0,0,0
         011777    000     000     000  
    1461                                
    1462                                         .even
    1463 012002    040     032          restat:  .byte rcru,estat
    1464 012004 000000                  destat:  .word 0
    1465                                
    1466                                         .even
    1467 012006    040     164          reidled: .byte rcru,eidled
    1468 012010 000000                  deidled: .word 0
    1469                                
    1470                                         .even
    1471 012012    044     156     020  qecon2:  .byte bfsu,econ2,20,0
         012015    000                  
    1472                                
    1473                                         .even
    1474 012016    042     004     000  werxst:  .byte wcru,erxst,0,0
         012021    000                  
    1475                                
    1476                                         .even
    1477 012022    042     006     000  werxtail:.byte wcru,erxtail,0,0
         012025    000                  
    1478                                
    1479                                         .even
    1480 012026    040     036          recon1:  .byte rcru,econ1
    1481 012030 000000                  decon1:  .word 0
    1482 012032    044     036     001  xecon1:  .byte bfsu,econ1,1,0
         012035    000                  
    1483 012036    044     036     002  tecon1:  .byte bfsu,econ1,2,0
         012041    000                  
    1484                                
    1485                                         .even
    1486 012042    040     156          recon2:  .byte rcru,econ2
    1487 012044 000000                  decon2:  .word 0
    1488                                
    1489                                         .even
    1490 012046    044     100     020  setlpbk: .byte bfsu,macon1,20,0
         012051    000                  
    1491                                
    1492                                         .even
    1493 012052    046     100     020  clrlpbk: .byte bfcu,macon1,20,0
         012055    000                  
    1494                                
    1495                                         .even
    1496 012056    044     064     004  snotmeen:.byte bfsu,erxfcon,4,0
         012061    000                  
    1497                                
    1498                                         .even
    1499 012062    046     064     004  cnotmeen:.byte bfcu,erxfcon,4,0
         012065    000                  
    1500                                
    1501                                         .even
    1502 012066    044     064     002  smcen:   .byte bfsu,erxfcon,2,0
         012071    000                  
    1503                                
    1504                                         .even
    1505 012072    046     064     002  cmcen:   .byte bfcu,erxfcon,2,0
         012075    000                  
    1506                                ;
    1507                                ; setlaa : set the mac address into the encx24j600 - note that this acts on the unicast receive filter only
    1508                                ;
    1509                                setlaa:
    1510 012076 116767  000072  000056           movb   dlaa+4,wlaa+2
    1511 012104 116767  000065  000051           movb   dlaa+5,wlaa+3
    1512 012112 116767  000054  000044           movb   dlaa+2,wlaa+4
    1513 012120 116767  000047  000037           movb   dlaa+3,wlaa+5
    1514 012126 116767  000036  000032           movb   dlaa+0,wlaa+6
    1515 012134 116767  000031  000025           movb   dlaa+1,wlaa+7
    1516                                ;
    1517                                         xubl   wlaa,100
       1 012142 004767  000030                   jsr    pc,xubl
       2 012146 012160                           .word  wlaa
       3 012150 000100                           .word  100
       4 012152 000000                           .word  
       5 012154 000000                           .word  
    1518 012156 000207                           rts    pc
    1519                                
    1520                                         .even
    1521 012160    042     140          wlaa:    .byte  wcru,maadr3
    1522 012162    000     000     000           .byte  0,0,0,0,0,0                        ; this field is also used to store the laa in. If the laa is default, this should be zero; if not, the laa should be in here
         012165    000     000     000  
    1523                                ;
    1524 012170    000     000     000  dlaa:    .byte  0,0,0,0,0,0
         012173    000     000     000  
    1525                                
    1526                                         .even
    1527                                ;
    1528                                ; xubl stub routine
    1529                                ;
    1530                                xubl:
    1531 012176 010546                           mov r5,-(sp)
    1532 012200 016605  000002                   mov 2(sp),r5
    1533 012204 062766  000010  000002           add #10,2(sp)
    1534 012212 016537  000000  177000           mov 0(r5),@#177000
    1535 012220 016537  000004  177004           mov 4(r5),@#177004
    1536 012226 016537  000006  177006           mov 6(r5),@#177006
    1537 012234 016537  000002  177002           mov 2(r5),@#177002
    1538 012242 012605                           mov (sp)+,r5
    1539 012244 000207                           rts pc
    1540                                ;
    1541                                ; xubm stub routine
    1542                                ;
    1543                                xubm:
    1544 012246 010546                           mov r5,-(sp)
    1545 012250 016605  000002                   mov 2(sp),r5
    1546 012254 062766  000010  000002           add #10,2(sp)
    1547 012262 016537  000000  177100           mov 0(r5),@#177100
    1548 012270 016537  000002  177102           mov 2(r5),@#177102
    1549 012276 016537  000004  177104           mov 4(r5),@#177104
    1550 012304 016537  000006  177106           mov 6(r5),@#177106
    1551 012312 012605                           mov (sp)+,r5
    1552 012314 000207                           rts pc
    1553                                ;
    1554                                ; getpcbb: xubm the pcbb into our memory
    1555                                ;
    1556                                getpcbb:
    1557 012316 016737  002374  177100           mov    pcbbl,@#177100
    1558 012324 016737  002370  177102           mov    pcbbh,@#177102
    1559 012332 012737  014722  177104           mov    #pcbb,@#177104
    1560 012340 112737  000000  177107           movb   #0,@#177107
    1561 012346 112737  000010  177106           movb   #10,@#177106
    1562 012354 000207                           rts    pc
    1563                                ;
    1564                                ; putpcbb: xubm our pcbb copy into the unibus memory
    1565                                ;
    1566                                putpcbb:
    1567 012356 016737  002334  177100           mov    pcbbl,@#177100
    1568 012364 016737  002330  177102           mov    pcbbh,@#177102
    1569 012372 012737  014722  177104           mov    #pcbb,@#177104
    1570 012400 112737  000001  177107           movb   #1,@#177107
    1571 012406 112737  000010  177106           movb   #10,@#177106
    1572 012414 000207                           rts    pc
    1573                                ;
    1574                                ; getudbb: get udbb from unibus, address in pcbb must be valid and length must be set in udbblen
    1575                                ;
    1576                                getudbb:
    1577 012416 016737  002302  177100           mov    pcbb+2,@#177100
    1578 012424 016737  002276  177102           mov    pcbb+4,@#177102
    1579 012432 012737  015034  177104           mov    #udbb,@#177104
    1580 012440 112737  000000  177107           movb   #0,@#177107
    1581 012446 116737  002360  177106           movb   udbblen,@#177106
    1582 012454 000207                           rts    pc
    1583                                ;
    1584                                ; putudbb: move udbb to unibus, address in pcbb must be valid and length must be set in udbblen
    1585                                ;
    1586                                putudbb:
    1587 012456 016737  002242  177100           mov    pcbb+2,@#177100
    1588 012464 016737  002236  177102           mov    pcbb+4,@#177102
    1589 012472 012737  015034  177104           mov    #udbb,@#177104
    1590 012500 112737  000001  177107           movb   #1,@#177107
    1591 012506 116737  002320  177106           movb   udbblen,@#177106
    1592 012514 000207                           rts    pc
    1593                                ;
    1594                                ; getrdre: read receive descriptor ring entry from unibus
    1595                                ;
    1596                                getrdre:
    1597 012516 016737  002076  177100           mov    rcurrl,@#177100
    1598 012524 016737  002066  177102           mov    rcurrh,@#177102
    1599 012532 012737  014672  177104           mov    #rdre,@#177104
    1600 012540 112737  000000  177107           movb   #0,@#177107
    1601 012546 112737  000010  177106           movb   #10,@#177106
    1602                                
    1603 012554 026767  002040  002030           cmp    rcurrl,rdrmxl             ; need to wrap?
    1604 012562 001013                           bne    10$
    1605 012564 026767  002026  002016           cmp    rcurrh,rdrmxh
    1606 012572 001007                           bne    10$
    1607 012574 016767  002000  002020           mov    rdrbh,rnexth              ; wrap, rnext is first buffer in ring
    1608 012602 016767  001774  002014           mov    rdrbl,rnextl
    1609 012610 000420                           br     20$
    1610                                10$:
    1611 012612 016767  002002  002004           mov    rcurrl,rnextl
    1612 012620 016767  001772  001774           mov    rcurrh,rnexth
    1613 012626 066767  001752  001770           add    relen,rnextl
    1614 012634 005567  001762                   adc    rnexth
    1615 012640 066767  001740  001756           add    relen,rnextl                     ; words, so add twice
    1616 012646 005567  001750                   adc    rnexth
    1617                                20$:
    1618 012652 016737  001746  177100           mov    rnextl,@#177100
    1619 012660 016737  001736  177102           mov    rnexth,@#177102
    1620 012666 012737  014702  177104           mov    #rdre+10,@#177104
    1621 012674 112737  000000  177107           movb   #0,@#177107
    1622 012702 112737  000010  177106           movb   #10,@#177106
    1623 012710 000207                           rts    pc
    1624                                ;
    1625                                ; putrdre: copy receive descriptor ring entry back onto unibus
    1626                                ;
    1627                                putrdre:
    1628 012712 010046                           mov    r0,-(sp)
    1629 012714 010146                           mov    r1,-(sp)
    1630                                
    1631                                ;         xasciz <recvpl put : >
    1632                                ;         xwhx   rcurrh,2
    1633                                ;         xwhx   rcurrl,2
    1634                                ;         xasciz < >
    1635                                ;         xwhx   rdre,10
    1636                                ;         xascil
    1637                                
    1638 012716 016700  001676                   mov    rcurrl,r0
    1639 012722 016701  001670                   mov    rcurrh,r1
    1640 012726 062700  000004                   add    #4,r0
    1641 012732 005501                           adc    r1
    1642 012734 010037  177100                   mov    r0,@#177100
    1643 012740 010137  177102                   mov    r1,@#177102
    1644 012744 012737  014676  177104           mov    #rdre+4,@#177104
    1645 012752 112737  000001  177107           movb   #1,@#177107
    1646 012760 112737  000004  177106           movb   #4,@#177106
    1647 012766 012767  000001  001716           mov    #1,recvdw
    1648                                
    1649 012774 012601                           mov    (sp)+,r1
    1650 012776 012600                           mov    (sp)+,r0
    1651 013000 000207                           rts    pc
    1652                                ;
    1653                                ; putxdre: copy transmit descriptor ring entry back onto unibus
    1654                                ;
    1655                                putxdre:
    1656 013002 010046                           mov    r0,-(sp)
    1657 013004 010146                           mov    r1,-(sp)
    1658                                
    1659                                ;         xasciz <xmitpl put : >
    1660                                ;         xwhx   xcurrh,2
    1661                                ;         xwhx   xcurrl,2
    1662                                ;         xasciz < >
    1663                                ;         xwhx   xdre,10
    1664                                ;         xascil
    1665                                
    1666 013006 016700  001616                   mov    xcurrl,r0
    1667 013012 016701  001610                   mov    xcurrh,r1
    1668 013016 062700  000004                   add    #4,r0
    1669 013022 005501                           adc    r1
    1670 013024 010037  177100                   mov    r0,@#177100
    1671 013030 010137  177102                   mov    r1,@#177102
    1672 013034 012737  014656  177104           mov    #xdre+4,@#177104
    1673 013042 112737  000001  177107           movb   #1,@#177107
    1674 013050 112737  000004  177106           movb   #4,@#177106
    1675 013056 012767  000001  001630           mov    #1,xmitdw
    1676                                
    1677 013064 012601                           mov    (sp)+,r1
    1678 013066 012600                           mov    (sp)+,r0
    1679 013070 000207                           rts    pc
    1680                                ;
    1681                                ; getxcnh: copy transmit descriptor ring entry from unibus at xcurr into xdre, find which buf is next, copy that to xdre+10
    1682                                ;
    1683                                getxcnh:
    1684 013072 016737  001532  177100           mov    xcurrl,@#177100
    1685 013100 016737  001522  177102           mov    xcurrh,@#177102
    1686 013106 012737  014652  177104           mov    #xdre,@#177104
    1687 013114 112737  000000  177107           movb   #0,@#177107
    1688 013122 112737  000010  177106           movb   #10,@#177106
    1689                                
    1690 013130 026767  001474  001440           cmp    xcurrl,tdrmxl             ; need to wrap?
    1691 013136 001013                           bne    10$
    1692 013140 026767  001462  001426           cmp    xcurrh,tdrmxh
    1693 013146 001007                           bne    10$
    1694 013150 016767  001410  001454           mov    tdrbh,xnexth              ; wrap, xnext is first buffer in ring
    1695 013156 016767  001404  001450           mov    tdrbl,xnextl
    1696 013164 000420                           br     20$
    1697                                10$:
    1698 013166 016767  001436  001440           mov    xcurrl,xnextl
    1699 013174 016767  001426  001430           mov    xcurrh,xnexth
    1700 013202 066767  001362  001424           add    telen,xnextl
    1701 013210 005567  001416                   adc    xnexth
    1702 013214 066767  001350  001412           add    telen,xnextl                     ; words, so add twice
    1703 013222 005567  001404                   adc    xnexth
    1704                                20$:
    1705 013226 016737  001402  177100           mov    xnextl,@#177100
    1706 013234 016737  001372  177102           mov    xnexth,@#177102
    1707 013242 012737  014662  177104           mov    #xdre+10,@#177104
    1708 013250 112737  000000  177107           movb   #0,@#177107
    1709 013256 112737  000010  177106           movb   #10,@#177106
    1710                                
    1711                                ;         xasciz <getxcnh    : >
    1712                                ;         xwhx   xcurrh,2
    1713                                ;         xwhx   xcurrl,2
    1714                                ;         xasciz < >
    1715                                ;         xwhx   xnexth,2
    1716                                ;         xwhx   xnextl,2
    1717                                ;         xascil
    1718                                
    1719 013264 000207                           rts    pc
    1720                                ;
    1721                                ; getmlt: get udbb multicast list from unibus, address in pcbb must be valid
    1722                                ;
    1723                                getmlt:
    1724 013266 010046                           mov    r0,-(sp)
    1725 013270 016700  001440                   mov    mltlen,r0
    1726 013274 066700  001434                   add    mltlen,r0
    1727 013300 066700  001430                   add    mltlen,r0
    1728 013304 006300                           asl    r0
    1729 013306 022700  000074                   cmp    #74,r0
    1730 013312 002416                           blt    90$
    1731 013314 016737  001404  177100           mov    pcbb+2,@#177100
    1732 013322 016737  001400  177102           mov    pcbb+4,@#177102
    1733 013330 012737  014736  177104           mov    #mltlist,@#177104
    1734 013336 112737  000000  177107           movb   #0,@#177107
    1735 013344 110037  177106                   movb   r0,@#177106
    1736                                90$:
    1737 013350 012600                           mov    (sp)+,r0
    1738 013352 000207                           rts    pc
    1739                                ;
    1740                                ; putmlt: put udbb multicast list to unibus, address in pcbb must be valid
    1741                                ;
    1742                                putmlt:
    1743 013354 010046                           mov    r0,-(sp)
    1744 013356 026767  001350  001350           cmp    mltreq,mltlen
    1745 013364 003010                           bgt    10$
    1746 013366 016700  001342                   mov    mltlen,r0
    1747 013372 066700  001336                   add    mltlen,r0
    1748 013376 066700  001332                   add    mltlen,r0
    1749 013402 006300                           asl    r0
    1750 013404 000410                           br     20$
    1751                                10$:
    1752 013406 016700  001320                   mov    mltreq,r0
    1753 013412 066700  001314                   add    mltreq,r0
    1754 013416 066700  001310                   add    mltreq,r0
    1755 013422 006300                           asl    r0
    1756 013424 000400                           br     20$
    1757                                20$:
    1758 013426 022700  000074                   cmp    #74,r0
    1759 013432 002416                           blt    90$
    1760 013434 016737  001264  177100           mov    pcbb+2,@#177100
    1761 013442 016737  001260  177102           mov    pcbb+4,@#177102
    1762 013450 012737  014736  177104           mov    #mltlist,@#177104
    1763 013456 112737  000001  177107           movb   #1,@#177107
    1764 013464 110037  177106                   movb   r0,@#177106
    1765                                90$:
    1766 013470 012600                           mov    (sp)+,r0
    1767 013472 000207                           rts    pc
    1768                                ;
    1769                                ; set mode bits into chip
    1770                                ;
    1771                                setmodebits:
    1772 013474 032767  000004  001060           bit    #4,modebits
    1773 013502 001407                           beq    10$
    1774                                         xubl   setlpbk,40
       1 013504 004767  176466                   jsr    pc,xubl
       2 013510 012046                           .word  setlpbk
       3 013512 000040                           .word  40
       4 013514 000000                           .word  
       5 013516 000000                           .word  
    1775 013520 000407                           br     19$
    1776                                10$:
    1777                                         xubl   clrlpbk,40
       1 013522 004767  176450                   jsr    pc,xubl
       2 013526 012052                           .word  clrlpbk
       3 013530 000040                           .word  40
       4 013532 000000                           .word  
       5 013534 000000                           .word  
    1778 013536 000400                           br     19$
    1779                                19$:
    1780                                ;
    1781 013540 032767  100000  001014           bit    #100000,modebits
    1782 013546 001407                           beq    20$
    1783                                         xubl   snotmeen,40
       1 013550 004767  176422                   jsr    pc,xubl
       2 013554 012056                           .word  snotmeen
       3 013556 000040                           .word  40
       4 013560 000000                           .word  
       5 013562 000000                           .word  
    1784 013564 000407                           br     29$
    1785                                20$:
    1786                                         xubl   cnotmeen,40
       1 013566 004767  176404                   jsr    pc,xubl
       2 013572 012062                           .word  cnotmeen
       3 013574 000040                           .word  40
       4 013576 000000                           .word  
       5 013600 000000                           .word  
    1787 013602 000400                           br     29$
    1788                                29$:
    1789                                ;
    1790 013604 032767  020000  000750           bit    #20000,modebits
    1791 013612 001404                           beq    30$
    1792 013614 012767  000001  001026           mov    #1,drdc
    1793 013622 000403                           br     39$
    1794                                30$:
    1795 013624 005067  001020                   clr    drdc
    1796 013630 000400                           br     39$
    1797                                39$:
    1798 013632 000207                           rts    pc
    1799                                ;
    1800                                ; print an ascii zero terminated string, string directly follows jsr pc insn
    1801                                ;
    1802                                xasciz:
    1803 013634 010146                           mov r1,-(sp)                  ; push r1
    1804 013636 016601  000002                   mov 2(sp),r1                  ; set r1 to return address
    1805                                10$:
    1806 013642 105737  177564                   tstb @#177564                 ; output busy?
    1807 013646 100375                           bpl 10$                       ; yes, spin
    1808 013650 105711                           tstb (r1)                     ; byte zero?
    1809 013652 001403                           beq 20$                       ; yes, exit
    1810 013654 112137  177566                   movb (r1)+,@#177566           ; move byte into transmit register
    1811 013660 000770                           br 10$                        ; next byte
    1812                                20$:
    1813 013662 005201                           inc r1
    1814 013664 032701  000001                   bit #1,r1                     ; check if even address
    1815 013670 001401                           beq 30$                       ; yes
    1816 013672 005201                           inc r1                        ; no - move to next byte
    1817                                30$:
    1818 013674 010166  000002                   mov r1,2(sp)                  ; correct stored return address
    1819 013700 012601                           mov (sp)+,r1                  ; pop r1
    1820 013702 000207                           rts pc                        ; return to corrected pc
    1821                                ;
    1822                                ; print a variable number of hex bytes, separated by space
    1823                                ;
    1824                                xbhx:
    1825 013704 010546                           mov r5,-(sp)
    1826 013706 016605  000002                   mov 2(sp),r5
    1827 013712 062766  000004  000002           add #4,2(sp)
    1828 013720 010046                           mov r0,-(sp)
    1829 013722 010146                           mov r1,-(sp)
    1830 013724 010246                           mov r2,-(sp)
    1831 013726 016502  000000                   mov 0(r5),r2
    1832 013732 016500  000002                   mov 2(r5),r0
    1833                                10$:
    1834 013736 112201                           movb (r2)+,r1
    1835 013740 004767  000200                   jsr pc,bhexb
    1836 013744 005300                           dec r0
    1837 013746 005700                           tst r0
    1838 013750 001407                           beq 30$
    1839                                20$:
    1840 013752 105737  177564                   tstb @#177564                 ; output busy?
    1841 013756 100375                           bpl 20$                       ; yes, spin
    1842 013760 112737  000040  177566           movb #40,@#177566             ; move byte into transmit register
    1843 013766 000763                           br 10$
    1844                                30$:
    1845 013770 012602                           mov (sp)+,r2
    1846 013772 012601                           mov (sp)+,r1
    1847 013774 012600                           mov (sp)+,r0
    1848 013776 012605                           mov (sp)+,r5
    1849 014000 000207                           rts pc
    1850                                ;
    1851                                ; print a variable number of hex words, separated by space
    1852                                ;
    1853                                xwhx:
    1854 014002 010546                           mov r5,-(sp)
    1855 014004 016605  000002                   mov 2(sp),r5
    1856 014010 062766  000004  000002           add #4,2(sp)
    1857 014016 010046                           mov r0,-(sp)
    1858 014020 010146                           mov r1,-(sp)
    1859 014022 010246                           mov r2,-(sp)
    1860 014024 016502  000000                   mov 0(r5),r2
    1861 014030 016500  000002                   mov 2(r5),r0
    1862                                10$:
    1863 014034 012201                           mov (r2)+,r1                  ; load the word
    1864 014036 000301                           swab r1                       ; high byte first
    1865 014040 004767  000100                   jsr pc,bhexb
    1866 014044 000301                           swab r1                       ; swap to low byte
    1867 014046 004767  000072                   jsr pc,bhexb
    1868 014052 005300                           dec r0                        ; count in bytes, decrement twice
    1869 014054 005700                           tst r0                        ; but check for zero anyway - dont want 65536 words, ever
    1870 014056 001412                           beq 30$
    1871 014060 005300                           dec r0
    1872 014062 005700                           tst r0
    1873 014064 001407                           beq 30$
    1874                                20$:
    1875 014066 105737  177564                   tstb @#177564                 ; output busy?
    1876 014072 100375                           bpl 20$                       ; yes, spin
    1877 014074 112737  000040  177566           movb #40,@#177566             ; move byte into transmit register
    1878 014102 000754                           br 10$
    1879                                30$:
    1880 014104 012602                           mov (sp)+,r2
    1881 014106 012601                           mov (sp)+,r1
    1882 014110 012600                           mov (sp)+,r0
    1883 014112 012605                           mov (sp)+,r5
    1884 014114 000207                           rts pc
    1885                                ;
    1886                                ; print an ascii zero terminated string, r1 has pointer to string
    1887                                ;
    1888                                basciz:
    1889 014116 010146                           mov r1,-(sp)
    1890                                10$:
    1891 014120 105737  177564                   tstb @#177564                 ; output busy?
    1892 014124 100375                           bpl 10$                       ; yes, spin
    1893 014126 105711                           tstb (r1)                     ; byte zero?
    1894 014130 001403                           beq 20$                       ; yes, exit
    1895 014132 112137  177566                   movb (r1)+,@#177566           ; move byte into transmit register
    1896 014136 000770                           br 10$                        ; next byte
    1897                                20$:
    1898 014140 012601                           mov (sp)+,r1
    1899 014142 000207                           rts pc                        ; exit
    1900                                ;
    1901                                ; print a hex byte, contained in r1 lower byte
    1902                                ;
    1903                                bhexb:
    1904 014144 010046                           mov r0,-(sp)
    1905 014146 010146                           mov r1,-(sp)
    1906 014150 010100                           mov r1,r0
    1907 014152 006200                           asr r0
    1908 014154 006200                           asr r0
    1909 014156 006200                           asr r0
    1910 014160 006200                           asr r0
    1911 014162 042700  177760                   bic #177760,r0
    1912 014166 062700  014530                   add #hextab,r0
    1913                                10$:
    1914 014172 105737  177564                   tstb @#177564                 ; output busy?
    1915 014176 100375                           bpl 10$                       ; yes, spin
    1916 014200 111037  177566                   movb (r0),@#177566            ; move byte into transmit register
    1917 014204 042701  177760                   bic #177760,r1
    1918 014210 062701  014530                   add #hextab,r1
    1919                                20$:
    1920 014214 105737  177564                   tstb @#177564                 ; output busy?
    1921 014220 100375                           bpl 20$                       ; yes, spin
    1922 014222 111137  177566                   movb (r1),@#177566            ; move byte into transmit register
    1923 014226 012601                           mov (sp)+,r1
    1924 014230 012600                           mov (sp)+,r0
    1925 014232 000207                           rts pc
    1926                                ;
    1927                                ; print two hex bytes separated by space, followed by crlf. Input in bytes pointed to by r1
    1928                                ;
    1929                                bhx2:
    1930 014234 010046                           mov r0,-(sp)
    1931 014236 012700  000002                   mov #2,r0
    1932 014242 004767  000004                   jsr pc,bhx
    1933 014246 012600                           mov (sp)+,r0
    1934 014250 000207                           rts pc
    1935                                ;
    1936                                ; print a variable number of hex bytes, separated by space, followed by crlf. Input in bytes pointed to by r1, r0 has length of buffer.
    1937                                ;
    1938                                bhx:
    1939 014252 010146                           mov r1,-(sp)
    1940 014254 010246                           mov r2,-(sp)
    1941 014256 010102                           mov r1,r2
    1942                                10$:
    1943 014260 112201                           movb (r2)+,r1
    1944 014262 004767  177656                   jsr pc,bhexb
    1945 014266 005300                           dec r0
    1946 014270 005700                           tst r0
    1947 014272 001407                           beq 30$
    1948                                20$:
    1949 014274 105737  177564                   tstb @#177564                 ; output busy?
    1950 014300 100375                           bpl 20$                       ; yes, spin
    1951 014302 112737  000040  177566           movb #40,@#177566             ; move byte into transmit register
    1952 014310 000763                           br 10$
    1953                                30$:
    1954 014312 012602                           mov (sp)+,r2
    1955 014314 012601                           mov (sp)+,r1
    1956 014316 000207                           rts pc
    1957                                ;
    1958                                ; init - clear essential bits
    1959                                ;
    1960                                init:
    1961 014320 005067  000224                   clr    running
    1962 014324 005067  000224                   clr    flen
    1963 014330 005067  000314                   clr    drdc
    1964 014334 005067  000222                   clr    modebits
    1965                                
    1966 014340 005067  000220                   clr    tdrbh
    1967 014344 005067  000216                   clr    tdrbl
    1968 014350 005067  000214                   clr    telen
    1969 014354 005067  000212                   clr    trlen
    1970 014360 005067  000214                   clr    rdrbh
    1971 014364 005067  000212                   clr    rdrbl
    1972 014370 005067  000210                   clr    relen
    1973 014374 005067  000206                   clr    rrlen
    1974                                
    1975 014400 005067  000224                   clr    xcurrl
    1976 014404 005067  000216                   clr    xcurrh
    1977 014410 005067  000204                   clr    rcurrl
    1978 014414 005067  000176                   clr    rcurrh
    1979                                
    1980 014420 012737  000000  174510           mov    #0,@#174510               ; pcsr0 - clear any pending interrupts
    1981 014426 012737  000000  174512           mov    #0,@#174512               ; pcsr1 - state=reset
    1982 014434 012737  000000  174514           mov    #0,@#174514               ; pcsr2
    1983 014442 012737  000000  174516           mov    #0,@#174516               ; pcsr3
    1984                                
    1985 014450 000207                           rts    pc
    1986                                ;
    1987                                ; waitabit - wait loop for 65535 cycles
    1988                                ;
    1989                                waitabit:
    1990 014452 010046                           mov r0,-(sp)
    1991 014454 005000                           clr r0
    1992                                10$:
    1993 014456 005200                           inc r0
    1994 014460 001376                           bne 10$
    1995 014462 012600                           mov (sp)+,r0
    1996 014464 000207                           rts pc
    1997                                ;
    1998                                ; dog - timer service routine, watchdog timer
    1999                                ;
    2000                                dog:
    2001 014466 005267  000066                   inc dogtick
    2002 014472 022767  001130  000060           cmp #600.,dogtick             ; assuming 60hz clock, 10 seconds
    2003 014500 003012                           bgt 90$
    2004                                         xascil <dog barks>
       1 014502 004767  177126                   jsr    pc,xasciz
       2 014506    144     157     147           .ascii /dog barks/
         014511    040     142     141  
         014514    162     153     163  
       3 014517    015     012     000           .asciz <15><12>
       4                                         .even
    2005 014522 000167  164252                   jmp t45
    2006                                90$:
    2007 014526 000002                           rti
    2008                                ;
    2009                                ; data
    2010                                ;
    2011 014530    060     061     062  hextab:  .ascii /0123456789abcdef/
         014533    063     064     065  
         014536    066     067     070  
         014541    071     141     142  
         014544    143     144     145  
         014547    146                  
    2012                                
    2013                                         .even
    2014 014550 000000                  running: .word 0                       ; if nonzero, then recv/xmit is active
    2015 014552 000000                  npp:     .word 0                       ; the next packet pointer in the encx24j600
    2016 014554 000000                  flen:    .word 0                       ; frame length in the encx24j600 received frame header
    2017 014556 000000                  p0cmd:   .word 0                       ; masked off value of the pcsr0
    2018                                ;
    2019 014560 000000                  dogtick: .word 0                       ; watchdog timer value
    2020                                ;
    2021 014562 000000                  modebits:.word 0                       ; fc14/15 format mode bits word
    2022                                ;
    2023 014564 000000                  tdrbh:   .word 0
    2024 014566 000000                  tdrbl:   .word 0
    2025 014570 000000                  telen:   .word 0
    2026 014572 000000                  trlen:   .word 0
    2027 014574 000000                  tdrmxh:  .word 0
    2028 014576 000000                  tdrmxl:  .word 0
    2029                                
    2030 014600 000000                  rdrbh:   .word 0
    2031 014602 000000                  rdrbl:   .word 0
    2032 014604 000000                  relen:   .word 0
    2033 014606 000000                  rrlen:   .word 0
    2034 014610 000000                  rdrmxh:  .word 0
    2035 014612 000000                  rdrmxl:  .word 0
    2036                                ;
    2037 014614 000000                  xplrun:  .word 0                       ; xmitpl status, between start and end
    2038                                ;
    2039 014616 000000                  rcurrh:  .word 0
    2040 014620 000000                  rcurrl:  .word 0
    2041                                ;
    2042 014622 000000                  rnexth:  .word 0
    2043 014624 000000                  rnextl:  .word 0
    2044                                ;
    2045 014626 000000                  xcurrh:  .word 0                       ; xmit current address, h
    2046 014630 000000                  xcurrl:  .word 0                       ; xmit current address, l
    2047                                ;
    2048 014632 000000                  xnexth:  .word 0                       ; xmit next address, h
    2049 014634 000000                  xnextl:  .word 0                       ; xmit next address, l
    2050                                ;
    2051 014636 000000                  xolddh:  .word 0                       ; xmit old address, h
    2052 014640 000000                  xolddl:  .word 0                       ; xmit old address, l
    2053                                ;
    2054 014642 000000                  xmitlen: .word 0                       ; current frame length
    2055                                ;
    2056 014644 000000                  xmitmch: .word 0                       ; xmit frame should have match bit set in enp buffer
    2057                                ;
    2058 014646 000000                  mlen:    .word 0                       ; received message length placed in buffer
    2059                                ;
    2060 014650 000000                  drdc:    .word 0                       ; disable recv data chaining
    2061                                ;
    2062 014652 000000  000000  000000  xdre:    .word 0,0,0,0,0,0,0,0         ; work area, transmit descriptor (curr+next)
         014660 000000  000000  000000  
         014666 000000  000000          
    2063                                ;
    2064 014672 000000  000000  000000  rdre:    .word 0,0,0,0,0,0,0,0         ; work area, receive descriptor (curr+next)
         014700 000000  000000  000000  
         014706 000000  000000          
    2065                                ;
    2066 014712 000000                  recvdw:  .word 0                       ; flag receive did work
    2067 014714 000000                  xmitdw:  .word 0                       ; flag transmit did work
    2068                                ;
    2069 014716 000000                  pcbbl:   .word 0
    2070 014720 000000                  pcbbh:   .word 0
    2071 014722 000000  000000  000000  pcbb:    .word 0,0,0,0
         014730 000000                  
    2072                                ;
    2073 014732 000000                  mltreq:  .word 0
    2074 014734 000000                  mltlen:  .word 0
    2075 014736                         mltlist: .blkw 36
    2076                                ;
    2077 015032 000000                  udbblen: .word 0
    2078 015034 000000  000000  000000  udbb:    .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0             ; 32 words
         015042 000000  000000  000000  
         015050 000000  000000  000000  
         015056 000000  000000  000000  
         015064 000000  000000  000000  
         015072 000000                  
    2079 015074 000000  000000  000000           .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
         015102 000000  000000  000000  
         015110 000000  000000  000000  
         015116 000000  000000  000000  
         015124 000000  000000  000000  
         015132 000000                  
    2080                                ;
    2081 015134    000                  pktcnt:  .byte 0
    2082 015135    000                           .even
    2083 015136 000000                  workw:   .word 0
    2084                                         .even
    2085 015140 000000  000000  000000  buf:     .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
         015146 000000  000000  000000  
         015154 000000  000000  000000  
         015162 000000  000000  000000  
         015170 000000  000000  000000  
         015176 000000  000000  000000  
         015204 000000  000000          
    2086 015210 000000  000000  000000           .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
         015216 000000  000000  000000  
         015224 000000  000000  000000  
         015232 000000  000000  000000  
         015240 000000  000000  000000  
         015246 000000  000000  000000  
         015254 000000  000000          
    2087 015260 000000  000000  000000           .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
         015266 000000  000000  000000  
         015274 000000  000000  000000  
         015302 000000  000000  000000  
         015310 000000  000000  000000  
         015316 000000  000000  000000  
         015324 000000  000000          
    2087                                

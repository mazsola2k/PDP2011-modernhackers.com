         .title test35
;
; general purpose register definitions
;
r0       = %0
r1       = %1
r2       = %2
r3       = %3
r4       = %4
r5       = %5
r6       = %6
r7       = %7
sp       = %6
pc       = %7
;         .=1000
         mov r7,r5
         sub #2,r5
         mov #hello, r2
         add r5,r2
l1:
         tstb @#177564
         bpl l1
         movb (r2)+,r3
         bne l2
         br l3
l2:
         movb r3, @#0177566
         br l1
l3:
;
; do some memory tests
;
         mov #1,@#0
         mov #20,@#2
         movb #63,@#4
         movb #104,@#5
         cmp @#0,#1
         bne wrong
         cmp @#2,#20
         bne wrong
         cmpb @#4,#63
         bne wrong
         cmpb @#5,#104
         bne wrong
;
; clear memory
;
         clr r1
         clr r0
l4:
         mov r0,(r1)+
         cmp r1,#160000
         bne l4
;
; check if clear is ok
;
         clr r1
l5:
         cmp r0,(r1)+
         bne wrong
         cmp r1,#160000
         bne l5
         br l6
wrong:
         mov #error,r2
         add r4,r2
$1:
         tstb @#177564
         bpl $1
         movb (r2)+,r3
         bne $2
         br $3
$2:
         movb r3, @#0177566
         br $1
$3:
         halt
l6:
;
; copied (more or less) from simh
;
         mov #2000,sp
         mov #0,r0
         mov #177412,r1                ; rkda
         mov #0,(r1)                   ; load da = 0
         mov #0,-(r1)                  ; clear ba
         mov #-512.,-(r1)              ; load wc
         mov #5,-(r1)                  ; read+go
         tstb (r1)
         bpl .-2
         clrb (r1)

         clr r0
         clr r2
         clr r3
         mov #2000+20,r4
         clr r5
         clr pc
;
; data
;
         .even

hello:   .ascii / /<15><12>
         .asciz /Hello, world [t36]: m9312 rk05 bootstrap/<15><12><15><12>

error:   .ascii / /<15><12>
         .asciz /Core fault/<15><12>

         .even

         .title test37
;
; general purpose register definitions
;
r0       = %0
r1       = %1
r2       = %2
r3       = %3
r4       = %4
r5       = %5
r6       = %6
r7       = %7
sp       = %6
pc       = %7

         mov #hello+173000,r2
         mov #m000+173000,r5
         jmp barf
m000:
;
; decode cpu modelcode, should be in kernel r0 after reset
;
         mov #47.,r2
m100:
         inc r2
         cmp r0,#10.
         blt m200
         sub #10.,r0
         br m100
m200:
         add #48.,r0
         tstb @#177564
         bpl .-4
         movb r2,@#177566
         tstb @#177564
         bpl .-4
         movb r0,@#177566
;
; probe for fpu
;
         mov #fpuend+173000,r5
         mov #2000,sp
         mov r5,@#10
         clr @#12
         setf
         mov #fpu+173000,r2
         jmp barf
fpuend:
;
; probe for mmu
;
         mov #ktend+173000,r5
         mov #177572,r1
         mov #kt11a+173000,r2
         jmp pbarf
ktend:
;
; probe for mmu ubm
;
         mov #ubend+173000,r5
         mov #170200,r1
         mov #ubma+173000,r2
         jmp pbarf
ubend:
;
; probe for kw controller
;
         mov #kwend+173000,r5
         mov #177564,r1
         mov #kw11a+173000,r2
         jmp pbarf
kwend:
;
; probe for slu controller
;
         mov #slend+173000,r5
         mov #177560,r1
         mov #slu+173000,r2
         jmp pbarf
slend:
;
; probe for rk11 controller
;
         mov #rkend+173000,r5
         mov #177400,r1
         mov #rk11a+173000,r2
         jmp pbarf
rkend:
;
; probe for rl11 controller
;
         mov #rlend+173000,r5
         mov #174400,r1
         mov #rl11a+173000,r2
         jmp pbarf
rlend:
;
;
;
         mov #hello2+173000,r2
         mov #l1+173000,r5
         jmp barf
l1:
;
; do some memory tests
;
         mov #1,@#0
         mov #20,@#2
         movb #63,@#4
         movb #104,@#5
         cmp @#0,#1
         bne wrong
         cmp @#2,#20
         bne wrong
         cmpb @#4,#63
         bne wrong
         cmpb @#5,#104
         bne wrong
;
; clear memory
;
         clr r1
         clr r0
l4:
         mov r0,(r1)+
         cmp r1,#160000
         bne l4
;
; check if clear is ok
;
         clr r1
l5:
         cmp r0,(r1)+
         bne wrong
         cmp r1,#160000
         bne l5
         br l6
wrong:
         mov #error+173000,r2
         mov #l5a+173000,r5
         jmp barf
l5a:
         halt
l6:
;
; copied (more or less) from simh
;
         mov #bootrk+173000,r2
         tstb @#177564
         bpl .-4
         movb (r2)+,r3
         beq brk
         movb r3, @#0177566
         br .-16
;
brk:
         mov #2000,sp
         mov #0,r0
         mov #177412,r1                ; rkda
         mov #0,(r1)                   ; load da = 0
         mov #0,-(r1)                  ; clear ba
         mov #-512.,-(r1)              ; load wc
         mov #5,-(r1)                  ; read+go
         tstb (r1)
         bpl .-2
         clrb (r1)

         clr r0
         clr r2
         clr r3
         mov #2000+20,r4
         clr r5
         clr pc
;
; subroutines
;
pbarf:
         mov #2000,sp
         clr @#6
         mov r5,@#4
         tst (r1)
barf:
         tstb @#177564
         bpl .-4
         movb (r2)+,r3
         beq .+10
         movb r3, @#177566
         br .-16
         jmp (r5)
;
; data
;
         .even

hello:   .ascii / /<15><12>
         .asciz /Hello, world [t37]: cpu 11/<57>
hello2:  .asciz <15><12>

fpu:     .asciz / fpu/
kt11a:   .asciz / mmu/
ubma:    .asciz / ubm/
kw11a:   .asciz / lck/
slu:     .asciz / tt/
rk11a:   .asciz / rk/
rl11a:   .asciz / rl/

bootrk:  .asciz /boot from rk:/<15><12>

error:   .ascii / /<15><12>
         .asciz /Core fault/<15><12>

         .even

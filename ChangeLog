

6/24
- tried to get rk core converted quickly - that hasn't worked. Need to get
  back to it after the summer break.
- finishing up the rh, integrating the branch that I've been working on back
  into the main branch.
- wondering about the core usage of old vs new:
      rh11: lcc   lcr   mem
      old: 1158   384     0
      new  1441   522    8K
  so yes, the new core is 'a bit' bigger than the old. Probably not too much
  of a surprise, since it takes the extra step of storing everything in the
  2x4K buffers in between things.
  definitely not a showstopper though - the reduced bus hogging and hc/xd support
  are more than worth it.


6/12
- finishing up rh core
- started rk core, not there yet - lots of things to do with rk crazyness.
- some more benchmarking ;-) comparing different cards this time. All are microsd,
  running make on 211BSD PDP2011, on the de0nano 140/14=10 - without pidp11 console.

san grey   1070.8 real       628.7 user       152.9 sys     (Sandisk Ultra Class-10 UHS1 16GB 'up to 80MB/s')
san red    1059.8 real       626.9 user       155.4 sys     (Sandisk Ultra Class-10 UHS1 16GB 'up to 98MB/s')
adata      1020.6 real       633.1 user       152.6 sys     (Adata Premier UHS-1 Class-10 16GB)
transcend  1053.4 real       632.7 user       151.7 sys     (Transcend Premium UHS1 32Gb 'up to 90B/s')
kingston   1047.0 real       630.2 user       152.7 sys     (Kingston Class-4 8GB)
san old    1897.0 real       623.1 user       149.2 sys     (Sandisk SD (not HC) 512Mb >10 years old)

tried ftp speed: 170Kbps new (de0n/140/14=10)
              vs 100Kbps old (de0n/100/14=7.14)

6/11
- some more benchmarking:

de0n old : 1624.8 real       945.2 user       496.0 sys     (100/14=7.14)
de0n new : 1570.4 real      1000.6 user       263.3 sys     (90/14=6.42)
de270    : 1364.6 real       852.9 user       217.4 sys     (60/8=7.5)
de0n new : 1082.8 real       626.4 user       159.4 sys     (140/14=10 - without pidp11 console)
- finishing up work on the spi controller; added debug/status led
  outputs, error reporting.
- set the card high speed to 25Mhz, initial tests look promising
           1070.8 real       628.7 user       152.9 sys     (140/14=10,25)
  but it doesn't seem to make a very big difference. Maybe with
  other cards. Still, 12 seconds ;-)
- tried to add multiple drives to rh, but it proves to be
  nontrivial - it seems that I'd have to implement multiple
  sets of the drive registers to make that work. Hmm.



6/10
- after some debugging sessions - and apparently those
  took a while ;-) but I've now fixed the problems that
  were still hampering the new nice disk controllers.
  Needs some cleaning up, and also an explanation why
  writecrc needs counter 8. But that it works seems
  above doubt, already.

  ran three boards with make on 211BSD PDP2011,
de0n old : 1624.8 real       945.2 user       496.0 sys     (100/14=7.14)
de0n new : 1570.4 real      1000.6 user       263.3 sys     (90/14=6.42)
de270    : 1364.6 real       852.9 user       217.4 sys     (60/8=7.5)

  and while those timings don't necessarily reflect what
  those boards are capable of, it does tell the story. de0n old is
  running the faster cpu, but its card is slow, so it still takes
  a lot longer - and it's cpu is locked a lot of the time. But while
  de0n new takes about 10% more user cpu time, it's cpu is maybe slow
  but locked much less, and it finishes about a minute early. And
  with its old but apparently fast full size sdhc card, de270 gets
  there first - lots of resources, no timing constraints at all,
  that's got to help too.


3/21
- added a branch for the new disk controllers - did so
  before, but made a mistake...
- after the earlier problem with reading the first
  sector twice in a row, now I had an issue with
  skipping the first sector. Turned out to be a
  wrong reset condition that only became obvious
  through testing with the x46 boot code.


3/14
- reorganized de1dram and de270
- working on the improved sd card interface. Not as easy
  as I hoped - interfacing the card is quite ok already,
  but the disk controller interaction is cumbersome.


3/10
- reorganized the top sources for de0n and de0cv a bit, put
  things in order and made the naming of the console signals
  consistent over the boards.
- the order is: console, sd, xu, panel, dram/sram, board
  specific stuff like leds and switches, resets, clocks;
  this goes for the port list to the outside world, but also
  for the instantiation list on the pdp11 component.
  Next step is to lift out all config stuff, and put that
  above the pdp11 component.
- the console signals should be named rx/tx/cts/rts without
  sequence numbers for the console port; sequence number
  added for other ports, starting with 1.


3/6
- got de0cv to work properly, with quartus 18.1 and the much
  newer pll version that comes with that.
- setup de0cv and de10-lite with the new standardised pinout
  for the console and peripherals.
- tested de0cv at higher clock speeds, got up to 11.5 something
  at the cpu (maybe 12.5 too, but the sd card didn't want to
  play). That's 175 at the sdram though, and that's rated for
  133. Still, lots of potential ;-)
  Hooked up and had a look at signal integrity, looks way better
  than I remember from before.
- changed reset button on de0cv to the provided fpga reset btn,
  instead of key0


2/28
- made ready for release of the console preview


2/14
Playing with MUBAS...
1) take a fresh copy of rt11 and run sysgen, monitors sj and fb
   and answer y for multi-terminal support.
   run the sysgen, and then copy/sys *.syg *.sys, and copy/boot
   rt11sj.sys rk0:
2) copy the mubas dist to rk1 (dd seek=6144)
3) run mubas, config file 1user
4) run mucnfg within mubas to generate a config file
5) run mulnk to generate a mubas version, for instance to support
   the fpu.

mubas wave program:
10 I=.2
20 PRINT TAB(30*SIN(I)+30);"HELLO WORLD"
30 I=I+.2
40 GO TO 20


1/24
- fixed bug in paneldriver that caused bits that were set for
  cons phy to always be set in prog phy as well...


1/23
- added address calculation for load address in prog phy mode
- added another slack cycle in the paneldriver to remove
  switch ghosting - for some unclear reason, lifting some
  switches caused severe ghosting in the address mode leds
- eliminated most other differences between the Ms Piggy
  movies and the current core - adrs err works again, exa-ing
  into the registers is now an adrs err.
  2) PDP2011 does not show subsequent memory fetches from the
     instruction stream in the bus register. Maybe easy to add
     for most cases - but also a lot of logic? Need to think
     about this. Same as for the uaddr displays, probably.
  Still need to check the virtual address modes and prog phy!


1/21
- (Re)Check against the lcm videos that Oscar and Joerg made.
  1) PDP2011 does not light the pause led for memory access. A
     real machine would, but only on a cache miss. This is why
     this is not visible in the Ms Piggy videos. It is actually
     quite simple to add lighting the pause led to PDP2011, but
     since there is no cache, it would mean that the led would
     be on all the time - and that doesn't seem right; so I
     decided to leave this as a known difference.


1/20
- Scott Swazey pointed me to the RTST image in Paul Nankervis'
  collection. That is a clear showcase for that the cons phy
  display should show the virtual address while running, not
  the phy address. It looks much better that way :-)


1/19
- a week of moving stuff after the leak in the workroom, now
  setup a provisional space to put the pdp2011 stuff in. Coming
  back online :-)
- removed issp stuff from project defs


2019/1/8
- playing with the values for the averager for the console.
  the best values on average (sic) seem to be 100h/100h,
  lower on the count value produces too much ghosting.
  This is with the 15-cycle display driver, meaning driving each
  of the 6 led banks with a one-cycle pause in between, and
  reading the switches after a one-cycle turnaround.
- also changed to explicitly not drive anything in the wait cycles
  between the led banks.
- changed to let state_init drive out the reset address, this
  fixes the wrong display for the ekbb reset output display.
- externalized the issp sources to the top file
- did some experiments with bridging the ulp socket instead
  of having it installed. No ghosting at all ;-) and much
  higher frequencies possible. However, the fpga doesn't seem
  to have enough power to drive the leds constantly - they fade
  if big groups of leds are switching.


12/29
- finished averager with issp for sample size and
  threshold. Nice playing, but not at all sure what the nice
  values would be. The blinkenlights are blinking very nicely
  though ;-)
- also changed the panel driver from 10 cycles into 15 cycles
  including a 'rest' cycle in between driving each row of leds.
  The ghosting problem has disappeared because of that ;-) and
  the leds don't seem to be too dim. Not tried on the 'real'
  thing yet though.


12/28
- first try at an averager for the console leds. Using the
  in system sources trick to find values for the thresholds
  and cycle times that work nicely. V experimental so far.


12/16
- reworked the stack limit stuff.


12/12
- after a week of playing with ekbb and trying to iron out
  some of the errors that brings to light.
- changed some subtle details in the div handling.
- changed that a trace trap will not cause a wait to
  be skipped
- changed some less subtle details in the stack limit
  handling;
  a) it appears that the stack limit register default
     value is not x0100, as I had always assumed, but
     0x0000
  b) there are major differences between /70 and other
     machines wrt stack limit handling; the new insights
     gained from ekbb do not translate to all other machines.
  c) 45 etc are similar to /70, but not quite the same
     maybe? there might be a difference in what is regarded
     as 'internal registers', ie 77777x or 177776.


12/1
- adding some more blinkenlights for the microcode console
  display - lighting leds when groups of instructions are
  hit, that seems somewhat appropriate and useful.
- playing with how the blinkenlights should be lit on the
  console to reflect the real thing as much as possible.


11/23
- working on a small peripheral board including shim for
  the console. Moved most signals to the jp2 connector
  on the de0nano - that's quite full now ;-)
  only the 2nd serial port rts/cts won't fit.
- removed some signals that were unconnected or not needed
- fixed an omission for the dr11c
- half implemented a trick in the paneldriver to not just
  sample the signals, but logical-or them over a period.
  Maybe it looks better, not quite sure yet. It does show
  a couple things that were earlier invisible - memory
  testing during the 2.11bsd boot, for instance.


10/26
- most of the work done already yesterday... but, added
  a new peripheral, a dr11c. Seems to work quite nicely ;-)
- and done lots of work on getting all the different projects
  to compile with all the new sources and many changes of
  the last year or so.


10/20
- went over the flow diagrams and made some minor changes
  to the blinkenlights. Still not exactly the same as
  the real thing does though - need to check against the
  miss piggy videos again.


10/17
- setting the address display right for virtual modes
- if the cpu is running, the address displays take
  the values from cons_progphy. Not sure that that is
  entirely correct, but it works better than the
  alternatives I currently see.


10/15
- after summer holiday, took some time to consider how,
  but finally decided on the way I'll implement the
  addressing mode rotary switch. It's a bit ugly maybe
  with signals going in and out of the mmu, but, hey.
  it works.
- was worried a bit that the extra complexity in the mmu
  would really slow down at least the bigger models with
  all the extra stuff included. But so far it seems to
  be within the slowdown I had already anticipated. The
  primary test board - de0nano now - currently runs at
  100Mhz with 7/7 timing towards the dram - so, 7-something
  Mhz at the cpu. Still a decent factor faster than the
  real thing was.


6/5
- added the adrs err led. Including suppressing the
  normal trap flow if the address error is originated
  by a console action. Also added unibus address display
  to prog phy.


6/1
- added selecting the current register set r0 for the
  console displays
- did several tricks to get the prog physical address
  to show as close as possible to the real thing.


5/29
- started testing with blinky and repeating the tests
  that Joerg Hoppe and Oscar Vermeulen did with it
  on a real 11/70. This gives some interesting new
  insights. The first of which is: wait in non kernel
  mode is a nop on some models, but not all - notably
  not on the 11/70, which will happily wait in user mode.
- added conditional logic to the cpu for non-kernel
  mode wait.
- added setting cons_br to ir in idecode
- added setting the address to bus_reg unconditionally,
  this will need some nuancing later with the address
  switch settings
- added parity leds
- added run/pause/master leds


5/27
- did some test runs, notably ekbb for '70. There's
  a test with console interaction in there, used that
  as a baseline of the console behaviour for wait and
  reset instructions. Passable now, except the address
  display on a wait/reset is already incremented? Did a
  lame fix on it by incrementing the display address by 2
  if the ifetch bit is on. Not sure that's right.
- added single instruction step. Difficult to test right
  now because of the issue with the 7-switches-in-a-row...
- ok issue with switches solved, bridged the 1kOhm resistors
  on the row signals with 4.7Ohm ones - because I couldn't
  find a bit of wire ;-)
  works like a charm ;-)
- and removed the ekbb address fix again, see about that
  later.


5/26
- added debouncing, rotary decoding and some logic
  to make the momentary switches generate a one
  shot pulse for the cpu functions.
- seems to work quite well, but... there's a problem
  with the switches; when there's more than 7 on in
  the same row group, the entire group reads zero.
  Not sure yet why, seems like it might be an electrical
  issue.


5/25
- added reading the switches to the paneldriver. Not
  yet complete - the rotary switches at least are not
  yet functional, not are the momentaries.
  But also there should be some form of debouncing...
  up next.


5/18
- figured out how to define pullups on input pins
  (never needed that before...). Preparing for reading
  the switches on the console panel.
- the idea now is that updates to the console panel
  run from the cpu clock. Maybe not the most elegant
  option ever, but it's going to save a lot of work
  regarding clock domain crossings for everything
  that comes off the switches. And the only downside is
  that relatively high frequent signals will go over
  the flatcable to the console.


2018/5/7
- adding console panel, mostly based on earlier
  work in the cpu that I already added last summer.
- added console panel driver
- added a build directory for de0nano with console
  panel.


1/31
- de0cv setup for .pof generation
- de0cv setup for long term bsd testing


1/19
- de10-lite runs bsd211, cpu @10Mhz, 14-cycle
  dram driver. Not sure yet if it is stable,
  have some problems with sd cards that might
  be unreliable.


2017/1/18
- adding de10-lite and de0-cv boards.
  de0cv seems to have the same issues around faster
  timing that all other cyclone-v variants have, there
  is something going on that I'm not sure that I
  understand. Might have something to do with the
  pll and the locked output though, should try
  if that helps.


7/26
- reinstated the wait loop at the beginning of l47,
  the terminal gets confused and looses a lot of
  characters if the cpu starts output before the
  terminal has initialized. Can't do the same for
  l46 though, no space to be found easily...
  should really fix the hardware, but not really
  sure where to start looking.


4/1
- finalized l47 - added booting off all three disk
  controllers.
- regression testing shows that the max frequency
  suffers a bit from adding yet another device to
  the bus. de0nano now runs 120/7/7, effective 8.57
  Mhz. Symptom of too-high speed is one I've not
  witnessed before: fsck fails on a good disk image.
  Does really seem to be related to clock speed
  though, lowering fixes the problem consistently.
  130/7/7 seems to work too, effective 9.28Mhz
- n2b1200 tested, works


3/28
- added fpu detection into l47, changed some bits on
  the list of devices to check for. Also changed the
  mmu not to respond to d-mode par/pdr addresses and
  sr3 if those are not present for the model.


3/26
- added new source for low-boot m9312 that lists the
  device addresses present in the current system. Not
  booting from disks yet, that's to come :-) but a
  suitable replacement of the old t44 boot in combination
  with a new high boot rom.


3/24
- working on the m9312 stuff. Changed both low and
  high roms to be as much as the originals as possible,
  then did some tricks to make it work with lower case
  input.


1/26
- added c5g/sram to this build


2015/1/23
- fixed kl11; changed initialization of the rx/tx
  state machines such that immediately on a reset
  the bitrate counter will pulse these active. This
  prevents the transmitter from being overrun if the
  CPU provides output straight away; the old fix for
  this situation was to include a wait loop in the
  boot code, that can now be removed.
- changed the m9312h/l 46 to accept lower case input;
  cleaned out primary diagnostics to make some room


11/5
- added m9312 low rom with console emulator code, and
  added a new high rom with bootstraps. Both based on
  work from http://ak6dn.dyndns.org/PDP-11/M9312/

10/4
- deuna microcode now also restores modebits after-
  a chip reset; this is likely required for anything
  that relies on the notmeen bit taking care of frames
  that are multicast but not recognized as broadcast.

9/1
- added new parameter have_fpa on the unibus component,
  cr component, cpu component to modify the behaviour
  of the J-11 special case of the ASH and ASHC insns;
  relating to the startup code test in RSTS V10.1L;
  this parameter also handles the bit value in the
  17 777 750 maintenance register/board control
  register.


8/27
- added correct module type for 84/94 in cr.vhd
- set fpu accellerator bit off for j-11 type
  cpu's in cr.vhd
- corrected MFPT to use current register set instead
  of always using set 0
- 1920k vs. 2044k fix for RSTS bug on j-11 models


8/6
- fixed fpso2 mode 0 bug - abs(f|d), neg(f|d),
  tst(f|d) would produce wrong results for mode 0
  because the register was not read before producing
  results.


7/15
- fixes in the deuna microcode to deal with buffer
  chaining. Triggered by the BQTCP stack for RSX;
  this is the only software that I'm aware of that
  actually seems to use buffer chaining.
  Very much alpha level coding at this point...


5/25
- added ISE project files into the distribution set.


1/29
- tracking the elusive problem with the xu and 2.11bsd
  that causes the transmit buffers to become locked.
  Captured debug output so far:
Jan 27 04:47:09 de0 vmunix: de0: did not transmit: 2, 4, 2, flag0=3, flag1=3
Jan 27 04:47:09 de0 last message repeated 2 times
Jan 27 04:49:09 de0 vmunix: de0: did not transmit: 2, 4, 2, flag0=3, flag1=3
Jan 27 04:49:09 de0 last message repeated 4 times
Jan 27 04:51:09 de0 vmunix: de0: did not transmit: 2, 4, 2, flag0=3, flag1=3
Jan 27 04:52:41 de0 last message repeated 6 times
  and after some modifications to the 2.11bsd source,
  to show all buffer flags,
Jan 29 04:26:59 de0 vmunix: de0: did not transmit: 3, 4, 3, flag0=3, flag1=3, flag2=3, flag3=3
Jan 29 04:26:59 de0 last message repeated 6 times
Jan 29 04:28:59 de0 vmunix: de0: did not transmit: 3, 4, 3, flag0=3, flag1=3, flag2=3, flag3=3
Jan 29 04:29:03 de0 last message repeated 4 times
- This clarifies that the problem is in the transmit
  line of the code. Not that that needed proving, but
  it did point me to checking what the 2.11 driver
  does at this point. Gave rise to the suspicion that
  maybe something is wrong in the interrupt controller.
  Turns out that also this interrupt controller has
  the potential of locking up. Recoded it somewhat,
  and made a write into pscr0 reset the trigger.
- That seems to work.


1/17
- when the ethernet chip is reset, it lost the mac
  address - if that was changed by software. Fixed now,
  also did some work on the buffer overflow/chaining
  code. And tested to work correctly.
- xu for now sets the identity to delua, this seems
  to work for all software so far.


2014/01/11
- playing with signaltap and trying to find the
  elusive rsx11mplus problem, I noticed a write into
  an unknown device register address. It appears that
  rsx11mplus uses a different address for the rpbae,
  where the upper bits of the 22-bit busmaster address
  is maintained. Strange that configuring for a non-rh70
  unibus model did not work... but, shadowing the rpbae
  to the address that rsx11mplus uses seems to work.


12/9
- backported some fixes to the mmu to the head, ie.
  here. In the somewhat vague hope that one of these
  might impact the rsx11mplus issue. Doesnt.  These
  seem good fixes though, so I'll leave them in anyway.
- Fixed order in which mtpi/mtpd works, ie. first do
  the stack access, then do the destination part. This
  makes a difference when r6 is used in the destination.
- doing some work with new diag source code that
  Al Kossow posted. Started with fkta. That surprisingly
  shows errors - more than one, even. Fixed these:
- sr0 bits that are not supposed to be writable should
  not be; so far, it seems that bits 15-13, 8, and 0
  should be writable. And bit 9 for 45, 70.
- pdr a and w bits should also be reset on odd writes
  to the pdr, not just even/word writes.
- pdr a and w bits should not be set if the read/write
  that would have set them was aborted.
  Two left to go in fkta, don't get what's going wrong
  yet. fktb passes.
  Need to backport this to the main branch - this may
  affect some of the old issues in rt and rsx11mplus.
- One of the mmu fixes from the halfcycle branch does
  not work though, the fkta 11252 and 11530 issues.
  Needs some more research.


8/2
- spent a lot(!) of time trying to get rsx11mplus to
  work. It doesn't. The symptom is that it will boot,
  utter some message, and then go into a scan loop
  across the boot disk surface, reading a bit on each
  cylinder. Word has it that this is expected behavior
  for the situation that the file system superblock
  - or what it is supposed to be called - is not
  passing some checks - for instance, crc. Or maybe
  too when some obscure error code is passed from the
  disk controller.
  Anyway. Tried just about anything to make the
  controller work as expected - up to the point that
  the core was reduced so it was unable to give out
  any error state. Didn't work. Chased after the idea
  that -32768 word reads might go wrong. Wasn't it.
  Now at the point that I'll give up for now. Backed
  out all the radical changes, bringing the core back
  to a more workable state. Will still be working on
  the controller, but now primarily to implement the
  card buffer. And another project will be qbus.
- booted 2.11bsd on de270 for the first time in a
  hundred days or so:

[root@i5 /home/sytse/vhdl/pdp11]# telnet de0
Trying 10.1.0.4...
Connected to de0.
Escape character is '^]'.


2.11 BSD UNIX (de0.sytse.net)

login: root
erase, kill ^U, intr ^C
# ls
.cshrc      .profile    a           genunix     netnix      unix
.forward    .rhosts     bin         home        raw         usr
.hushlogin  .tiprc      boot        lib         sbin        var
.kermrc     README      dev         lost+found  sys         vmunix
.login      VERSION     disklabel   mdec        tmp
.mailrc     VERSION~    etc         mnt         toyset
# ruptime -a
de0n        down 180+15:47
de270       down 143+00:51
n2b         down 292+01:26
pdp11       down 314+22:07
u11         down 285+22:27
# ruptime -a
de0n        down 180+16:09
de270         up 104+11:10,     1 user,   load 0.21, 0.19, 0.00
n2b         down 292+01:48
pdp11       down 314+22:29
u11         down 285+22:49
# telnet de270
Trying...
Connected to de270.sytse.net.
Escape character is '^]'.


2.11 BSD UNIX (de270.sytse.net)

login: root
erase, kill ^U, intr ^C
# uptime
 12:34am  up 22 mins,  2 users,  load averages: 0.23, 0.20, 0.00
# ruptime -a
de0           up 104+10:54,     3 users,  load 0.52, 0.42, 0.48
de0n        down 180+16:10
de270       down 310+14:41
pdp11       down 314+22:29
# Connection closed by foreign host.
# ruptime -a
de0n        down 180+16:10
de270         up 104+11:13,     1 user,   load 0.21, 0.19, 0.00
n2b         down 292+01:49
pdp11       down 314+22:30
u11         down 285+22:50
#



5/5
- have been testing for a while with showem by Jerome
  Fine. This looks at the mmu instruction complete flag,
  and at the sr1 after an instruction with an immediate
  operand locks the mmu by writing the lock bits to it.
  Never realized this, but 'real' pdp's do not record
  autoincrement/decrement of r7 in sr1 - that is what
  sr2 is for. So, updated to reflect this.


3/23
- updated the cr entity; it no longer has a configurable
  address on the unibus - that did not make a lot of
  sense anyway. As a side effect, this also elegantly
  allows other control registers to be included in the
  same source - even those that don't fit in the address
  range of the original entity.
- added a lot of j11-specific control registers, in the
  hope that the issue with booting rsts on a j-11 type
  cpu fails the cpu recognition code in rsts. No luck
  though, and no clue why. Job for the logic analyzer,
  most likely.
- reverted part of the change, because for some obscure
  reason the new address detection logic in cr caused
  the illegal halt check in the cpuerr register to break.
  No clue why, really. But reverting to the old model
  fixes things.


3/14
- minor change to optimize alignment of operands when
  the difference in exponent would cause one of the
  operands in a addf or subf to be entirely shifted out.
  The new approach zeroes out the weak operand immediately,
  instead of causing many shift cycles; it probably uses
  a bit more logic, and is not really noticably faster.


3/13
- changed the inelegant use of a variable for the stexp
  floating point alu part. The resulting new core is
  notationally more elegant, and seems to work the same.
  Passes all the fpu tests, anyway.


3/12
- for several reasons, rebuilt the build pc again. Not
  lost any sources afaik, in spite of some unfortunate
  events.
- de0nano however was stuck slightly when the rebuild
  process started. ifconfig up/down in bsd211 now resets
  the chip correctly, this seems to do the trick. Not sure
  why it was hung in the first place though - that logging
  is lost.


3/5
- already that much later. Made some changes to the xubrt
  microcode, changing all mov #0 into clr insn. And also
  reset the ethernet chip, but not anything else, whenever
  the eidled word is read as zeroes - ie, when the contact
  with the chip is lost. Effectively, this should reset the
  chip whenever contact is regained, and it should in theory
  allow communications to be restarted without an interruption
  being visible to the deuna. Time to test this. And, since
  de0 and de270 both seem to reach months of uptime without
  needing this, maybe it's time to check the power supply
  to de0nano. And unpack the second de0nano as well.
- changed to the latest version of quartus, fedora, etc.


1/16
- added polling on estat, to check whether a 1 is returned
  in the clock active bit - to verify that the chip is still
  accessible. If it's not, all zero's will be returned.
- However, it turns out that the clock active bit in estat
  can be negated. Not sure when or how, but it clearly
  defeats the purpose - especially since the action that
  I planned for the microcode is to set the deuna to some
  error mode, and have it wait for the host to issue a reset.
  Changed to the eidled word now - that should contain the
  silicon version of the chip, and hopefully is more stable.


2013/1/9
- have been running the xu core for quite a while now. Seems
  very stable.
- while improving the initialization bits for xu, to allow
  for instance that the core deals with the ethernet chip
  becoming disconnected - or not being connected at all -
  found that the reset bit in pcsr0 was not implemented
  ie mechanized in the controller. So the microcode for
  reset could never trigger.
- Interestingly, masking the xubl to only allow word-length
  transfers breaks things. Not sure I understand yet - it
  is only supposed to be able to do word-length things.


11/2
- ran some long term tests on 2.11bsd, am now also developing
  a webserver for it :-)
- fixed the issue in the last update that caused the xu to
  hog the bus; instead, now it polls the chip, only after the
  chip reports it has a frame to read, will the availability
  of a buffer be checked.


10/19
- tried to recode the unibus interrupt state machine. No
  success, surprisingly - what can be wrong? No clue there,
  mostly reverted the change. Completely at a loss what
  can go wrong - it appears to be trivial, but apparently
  it is far from.
- made some minor updates to the xu microcode; a) when a
  frame is received, the code will then try to receive more
  instead of first allowing a command - and hence transmitting;
  b) when receiving, there's a check whether a free buffer
  exists; if not, the frame is not read from the chip. Since
  the chip has a significant buffer, I expect this to lead to
  a lower packet loss. Seen 140Kbps throughput on a single ftp
  session with this setup - seems decent, it is 1.1Mbps after
  all.


10/18
- tried (for the first time) to run ultrix-11 from a fresh
  install - a full install on rp06. Including tcp stack and
  deuna driver. Doesn't quite work yet, it appears not to
  receive acks - so it gets stuck. What is wrong?
fc11 - write ring format 6008 0502 0004 6030 0502 0006 (2.11bsd)
fc11 - write ring format 6008 0501 0004 6030 0501 0004 (ultrix-11)
  Difference is not significant, it seems - 4 receive buffers
  instead of 6 - the other differences are pointers only.
  Found so far that ultrix seems to get stuck a fixed? number
  of bytes into the tcp stream - need to verify. Seems to be
  fairly low number.


10/12
- have spent lots of time just playing with the systems,
  received more pmodnic100's in the meantime too. Started
  adding a timer to the xu - now functions just as a watchdog
  that restarts the microcode if it gets stuck. Not a real
  hardware watchdog, but probably good enough.
- just now found a rather major error in the xu microcode;
  if a pdmd-invoked xmit run would send all the buffers in
  the ring, the pointers would not advance to the next
  buffer - ie, the one that the run started with. This is
  very likely what caused the slow response/retransmit
  problem.
- Oh yeah. Sendmail now works too :-)


10/2
- been trying some things to see if I can find the bug
  in 11/70 - that causes RSTSv10 to crash during startup.
  Control registers seem to be not guilty. The rh70 however
  may not be - the behaviour changes if I set it to rh70=no.
  Can't find what it is yet though.


10/1
- added xu to n2b1200 top. Not tested yet though - don't
  have any pmodnic left besides the two that are already
  running, and don't want to take those down :-)
  n2b1200 is too small for full 11/70 and vt and xu - so,
  the fp is now disabled.


9/28
- playing with rsts and decnet, chasing some minor bugs,
  like the way that a mac address is written into the
  chip. Wrong order, wrong length command. Basically,
  everything at all wrong. But now it works :-) Decnetting
  from one node to the other. Ethernet rules.
- first attempt of making the microcode for xu cope with
  a nonhappy flow - ie, no contact with the chip at all.
- started first attempt to do the xu stuff on xilinx as
  well.
- normal operation soundless on the debug channel...


9/24
- changed some of the leftover modules - in vt - to the
  new interrupt controller structure. Should be done now.


9/22
- some cleanup, and a lot of playing with the now suddenly
  very stable xu core. Cleaning up the unibus naming scheme
  makes it a bit more elegant, and also more flexible - it's
  now possible to include more of the same devices without
  going mental.


9/21
- redid the interrupt logic in the unibus source and
  all controllers. Not quite finished, the vt and xu
  reduced unibuses are still up for cleaning. Still, in
  the light of what I've accomplished today, this seems
  another milestone that is just too important not to
  commit right now. And that is: yes, the ethernet
  controller for 2.11bsd now works - and apparently
  without flaws. Almost can't believe - I'm telnetting
  into a box that runs a make of the bsd kernel. And
  so far, it is stable as well - no hiccups whatsoever.


9/18
- another day or two debugging xu. Changed the command
  notification reset; it now needs a write into the
  register, instead of just a read. And, running now
  only means receiving, and pdmd only transmits.
  Those changes together seem to make things - again -
  a bit more stable. And, maybe even better, I now
  also have a theory on what might cause the lockups,
  I suspect the interrupt controller in the upstream
  rh11. Gonna look into that tommorrow - first sleep.


9/16
- fixed an issue in the xu core that caused the xubm
  to freeze up whenever odd length input was received.
  not exactly clear why the xubm should freeze up - its
  not supposed to even be able to know the difference.
  Needs looking into. But, the 2.11bsd seems to be much
  happier - especially after most of the debug output
  is removed from the microcode. Have now done a test
  run of over 2000 packets with it - including 3 parallel
  telnets and a flood ping.


9/15
- did some testing with the xu core, simplified some of
  the code - the copy back of the ring control blocks
  now skips the first two words, since these are never
  written by the xu. Seems to have some stabilizing
  effect, but it is still not the final fix.


9/9
- the fix for the xilinx clock issue apparently works,
  the s3b1000 is now up for over two weeks and the clock
  is still running.
- made some fixes to the xu core; the major issue is not
  yet fixed, but the problem with the out of sequence
  ping replies seems to be solved; this was probably due
  to resetting the ring buffers on a start command even
  if the status was 'running'. Not yet a clue on where
  to start looking for the bigger issue though.


8/12
- after summer holiday, not really started working
  on this again, but was wondering about the apparent
  problem in the Xilinx build that causes the clock to
  stop generating interrupts after a couple of days.
  At least, that appears to be the explanation. Anyway,
  simplified the core for kw11l somewhat.


4/29
- Again some subtle changes to the xubm, causing
  off-by-one errors to be fixed this time - at least,
  so I hope. Tests are inconclusive so far. Still,
  I'm running a telnet at this moment.


4/28
- already that much later... did a number of changes
  to the microcode, and fixed some bugs in the xubl
  and xubm as well. And, added a more functional
  npr arbitrator for the unibus. Did not make that
  much difference. Dealing with odd number of bytes
  in a transfer may have - just now, did the first
  telnet that actually carried data. Pity it crashes
  still - probably during the fork to the shell.
  Getting there, but slowly.


4/6
- worked on the microcode for the xu, first by trying
  out the xubl and xubm busmasters and the access to
  the ethernet chip. Then simplifying the microcode,
  and adding structure to it. Done that. Now getting
  to the point that the actual workings of the deuna
  are coming into play. Looking at the receiver and
  transmitter rings.
- decreased the output from the macro11 linker and
  blockram generator - to the point that actual problems
  are more easily identified.


3/29
- adding the busmaster between the xu local memories
  and the main memories - a new module called xubm.


3/26
- started incorporating the experimental xu core
  that I developed in a separate non-cvs tree back
  into the trunk.


3/14
- added configurability to the silo for kl11. Works
  fine upto 38400, not very well at 57600. But, at
  38400, the cpu is already doing ~4000 interrupts
  per second. Maybe that should be enough.
- from the scope, the silo can be seen to work pretty
  well in combination with rts.
- redid the s3b200 with the latest components, tried
  if it would be possible to add some blinkenlights.
  Still not enough space for the sd state leds, about
  20 slices short whatever I try. That's only about
  one percent... Ah, wait. The debug flag also includes
  setting some signals onto the address and data lines
  to look at with the logic analyzer. Not needed - so,
  added a new flag value for have_rk_debug; 2 means
  only the led output of the card state. Now only
  7 slices short... sigh. Oh well whatever. Ah, but,
  there is now ample room for simpler blinkenlights,
  like rx/tx activity :-)


3/10
- Bought a very dinky usb keyboard, a rapoo. And
  found out - the very hard way - that programming the
  proms for nexys3 is not trivial. As in, impossible
  unless you use the digilent software. Which runs on
  nothing except windows. Crap.
- And also the documentation is really crap. The
  ps2 ports really need pullup in the ucf. How hard
  is it to put that in the documentation?


3/9
- added Nexys3 board to the build tree. I'm somewhat
  disappointed by this board though - from the price
  level I kinda hoped that the FPGA would be huge.
  It's not, however - it's already struggling with
  an 11/70 + rp. And, the VGA core won't run because
  the Spartan6 apparently cannot handle blockrams with
  different clocks on both ports. That is, the manual
  implies that the fpga can, but the synthesizer
  insists that the read is asynchronous. Which it is
  clearly not, and certainly not after I changed the
  core to clarify the issue.
  Whatever, the fpga wouldn't fit a '70 with terminal
  anyway - which kind of defeats the whole point; my
  plan was to use the usb hid host interface to attach
  usb keyboards to. If the terminal core won't work,
  that becomes useless anyway. And, a Nexys2-1200 is
  cheaper (though not by much) and bigger. Digilent
  should have used the slx45 chip instead for the nexys3
  but they probably considered that this would compete
  with their Atlys board, which is a lot more expensive
  still.
- Changed the vga core to only require synchronous access
  to blockram resource. Took some doing to get right,
  but now it is. Fixed the old problem of putting the
  last scan line over the bottom edge of the screen as
  well. Works now with Nexys2, Nexys3, and still with
  de0. Nexys3 still has a problem with the usb keyboard
  interface though - it doesn't work with the apple alu
  keyboard I tried with it. It's got a builtin hub, maybe
  that is the problem.
- Nexys3 can build with the vga core, and 11/70 without
  fp11.
- rebuilt s3b1000. That now runs 2.11bsd too - and
  comfortably as well. Great stuff, lots of blinkenlights.


3/8
- somewhat experimentally added a silo buffer to the
  kl11 core. Took a while to get it to work. It makes
  for a more stable link @ 38400, but it does not seem
  to work reliably at 57600 or 115200. Not sure why
  yet. Next step is to make it a bit more optional -
  lower speed lines should not need the buffer at all,
  and it makes the core noticably larger.


3/7
- added backspace handling to the terminal core


3/6
- finally (ehhm) fixed (I hope) the clock domain
  crossing issues in the new kl11 core. That is,
  I haven't been able to break it anymore, it
  seems to build consistently, and also the theory
  seems right.


3/5
- last messages from 2.11bsd on the de0-nano before
  taking it down:

# netstat -in
Name  Mtu   Network     Address            Ipkts Ierrs    Opkts Oerrs  Coll
sl0   296   192.168     192.168.0.1       220913  1013   217515    42     1
lo0   1536  127         127.0.0.1            662     0      662     0     0
# uptime
 10:17pm  up 8 days, 19:13,  3 users,  load averages: 0.22, 0.19, 0.00


3/4
- capital U would generate a capital Y - fixed
  in blockramt42


2/28
- redid the kw11l to accept an hz input to it's
  instantiation. Changed the unibus component to
  expose it. So now the unibus instantiation allows
  to set the clock at 50, 60, or 800Hz.
- adding n3b - I received the nexys3 board today.
  And some other bits as well, still more rs232
  pmods, both the usb as the oldfashioned version.
  And Ethernet stuff as well. Alas, they sent one
  of the 10Mbit pmods, instead of both 100Mbit
  as I wanted.
  Nexys3 support will have to wait a bit, I don't
  have the new ise version yet.


2/27
- DE0 is big enough for a 11/45 with rk, rl, and
  the vt - but only just, and it takes the fitter
  serious effort to squeeze everything in. But,
  take out the fp11 and suddenly DE0 has room
  enough for 11/70 with an rh70 and the vt as
  well - so, it can run 2.11bsd too :-)


2/26
- redid tops of the altera boards except de270 with
  the new kl and unibus macro, changed the vt to
  include the kl and made lots of updates to the
  font for the vt.
  Oh, and ordered lots of Xilinx/Digilent stuff,
  including a current version of ise on dvd. Still
  can't complete the download.


2/25
- the fp ldc(i|l)(f|d) bug reappeared during playing
  with the dhrystone test. The same mistake in only
  checking for r7, but omitting the mode 2 check was
  also present in the fp alu. Fixed now. What I'm not
  sure about is if all the assumptions I made on the
  special cases of ldcif #xx,frx and ldcif rx,frx are
  correct -especially about the l mode m2r7 and mode0
  access. The manual seems to indicate that in this
  case, the single 16-bit word is taken to be the most
  significant one. Need to verify this somehow.
  In the meantime however, the dhrystone bugfix works,
  about 2500 dhry/second is the score for de0nano
  with cpu at 10Mhz.


2/23
- found some more minor details that were clearly wrong
  in the interrupt controller. And it is still so simple...
  Added a filter to the rx signal as well. Seems to help
  a bit. Not the solution to all of the strange build
  issues - sometimes for no apparent reason the rx input
  does not respond nicely. Don't understand yet.


2/21
- redid the interrupt controller in the kl11 to a more
  conventional form - I mean, the same form that I use
  in most of the other controllers. In itself that did
  not make the controller behave more stable when running
  slip over it - it still would hang occasionally. But,
  when configured such that a receive interrupt would
  reset the edge sensitivity for the transmit interrupt,
  the whole thing appears to be stable and robust. Time
  for some serious testing and playing :-)


2/20
- found a bug in the fp, the ldc(i|l)(f|d) instruction always
  read only the first word if the fsrc register was 7 - regardless
  of the mode or the length setting. Should have been only in
  mode 2. Same bug also was in the store variant.
  This bug caused the ntpd in 2.11bsd to crash with a divide by
  zero.


2/17
- playing with 2.11BSD, running patches 432-447 over the
  base system as installed from 'tape'.
  433 does not install cleanly - the /usr/src/lib/libkern
  sources need to be built and installed first; the libkern
  that is present does not contain several routines.
- doing some testing with the new 4 wire rs232 core, and
  the timing of the rts signal in particular. 12 bit times
  stretching appear to be too short at 9600bps; 15 bit times
  appears more stable. This might depend on the usb chip as
  well - so far testing with a pl2303.


2/16
- started with reimplementation of slu into kl11


2/11
- reverted change that I made to the ash core while debugging, it does
  not pass zkdj.
- updated copyright
- regarding the plan to implement 4-wire rs232, a tentative inventory
  shows the following:
  de1: 2wire
  de270: 4wire
  s3b200: 2wire
  s3b1000: 2wire
  de0: none, or 2wire, or 4wire
  nexys2: 2wire
  nexys3: 2wire
  pmodrs232: 4wire


2012/02/03
- After several unsuccesful debugging sessions, the final (?) bug
  in both bsd211 and v7's c compiler seems to be fixed. Again, it
  was an issue in the jsr instruction. In fact, maybe several issues
  combined. Firstly, I did not set the sr1 to signal the modification
  to the r6 for a jsr instruction. So, on the obscure case that an
  abort would occur on the stack push for jsr, something might
  go wrong - depending on the actual mmu abort handler. Secondly,
  when the abort would occur, also the target register for the
  jsr instruction would potentially already have been modified - and
  since that would not have been an increment or decrement, it could
  potentially lead to a wrong instruction restart.

  Anyway, made a number of very promising fixes. Regression tests are
  running as I'm typing this.


11/11
- published web site

11/7
- added license text to most source files.

11/5
- resurrected nexys2, which I had neglected for quite some time.
  Unix V7 runs gently when 11/45, but gets stuck somewhere in
  init processing if 11/70. Does not seem to be the already
  known 4Mb problem?
- also, yesterday and the day before, worked a bit on the
  website for this project. I'm planning to make it go live
  on 11/11/2011 - that seems like a very nice day for it.
- Och, forgot. The FT232 cables that I'm using for the newer
  stuff are not responsive to the minicom setting of 7 bits.
  So, I changed the slu core to ignore or negate the high
  bit. Configurable as well. But the slu core still needs
  a major overhaul. Just read up on that S3B only supports
  2-wire rs232. One of the things that really needs implementing
  is 4-wire rs232, as in hardware flow control. Next up.


11/4
- tried to fit s3b200 again. Works - but only after reconfiguring
  mubas to run from the rk0 disk, and having only 2 instead of 3
  rk's. It does run from the unified unibus source however, and
  I can't find whether or not the overhead in that is all
  optimized away correctly - I think it needs some compiler setting
  to report per module.


10/29
- some minor fixes in the hope to find the c compiler bug. No
  luck so far


10/28
- done some regression testing with 2.11. No new insights beyond
  that the unixarchive tree rp image c compiler mostly is working
  when the walther rk image c compiler is not. And vice versa. But
  not completely so, and only after some trickery with headers.
  Maybe I should just come up with a consistent image of working
  software... none of the images I've found so far for 2.11 seem
  to be consistent. Is that really it? If I recall correctly,
  simh seems to be able to make an image out of either source.


- And also this (note the uptime). Date and time correct after more
  than a week of uptime... Unbelievable.

$ sy

RSTS V10.1-L RSTS/E V10.1 status at 29-Oct-11, 01:49 AM Up: 8 00:28:29

Job    Who    Where     What    Size    State     Run-Time Pri/RB   RTS
 1     1,2    Det      ERRCPY   5/64K   SR            4.9    0/6    ...RSX
 2     1,2    KB0      SYSTAT  17/64K   RN Lck       51.5   -8/6    ...RSX
 3     1,2    Det      OMS      9/64K   SL            7.4    0/6    ...RSX
 4     1,2    Det      PBS...  19/64K   SL           14.2   -8/6    ...RSX
 5     1,2    Det      EVTLOG  18/64K   SL            0.3   -8/6    ...RSX

Busy Devices: None

Disk Structure:
Dsk  Open    Size      Free    Clu   Err Name      Level  Comments
DB0    24  340664  279416  82%   8     0 RSTS10     1.2   Pub, DLW

General  FIP                    Hung
Buffers  Buffers  Jobs/Jobmax   TTY's   Errors
  669      445       5/25         5        0

Run-Time Systems:
 Name   Typ   Dev    Size    Users  Comments
...RSX  TSK          0(66)K    5    Monitor, KBM
DCL     COM   DB0:   24(8)K    0    Temp, Addr:87, DF KBM
RT11    SAV   DB0:   4(28)K    0    Temp, Addr:133, KBM, CSZ, EMT:255
BASIC   BAC   DB0:  16(16)K    0    Temp, Addr:162, KBM, CSZ
TECO    TEC   DB0:  10(20)K    0    Non-Res, KBM

Resident Libraries:
 Name  Prot        Acct      Size  Users  Comments
CSP100 < 42>  DB0:[  0,1  ]    8K    4    Temp, Addr:118
CSPLIB < 42>  DB0:[  0,1  ]    8K    0    Non-Res
EDT    < 42>  DB0:[  0,11 ]   39K    0    Non-Res
RMSRES < 42>  DB0:[  0,10 ]    4K    1    Temp, Addr:881
RMSLBA < 42>  DB0:[  0,10 ]    4K    1    Temp, Addr:126
RMSLBB < 42>  DB0:[  0,10 ]    3K    1    Temp, Addr:144
RMSLBC < 42>  DB0:[  0,10 ]    3K    1    Non-Res
RMSLBD < 42>  DB0:[  0,10 ]    2K    1    Temp, Addr:130
RMSLBE < 42>  DB0:[  0,10 ]    3K    1    Temp, Addr:137
RMSLBF < 42>  DB0:[  0,10 ]    4K    1    Temp, Addr:140
DAPRES < 42>  DB0:[  0,10 ]   10K    0    Non-Res, Addr:871

Message Receivers:
Rcvrid   Job    Rib  Obj   Msgs/Max   Links/InMax/OutMax  Access
ERRLOG    1      0    1       0/40          0/0/0          Prv
OMS       3      0   11       0/30          0/0/255        Lcl
QM$CMD    4      1    3       0/20          0/0/255        Prv
QM$SRV    4      2    4       0/30          0/0/255        Prv
QM$URP    4      3    5       0/10          0/0/255        Lcl
PR$04A    4     17   65       0/5           0/0/255        Prv
PR$04B    4     25   65       0/5           0/0/255        Prv
BA$04A    4     41   66       0/5           0/0/255        Prv
BA$04B    4     49   66       0/5           0/0/255        Prv
BA$04C    4     57   66       0/5           0/0/255        Prv
EVTLOG    5      0    0       0/32          0/0/255        Evt, Prv
EVTLSN    5      1   26       0/16          0/8/255        Net, Prv
NSP      NSP     0    0       0/0           0/32/0         None
$


10/27
- minor modifications to the control registers. These however
  do not fix the detection issues in rsts - yet.
- Severely bothered by a regression of my annual eye infection.
  Missed 6 episodes already. Dark rooms are what I long for.


10/21
- been busy with other things and spent most time left for pdp11
  on playing with rp06 images - mostly rsts10 and decnet. Works
  mostly - and where not, there seems to be a good explanation.
- todays patch: added override of the fpu configurability; the
  have_fp input on the unibus macro can be set to 0 or 1 to
  override the default based on the cpu type.
- Newly identified issues,
  1) later rsts versions do not correctly determine the cpu type
  for j-11 models; it says 'unknown cpu type'.
  2) later rsts versions do not size memory correctly if the cpu
  type is 11/70 - maybe because of missing parity registers?
- But the rest works brilliantly:

$ show ter
Terminal: KB0:         Device_Type: VT102

    Break              Broadcast          Control=(R,T,C,X)  CRFill=0
    No Delimiter       No Eight_Bit       No Form            Hostsync
    Interactive        Lowercase          Resume=Control_C   Scope
    Speed not settable Tab                TTSync             Width=80
$ show acc/full

_SY:[1,2]  "[ 1, 2]"                          Created: 23-Oct-99

   Privileges:  DATES  DEVICE EXQTA  GACNT  GREAD  GWRITE HWCFG  HWCTL  INSTAL
                JOBCTL MOUNT  OPER   PBSCTL RDMEM  RDNFS  SEND   SETPAS SHUTUP
                SWCFG  SWCTL  SYSIO  SYSMOD TMPPRV TUNE   USER1  USER2  USER3
                USER4  USER5  USER6  USER7  USER8  WACNT  WREAD  WRTNFS WWRITE

   Attributes:  INTERACTIVE   DIALUP     NETWORK    NOCAPTIVE
                NOLOOKUP      PASSWORD_PROMPT       NOEXPIRE

   Quotas:  Disk usage   - Logged out:  unlimited   Logged in:    unlimited
            Job limits   -   Detached:  unlimited       Total:    unlimited
            Send/Receive -        RIB:  unlimited     Message:    unlimited

   Accounting:      CPU Time:   00:02:16.7    Kilo-Core Ticks:        33445
                 Device Time:   00:01         UFD Clustersize:           16
                Connect Time:   03:09                UFD Size:            1
            Blocks allocated:         7760           UFD Used:          9.8%

                Last Password change on 23-Oct-99 at 01:03 AM
                Last interactive login on _KB0: on 17-Oct-11 at 12:00 AM
                Last non-interactive login on 17-Oct-11 at 12:00 AM
$


10/11
- added rh70 to rh11 - as a flag, that only becomes active when
  the cpu type is set to 70. Seems to work for 2.11, but V7
  baulks. Not sure why yet -- OK, that's solved. V7 does not
  like 4M core to be available, if it's limited to 2M everything
  seems to work fine.


10/10
- changed name of rp06 source into rh11. Seems more appropriate.
- and also been playing with V7 on a rp06 image generated by
  myself from the dist tape. Works very well - am able to compile
  the system, boot the result, then do the same. That seems
  proof to me.


10/9
- trying to find more clues about the c compiler bug in bsd211,
  which seems to have more than one form. Other than that, most
  211 things seem to work happily. Still the compiler bug is not
  easy to find - not yet, at least. Looking into the core dumps
  did not yet provide a clue. Nor did playing with the modes in
  the i/d generator.


10/3
- doing some experiments to find out what the actual problem with
  the c compiler in bsd211 is - I mean the crash in
cc -O -DKERNEL -DPDP2011 -DINET -I. -I../h -S ../sys/sys_generic.c
Fatal error in /lib/c1
  that seems very consistent. Just today noticed that a core file
  is generated from it - maybe I need to find out what to do with
  core files :-)
- Looked into the generation of i/d signals, simplified the generation
  somewhat by making it independent of the instruction type - the
  generation by state should suffice. 11/44 tests seem to confirm,
  however, these same did not complain about any of the previous
  flaws.


9/29
- following a detail on yesterdays work, tried to generate a known
  good 2.11bsd kernel via simh and booting that. That worked, almost
  but not quite - still a crash in the net kernel. This one was
  relatively easy to find though - pointed to a mfpd that got a
  broken pointer. Logic analyzer output did not make sense - until
  I started checking the i/d signal generation for m(f|t)p(i|d)
  insn. That was conspicuously missing. Not any more. And, now,
  also the networking kernel boots ok, and works ok as well.
  :-)
  :-)
  :-)
  Seems like have-a-cigar time again!

Hello, world [t43]: cpu 11/84 fpu mmu ubm lck tt
boot from rp:

84Boot from xp(0,0,0) at 0176700
:
: xp(0,0,0)unix
Boot: bootdev=05000 bootcsr=0176700

2.11 BSD UNIX #1: Thu Jan 8 07:24:42 PST 1998
    root@pdp11.begemot.com:/usr/src/sys/PDP2011

attaching sl
attaching lo0

phys mem  = 524288
avail mem = 235584
user mem  = 307200

January  8 07:45:36 init: configure system

lp ? csr 177514 vector 200 skipped:  No autoconfig routines.
rl ? csr 174400 vector 160 skipped:  No CSR.
tm ? csr 172520 vector 224 skipped:  No autoconfig routines.
xp 0 csr 176700 vector 254 attached
cn 1 csr 176500 vector 300 skipped:  No CSR.
cn 2 csr 176510 vector 310 skipped:  No CSR.
cn 3 csr 176520 vector 320 skipped:  No CSR.
cn 4 csr 176530 vector 330 skipped:  No CSR.
erase, kill ^U, intr ^C
# Fast boot ... skipping disk checks
checking quotas: done.
Assuming NETWORKING system ...
pdp2011.sytse.net: bad value
atom2.sytse.net: bad value
starting system logger
preserving editor files
clearing /tmp
standard daemons: update cron accounting.
starting network daemons: inetd rwhod printer.
starting local daemons:.
Thu Jan  8 07:46:18 PST 1998
January  8 07:46:18 init: kernel security level changed from 0 to 1
January  8 07:46:20 getty: /dev/ttyl1: Device not configured


2.11 BSD UNIX (pdp2011.sytse.net) (console)

login: root
Last login: Thu Jan  8 07:37:02 on console
2.11 BSD UNIX #1: Thu Jan 8 07:24:42 PST 1998
[1] root--> netstat -nr
Routing tables
Destination      Gateway            Flags     Refs     Use  Interface
127.0.0.1        127.0.0.1          UH          0        0  lo0
[2] root--> netstat i^?-i
i-i: no namelist
[3] root--> stty erase ^?
[4] root--> netstat -i
Name  Mtu   Network     Address            Ipkts Ierrs    Opkts Oerrs  Coll
sl0*  1006  none        none                   0     0        0     0     0
lo0   1536  localnet    localhost              0     0        0     0     0
[5] root--> ifconfig lo0
lo0: flags=29<UP,LOOPBACK,NOTRAILERS>
        inet 127.0.0.1 netmask ff000000
[6] root--> ifconfig sl0
sl0: flags=10<POINTOPOINT>
[7] root--> telnet
telnet> open localhost
Trying...
Connected to localhost.
Escape character is '^]'.


2.11 BSD UNIX (pdp2011.sytse.net)

login: root
Last login: Thu Jan  8 07:46:24 on console
2.11 BSD UNIX #1: Thu Jan 8 07:24:42 PST 1998
[1] root--> who
root            console Jan  8 07:46
root            ttyp0   Jan  8 07:47    (localhost)
[2] root--> i^?
i^?: Command not found.
[3] root--> netstat -a
Active Internet connections (including servers)
Proto Recv-Q Send-Q  Local Address          Foreign Address        (state)
tcp        0      0  localhost.telnet       localhost.1024         ESTABLISHED
tcp        0      0  localhost.1024         localhost.telnet       ESTABLISHED
tcp        0      0  *.ident                *.*                    LISTEN
tcp        0      0  *.printer              *.*                    LISTEN
tcp        0      0  *.discard              *.*                    LISTEN
tcp        0      0  *.echo                 *.*                    LISTEN
tcp        0      0  *.finger               *.*                    LISTEN
tcp        0      0  *.login                *.*                    LISTEN
tcp        0      0  *.shell                *.*                    LISTEN
tcp        0      0  *.telnet               *.*                    LISTEN
tcp        0      0  *.ftp                  *.*                    LISTEN
udp        0      0  *.time                 *.*
udp        0      0  *.who                  *.*
udp        0      0  *.echo                 *.*
udp        0      0  *.biff                 *.*
Active UNIX domain sockets
Address  Type   Recv-Q Send-Q    Inode     Conn     Refs  Nextref Addr
    5408 stream      0      0     2410        0        0        0 /dev/printer
[4] root-->


9/28
- held up by several other events and day job as well. Managed to
  do some research today, finally - the boot issue with the rp06
  image is caused by a reference to a deqna - which is of course not
  present, so the access to 174440 causes a 004 trap which is not
  caught by the OS. It appears that even if not configured, the
  deqna control registers are present in simh - that is why the
  image boots on simh. The image can still be booted from the genunix
  kernel though. And, most other issues seem to be caused by the
  different ways to set the ps - mtps, spl, write to 177776 - have
  not seen a real issue yet, I think. Not sure yet about the /lib/c1
  crash that happens when I try to recompile the kernel, need to
  verify that one.


9/22
- the big disk core is nearing its completion already. At least, that
  is the way it looks right now - am watching ls -alsR from bsd211
  scrolling by for the last half hour.
  It passes a significant amount of the zrmm, zrmn, zrmo diags when
  set to RM05. RP04 I'm not too sure of yet, but the bsd211 RP06 image
  found in the pups unix archive can be mounted. Not booted from yet,
  but after this morning's fix to make sure the controller is recognized
  as an RH11 and not RH70 it seems to work fairly well - to the point
  that I now think the booting problem may actually be caused by
  another problem - one that may not be in the disk at all.


9/16
- been playing with 2.11BSD lots. Great fun. V7 is also rock solid
  now - as seem all the other OSses.
- started implementing a big disk. First planned for rp06, but the
  rm05 docs and available test modules seem better. So do that one
  first, and make configurable later - rp would be nice to have for
  V7, 2.11BSD can handle both, haven't checked any of the dec stuff
  yet. Called rp06 now, will probably rename to rh11 next - that would
  seem to be the most likely name. Will have a setting for rh70 mode.
  Need to check how that would work on J11 Unibus systems, and Qbus.


9/9
- :-)
  Very big grin now.
  Was playing around with unix V7, to try if it would run on a 11/70
  Turns out there is apparently a bug in the second stage boot of the
  rl image. But, in chasing that one, I found a very silly mistake in
  the mmu core - which made the unibus map upper registers writeable
  in several places in the memory map. Which would obviously corrupt
  their contents...
  Fixed that. Did not do the trick for V7 - as I said, that is something
  different - and by the way, it doesn't work for simh either, I found
  out. But, 2.11BSD now works :-)
  :-)
  :-)
  :-)
  Time to have a cigar. Wish I'd bought one yesterday.


9/7
- had a scare just now - pc did not boot. Took me a while to realize
  that I'd left an sd card in the reader, and the machine was trying
  to boot from the rl02 image on that card...


9/5
- found a sign extension error in the sector address adder of the
  rl11 controller. Apparently this was responsible for at least some
  of the disk corruption that sometimes happened on v7. As usual,
  I'm not sure I understand how it could ever work.


9/4
- yesterday did some minor updates without a very well defined
  plan. Turns out today that both need to be reverted - they
  cause kkaa/kkab to fail.
- redid the ssram interface for de270 - which took some time.
  Now, the board runs at 80Mhz - which is 10Mhz for the cpu. Still
  slower than I would have thought possible, but a lot better than
  the unreliability at 40Mhz of the earlier version. Turns out I
  had forgotten to set the read in the right cycle - I'm amazed
  it ever worked at all.
- reintroduced the run button.


9/2
- spend a rather short time chasing more bugs - without a lot of
  apparent success. The list of not-understood zkdk cases is now
  down to 1 - which is still the #250. The #276 case proved to be
  hard to understand - it involved a double error trap, which
  only became apparent during simulation runs. And, the solution
  is less than elegant - suppressing all changes made in the state
  that caused an abort. Implemented that as a special case in the
  delayed mmuabort from 8/31.


9/1
- not much done today - spent some time looking into the zkdk
  error #250 - for which the source is missing. Makes for
  difficult understanding. Has something to do with the unibus
  redirection of 17000000+ addresses back into main memory -
  but why the test fails escapes me.
- did find a rather major bug through zkdk though - the sr1
  never recorded mmuaborts through the previous mode mapping,
  the psw bits were always 15:14 - never 13:12.


8/31
- elaborated yesterdays mmu fix. Works - the test case, booting
  211BSD and then running ls -als in the single user mode shell,
  now reliably works. Some problems still with the rc script - it
  hangs at some point halfway through. Now first need to do lots
  of regression tests, really - and make the new trick configurable
  so that the J11 model also works.
- added configurability for the mmuabort delay processing, added
  the same for odd addressing while I'm at it. Probably would make
  sense to do the same for nxm as well.
- prompted by the errors in the mmu, looked some more at the sr1
  formation and found some grave errors in the sr1 formation for
  the m(f|t)p(i|d) instructions. Now corrected, I think. Still, need
  to have a very good look at why kfpc is still complaining.
- In the meantime, I seem to have gotten rid of the mysterious extra
  character of output in the heading of fkth - mostly, an 'x' or '/'
- Regression testing, esp. zkdk, shows that the J11 model suggested
  by the code in 211BSD is not accepted by the test. Maybe the situation
  documented in the code occurs only in specific cases? Needs more
  research.


8/30
- several changes to the interaction between cpu and mmu,
  the most important of which is the timing of an mmu-generated
  abort leading to the update of the register involved in an
  autoincrement or autodecrement operation. Because in the original
  model, the increment/decrement is suppressed, the sr1 register
  remains clear, so if an MMU trap occurs for a stack that needs
  to grow, the register that caused the trap actually points inside
  the valid region. 211BSD has a fix for this behaviour, but that
  only kicks in if the cpu is a J11 model. Tentative fix tried, but
  somewhat more complex than I can solve today.
- also added the sr2 setting of interrupt vector that is apparently
  specific to 45 and 70.


8/29
- did some checking and playing around with de1dram, which
  for some reason does not compile very well - the start
  address of the cpu does not seem to be recognized. Probably
  the reoccurrence of the old reset problem again - but I dont
  understand what exactly is going on.
- Abandoned that, and went on to look at 11/70 and 2.11BSD -
  which was the reason to get de1dram working again anyway.
  Test setup for simh now works - needs more memory than the
  default gives. And, to be sure that I'm compatible with
  Walter's rk11-bsd211 diskset, done the whole setup without
  fpp.


dd if=211bsd_rk_root.dsk of=/dev/sdc
dd seek=6144 if=211bsd_rk_swap.dsk of=/dev/sdc
dd seek=12288 if=211bsd_rk_tmp.dsk of=/dev/sdc
dd seek=18432 if=211bsd_rk_bin.dsk of=/dev/sdc
dd seek=24576 if=211bsd_rk_usr.dsk of=/dev/sdc

set cpu 11/70
set cpu 512k
set cpu nofpp
set ptr disable
set ptp disable
set lpt disable
set dz disable
set rl disable
set hk disable
set rx disable
set rp disable
set rq disable
set tm disable
set tq disable
set xq disable
att rk0 211bsd_rk_root.dsk
att rk1 211bsd_rk_swap.dsk
att rk2 211bsd_rk_tmp.dsk
att rk3 211bsd_rk_bin.dsk
att rk4 211bsd_rk_usr.dsk


8/28
- configured de0nano as 11/44 and ran xxdp25 tests. This
  reveals that the kkua again does not run flawlessly.
MAIN MEMORY TIMEOUT OVER THE UNIBUS DID NOT OCCUR PROPERLY
CONDITN CONDITN
EXPECTD RECEIVD TESTNO  ERR PC
000000  000000  000011  015136

RELOCATION THROUGH THE MAP WAS NOT CORRECT, CARRY PROPAGATION
TEST CODE BEING RUN OVER UNIBUS
CORRECT   EXPECTD RECEIVD
ADDRESS   DATA    FROM UB TESTNO  ERR PC
17000000  167710  170010  000013  015232

MAIN MEMORY TIMEOUT OVER THE UNIBUS DID NOT OCCUR PROPERLY
CONDITN CONDITN
EXPECTD RECEIVD TESTNO  ERR PC
000000  000000  000014  015360

RELOCATION THROUGH THE MAP WAS NOT CORRECT, CARRY PROPAGATION
TEST CODE BEING RUN OVER UNIBUS
CORRECT   EXPECTD RECEIVD
ADDRESS   DATA    FROM UB TESTNO  ERR PC
36040000  167711  170011  000016  015444

END PASS #    69  TOTAL ERRORS SINCE LAST REPORT      4

MAIN MEMORY TIMEOUT OVER THE UNIBUS DID NOT OCCUR PROPERLY
CONDITN CONDITN
EXPECTD RECEIVD TESTNO  ERR PC
000000  000000  000011  015136

RELOCATION THROUGH THE MAP WAS NOT CORRECT, CARRY PROPAGATION
TEST CODE BEING RUN OVER UNIBUS
CORRECT   EXPECTD RECEIVD
ADDRESS   DATA    FROM UB TESTNO  ERR PC
XXXXXXXXXXXXXXXXXXXXXXXXXXXXX

  Also, strangely, it seems to consistently crash after the
  69th pass and loop on slowly outputting X'es. It does not
  appear to be a timing issue - it is the same both on 140Mhz
  and 35Mhz.
- Ah, ok. The error is caused by the size of the dram - which
  was larger by 128K than the original 11/44, which had only
  3840K. Because of that, a number of expected timeouts does
  not occur... Fixed.
- And also copied the updated 7/7 dram driver into de0


8/27
- redid state numbering on de0nano dram state machine,
  because the timing of the dram did not really look like
  a 14-8/6 on the scope - but rather like a 14-7/7.
  Turns out it was :-) which does not explain a lot of
  things. Anyway, de0nano happily runs at 140Mhz/14-7/7.
  So, 10Mhz at the cpu - which today is a 11/34.
- Hmm, maybe it does not run entirely happy at all - just
  had an rsts crash.
- Seems like the rl11 core looses connection to the sd
  card, just - again - had to reboot because of this.


8/26
- the previous test run with de0 at cas=3 actually ran
  at cas=2... Now set to 3, pushed back the read time
  again, and running 11/34 at 140/14. Passes zqmc.
- also, added de0nano - received two last wednesday.
  Impressively small with a fairly large fpga on it -
  larger than de0 and de1, and a lot of dram as well.
  First tests are somewhat awkward, since there is no
  sdcard or rs232 interface at all on the board. Takes
  some time to get the headers connected just right.


8/18
- reinstalled ISE - by just copying all of it from the
  old raptor that was in the crashed-harddrive setup.
  Seems to work fine - that is, no different than I'm
  used to. Tried to regenerate the core for the s3b200
  board, but apparently the 11/10 needs to go on a bit
  of a diet - again. And also, the optimization still
  seems to generate problems that are exceedingly
  difficult to understand.


8/17
- redid the dram timing for the de0, changed it to cas=3
  because the dram chip on de0 seems to like that a lot
  better.
  11/45: 140Mhz/14 (8 cycles/6 cycles), ie overclocking dram,
  cpu @ 10Mhz, seems stable.


8/16
- made several updates to the vga core, including some
  updates to the timing - but mostly, to make the core
  somewhat more understandable.


8/15
- setup the de0 board for showing. Including a switch
  to allow both rk and rl to be used as controller for
  the single sd card slot.


8/11
- A somewhat lengthy debug process - that is, stretching
  over a couple months in all, but not that long actually
  spent working at the issue - finally revealed the issue
  that prevented compiled Fortran code to run. It actually
  was the JSR R6 that caused the problem...
  What is nice in retrospect is that I found the actual bug
  by theorizing about the observed behaviour only - not by
  actually peering at debug output. Still took way too long
  though.
  Anyway, fix added. Not all problems are out of the world
  yet - still this may be due to a bit of careless work in
  adding the fix, need to do some regression testing - and
  maybe verify that the disk images are actually all correct.
  Some are quite old already.
  First set of regression testing shows that the DE1 speed
  setup of something like 20Mhz at the cpu may be a bit too
  much for the current model. Decreasing to the default of
  6.25 allows xxdp25 to run 11/34 tests - interestingly,
  the xxdp22 tests did run perfectly at 20Mhz. Well, slightly
  less actually.

Results so far:
- RT11 R4 SYSGEN works (11/34 rk)
- RSTS R7 BASIC works (11/45 rl01)


7/30
- Found a lot of disk images. Several of them
  list old basic programs. Some even work,
  somewhat. This is one of them:


 RANDOM POETRY IN FOUR PART HARMONY.



HIS MOST WISE MUSIC STOLE
    NOTHING FROM DEATH
  AND IT IS DAY

THERE IS NEVER AN END,
 MERELY A BELATED BEGINING...
  AND IT IS DAY
OR WITH THY MIND AGAINST MY MIND,
    YOU SHOULD NOT HEAR ME SPEAK

 TIME IS TWISTED TO LAP UPON
     ITSELF FOREVER
THE HOURS RISE UP PUTTING OFF STARS
    AND IT IS DAWN
WHO IS AFRAID OF DEATH?THOU
    ART OF HIM
SHE SLEEPS WITH DEATH UPON HER MOUTH
    AND A SONG IN HER EYES
LOVE IS THE EVER ONLY GOD
AND SPACE IS MISING FOR IT WAS
STOLEN FOR ALL TIME TO COME
NOBODY LOSES ALL THE TIME
A CANDLE IS LIGHTED
    AND IT IS DARK


                      BY  A. COM PUTER.

READY


7/28
- Playing with mubas, wrote new basic program to calculate
  prime numbers. Based on yxorp's findprime function - don't
  remember where I found that algorithm.

READY
LIST

PRIMES        00:12:03
10 Q%=0
20 B%=0
30 X%=1
40 C%=4
50 L%=1
60 S%=9
70 N%=10000
80 M%=100
90 DIM P%(101)
100 DIM V%(101)
110 FOR I%=3 TO N%
120 X%=X%+C%
130 C%=6-C%
140 IF S%>X% THEN 180
150 L%=L%+1
160 V%(L%)=S%
170 S%=P%(L%+1)*P%(L%+1)
180 K%=2
190 F%=1
200 IF F%<>1 THEN 290
210 IF K%>=L% THEN 290
220 K%=K%+1
230 IF V%(K%)>=X% THEN 250
240 V%(K%)=V%(K%)+2*P%(K%)
250 F%=1
260 IF X%<>V%(K%) THEN 280
270 F%=0
280 GO TO 200
290 IF F%<>1 THEN 120
300 IF I%>M% THEN 320
310 P%(I%)=X%
320 PRINT USING "  #####",X%;
330 IF X%>30000 THEN 390
340 Q%=Q%+1
350 IF Q%<8 THEN 380
360 PRINT
370 Q%=0
380 NEXT I%
390 END

READY


6/11
- finished the main ps2 keyboard stuff. Parity and timeout
  not yet included - but not sorely missed either, the
  amount of error seems to be limited. Next up is to
  write some software to translate the raw scancodes into
  ascii.


6/5
- came up with the error in the de0 - did some changes to
  the dram timing which I thought would relax the timing
  but in fact I broke it completely. Now works, first
  time around - no way of testing further, since the ps2
  keyboard interface is conspicuously missing. 34 still
  does not work - this would seem to be discouraging.


6/3
- adding de0, project, pin assignments, and in some cases
  also logic. Is there actually a different sdram chip on
  de0? Yes, there is. Is it's interface different? I'm not
  sure, actually - the 12th address line appears to be bogus.
  Nevertheless, it is a somewhat troublesome path to get the
  design to actually produce output. Still, the first of it
  now is apparent - this version boots rk11. No clue beyond
  that, however, since there is no input to the de0 board
  yet.


6/2
- updated primary coding machine and server to Fedora 15. Not
  relevant to this project, but a lot of work anyway. Tried
  moving to git, reverted, will do again soon probably. However,
  just now changed something the oldfashioned cvs way - redid
  the defaults for the unibus component decl, esp. for the rk11
  stuff.


4/30
- an experimental 20 with eis and fpu :-) runs mubas at 17.5Mhz
- Also, brilliantly, a new change to cause a reliable power on
  reset for the sram based boards was lost. Maybe that is not
  even a bad thing, because it seemed to slow down the cpu
  considerably.


4/28
- optimized settings a bit further. Previous version
  pushed timing too far back (why that would even be possible
  escapes me, for now). Anyhow, there was also a marked
  difference between 20 and 34/44/45 - only 20 would work
  at 135 externally, 8.4something cpu. Earlier timing
  allows 34 to do 135-8.4 as well. And, also 135-9 Mhz, by
  running 135/15 instead of 135/16. 45 however does not run
  on rk at 135/15, neither as it seems the other 'bigger'
  models.
- the static ram version runs an 11/20 at 160/8, so 20Mhz
  effectively at the cpu and rk11. Seems stable at that -
  is running mubas pi calculation.
- static ram 11/34 with rk11 runs 122/8, 15.275Mhz. Builtin
  20 for vt terminal doesn't like it, however. Goes better
  at 120/8, 15Mhz.
- static ram 11/45 with rk11 however only does 78/8, 9.375Mhz.
  Difference seems too large though - the amount of extra
  logic levels should not have this much impact. Don't
  understand - however: 20-34 difference is ~~5Mhz. 34-45
  difference is also ~~5Mhz. 45-44/70/73 also may be around
  that order. Each would be another level of lookup that may
  come from a ram structure... Lets check if timing tools will
  substantiate this.


4/24
- worked for a couple of days on implementing sdram. Now,
  sdram on the de1 works.
  Timing is very tricky though - most of the sdram timing
  depends on actual times, not on clock cycles. Does not
  translate into an easy generic model. Also, the cas
  latency does not seem to want to be 2. Not sure what
  goes wrong here...
- also, added a pll to the de1 sdram setup, can take this
  to 135Mhz. That combined with the 16-cycle sdram driver
  gets the cpu to almost 8.5Mhz - however, this only works
  for a -20 model, at this point in time.
- Does not yet work for all models, though. Not sure what
  goes wrong here... Pushing back the timing of the memory
  accesses works, so far - 44 also works @3.xMhz now. That
  is, kkua still fails:
MAIN MEMORY TIMEOUT OVER THE UNIBUS DID NOT OCCUR PROPERLY
CONDITN CONDITN
EXPECTD RECEIVD TESTNO  ERR PC
000000  000000  000011  015136

RELOCATION THROUGH THE MAP WAS NOT CORRECT, CARRY PROPAGATION
TEST CODE BEING RUN OVER UNIBUS
CORRECT   EXPECTD RECEIVD
ADDRESS   DATA    FROM UB TESTNO  ERR PC
17000000  167736  170036  000013  015232

MAIN MEMORY TIMEOUT OVER THE UNIBUS DID NOT OCCUR PROPERLY
CONDITN CONDITN
EXPECTD RECEIVD TESTNO  ERR PC
000000  000000  000014  015360

RELOCATION THROUGH THE MAP WAS NOT CORRECT, CARRY PROPAGATION
TEST CODE BEING RUN OVER UNIBUS
CORRECT   EXPECTD RECEIVD
ADDRESS   DATA    FROM UB TESTNO  ERR PC
36040000  167737  170037  000016  015444
- 73 also does not boot. Strange.
- Also, strangely, only 20 seems to want to deal with rk.
  Does not make sense at all, probably some unobvious
  error somewhere.
- rl boots ok when cpu model is 20, 34, 44, but not 73?
  Again, strange... maybe 73 is the problem. But why?
- 34 does boot and run xxdp25 tests at pll generated
  100Mhz/16 cpu freq, but 44 does not. 44 does however
  boot and run tests at 50/16 freq. Need to look further
  into dram timing - how much further can I push the
  delays in the /16 timing model? and where is the limit,
  and why?


4/11
- did a quick change to add a module for control registers
  to the vga controller. First control register to go in is
  the cursor address. Need to think whether or not any other
  control registers will actually be needed - maybe cursor
  shape should be one.


4/3
- fixed some of the most obvious problems in controlling
  where the next character goes into the framebuffer. Still
  a very simplistic model - currently handles only NUL, CR
  and LF special characters. Still nice to watch. Look Ma,
  no PC :-)


April 1, 2011
- Yesterday and today worked on adding a vt and vga core
  to support an even more sbc - not just a single board
  computer doing rs232 to some terminal, but include the
  terminal as well. The concept works, now - I have a
  character based frame buffer, including a font generator,
  and a cpu to drive the algorithmic stuff that the terminal
  will require. Basically, what is needed to finish the
  whole thing is just some more software.


January 12, 2011
- not done much over the last few weeks, apart from wasting
  time with hunting strange problems on the s3b200 target
  that are probably all caused by my complete lack of
  grasping even the most basic concepts of hardware and
  vhdl. Either that or the optimizing introduces errors. I'm
  still betting on the latter, actually.
  s3b200 runs an 11/20 with 3 rk's, rt-11 and mubas. All except
  the actual sysgen executable. mubas can be generated to do
  double precision - and then takes a day or so to do pi to
  something like 12 digits.


12/26
- added a build for the s3e board. Not (yet...) with support
  for the dram on that board, but only a tiny amount of ram
  based on the brams in the s3e500 chip. Disappointingly, this
  is not enough to run mubasic in. Still, through the brilliant
  sample provided by Xilinx' Ken Chapman, it is possible to run
  the pdp at any frequency, settable through the rotary control
  and the lcd display. A pdp11/34 with rl11 can in this way be
  taken to 22.5Mhz - which should be roughly 20 times faster
  than the original 34, going by that an fkaa run should take
  10 seconds, while the s3e500 takes only half a second.


12/24
- mubasic works on s3b200. A seemingly trivial fix eventually
  made for the final target for s3b200. Much joy. And all that
  on Christmas eve as well. After all the work that has gone
  into this, it seems truly a wonder that now it works. I'm
  taking a moment to remember Thijs - my last remaining cat,
  and the way he used to sit patiently waiting while I was
  doing whatever needed to be done. One of his preferred
  spots was on top of one of my tower pc cases - nice and
  warm. He was in his last days when I started working on
  this project - which was when I was home on sick leave
  with a severely infected ear - I needed something to
  concentrate on to take my mind of the pain. Anyway - it is
  truly a significant milestone now that mubasic works on the
  boards that I then started working with.


12/22
- Later: found out that in the minimizing of the rk core
  an error was introduced in the rk event timer. Strangely
  fixing that does not solve the problems for the s3b200,
  but it seems to do so for de270. Not sure why yet - needs
  more investigation.


12/22
- After some thought, found a minor further optimization
  possibility - setting the r0 in the reset core, not
  in a fsm state of its own. This saves enough to allow
  for a third rk drive on the rk11. Mubasic does not yet
  work however, the system halts

.R MUBAS

WARNING: DATE NOT SET


MU BASIC-11/RT-11 V2.00R
CONFIGURATION FILE : *1USER
MU BASIC-11/RT-11 IS OPERATIONAL.
PLEASE TYPE IN "HELLO".

?MON-F-System halt


12/21
- Been working on slightly optimizing the rk and cpu
  cores to find out if it is possible to run a minimally
  configured system in an s3b200. Turns out this is
  possible - only a lot of niceties have had to be
  scrapped. Like most blinkenlights - which kind of
  defeats the whole idea of building a pdp11 in the
  first place.
  Still, quite a nice result. Much joy. What is now
  effectively a 11/10 with a console and rk, but without
  the switch and display register, is now running the
  build part of the rt11 sysgen. And, that works :-)
  Alas, cannot try mubasic yet - as the standard rk
  image for that requires rk2, and the s3e200 does not
  have room for a third rk on the rk11. That is how
  tight the logic fits into the chip :-)


12/11
- Reworked the unix v7 pi program into mubas basic,
  configured/linked mubas to run double precision and
  use the hardware fpu.

#include <stdio.h>

main()
{
  double num;
  double pi;
  double den;
  int plus;
  long iter;

  num = 4.0;
  pi = 0.0;
  den = 1.0;
  plus = 1;
  iter = 1;

  while (den < 300000) {
    if (plus) {
      pi = pi + num/den;
      plus = 0;
    } else {
      pi = pi - num/den;
      plus = 1;
    }
    den = den + 2.0;
if (!(iter % 100))
    printf("iter = %-9ld pi = %2.16e err = %2.16e\n", iter, pi, pi - 3.14159265359);
    iter++;
  }
  printf("pi = %2.16e\n",pi);
}

thusly became:
LIST

PI        07:17:06
10 C=2
20 N=4
30 P=0
40 D=1
50 L=1
60 I=1
70 IF D>=300000 THEN 240
80 IF L=0 THEN 120
90 P=P+N/D
100 L=0
110 GO TO 150
120 P=P-N/D
130 L=1
140 GO TO 150
150 D=D+2
160 IF C<=1000 THEN 210
170 C=1
180 PRINT USING "ITER = ######## ",I;
190 PRINT USING "PI = #.############### ",P;
200 PRINT USING "DIFF = #.###############",P-3.14159265359
210 I=I+1
220 C=C+1
230 GO TO 70
240 PRINT STR$(P)
250 END

ITER = 14998000 PI = 3.141592587018200 DIFF = -.000000066571788
ITER = 14999000 PI = 3.141592587022700 DIFF = -.000000066567335
ITER = 15000000 PI = 3.141592587027100 DIFF = -.000000066562884
3.1415925870271

READY


12/1
- Typed in a silly basic game:

DEPTH        00:16:24
10 RANDOMIZE
20 PRINT "DIMENSION OF SEARCH AREA";
30 INPUT G
40 N=INT(LOG(G)/LOG(2))+1
50 A=INT(G*RND)
60 B=INT(G*RND)
70 C=INT(G*RND)
80 FOR D=1 TO N
90 PRINT "TRIAL #";D;" ENTER COORDINATES OF DEPTH CHARGE (X,Y,Z)";
100 INPUT X,Y,Z
110 IF ABS(X-A)+ABS(Y-B)=0 THEN 170
120 GOSUB 200
130 PRINT
140 NEXT D
150 PRINT "THE SUBMARINE WAS AT";A;",";B;",";C
160 GO TO 180
170 PRINT "BOOM - FOUND IN ";D;"TRIES"
180 PRINT "END"
190 GO TO 290
200 PRINT "SONAR REPORTS SHOT WAS";
210 IF Y>B THEN PRINT " NORTH";
220 IF Y<B THEN PRINT " SOUTH";
230 IF X>A THEN PRINT " EAST";
240 IF X<A THEN PRINT " WEST";
250 IF Z>C THEN PRINT " TOO LOW"
260 IF Z<C THEN PRINT " TOO HIGH"
270 IF Z=C THEN PRINT " THE RIGHT DEPTH"
280 RETURN
290 END

READY

RUN

DEPTH        00:18:08
DIMENSION OF SEARCH AREA? 8
TRIAL # 1  ENTER COORDINATES OF DEPTH CHARGE (X,Y,Z)? 4,4,4
SONAR REPORTS SHOT WAS SOUTH WEST TOO HIGH

TRIAL # 2  ENTER COORDINATES OF DEPTH CHARGE (X,Y,Z)? 6,6,3
SONAR REPORTS SHOT WAS SOUTH WEST TOO HIGH

TRIAL # 3  ENTER COORDINATES OF DEPTH CHARGE (X,Y,Z)? 7,7,2
BOOM - FOUND IN  3 TRIES
END

READY


11/28
- been busy with adding a second serial interface, which
  took some time because a) I misunderstood the reversed
  meaning of rx and tx on the digilent pmodrs232, and b)
  because none of the available operating systems were
  very easy to configure into supporting a second terminal.
  Should probably have started with rsx or rsts :-)
  Anyway. Now, I have mubas running on two (2!) terminals,
  simultaneously executing code. Much joy :-)
  Work required to reach this is firstly to do a sysgen
  on rt11v4 - because all the bootable monitors that are
  distributed have no support for multiple terminals, but
  mubas needs it to be included. So, a sysgen is required
  but that will for some unknown reason not work on hardware.
  But it does run correctly on simh.
  After that, the second step is to edit the mubas configuration
  file. It should read:
$BEGIN
US:Y
DD:RK2
DV:RK2P

TT:0,1
MK:1
SB:1,256

SI:256
UC:2
SC:1
OP:-1
UN:2
CS:0
MU:1
MO:1
DN:1

  in which the line TT:0,1 lists the terminals that are
  to be serviced. Also notable is that this configuration
  requires the basic programs etc. to reside on rk2


11/20
- playing around with zkdj. Seems to pass, eventually,
  but one of the scary things is that I (in this case
  am at least very much confident to)  have found
  an error in the original zkdj test - line 9897 should
  have included an @ in the line mov #waitin,r1.
  To fix that, added a wait loop to the sob insn. However
  it seems to work as desired only if the wait amount
  is 127 - which seems too much by far. Maybe the recoding
  of kw11l that I did in the meantime isn't entirely
  correct - need to check that as well.


11/19
- another last minor fix to the div core. Seems a bit
  more likely to be the last than the one before, or
  the one before, or the one before, or something.


11/18
- had some fun - again - with the div core. Made
  some definite fixes, though - the result is
  somewhat cleaner than it was before, and contrary
  to all previous attempts, this version passes all
  the tests I've found so far.


11/16
- received de0 and nexys2 boards. Adding the n2
  goes nicely.


11/12
- redid some of yesterdays work. Some of the
  same behaviour observed again. Then added
  the notion of reporting drive busy when
  the state machine is not in idle state. That
  seems to make a big difference - now passes
  consistently.


11/11
- nxm to io page issue still notfixed,
  after really unreasonable amount of effort.
  Not sure at this point if nxm to core still
  works. The nxm to io page is now detected,
  but bizarrely only on the first pass. After
  that, it is not detected? and thereafter
  the cpu will not boot from the RL? Maybe
  it's time to revert this whole crappy
  core.


11/8
- added setting r0 at reset to modelcode,
  and decoding that in the m9312 bootrom
- playing around, found 2.11 rk images via
  Walter's w11. Seems to boot on 1170, but
  gets stuck. Earlier, I thought this could
  be because of errors in the memory sizing,
  but I now realize this appears to work
  correctly. However, the error output has
  changed - without a change in the logic. Now,
  the problem appears to be that the rk controller
  actually detects an nxm - which it does not
  in the zrkk test. And, apparently the memory
  size is detected correctly - but the rk is
  instructed to do a transfer to an address >2M -
  which can be observed on the blinkenlights.


Hello, world [t37]: 11/70 m9312 rk05 bootstrap

70Boot from rk(0,0,0) at 0177404
:
: rk(0,0,0)unix
Boot: bootdev=03000 bootcsr=0177404

2.11 BSD UNIX #26: Thu Jan 1 19:49:13 PST 2009
    root@curly.2bsd.com:/usr/src/sys/RETRONFPRK


phys mem  = 2097152
avail mem = 1742848
user mem  = 307200

January  4 16:45:32 init: configure system

rk0a: hard error sn3324 er=2000<NXM> ds=4711<SOK,DRY,RWSRDY>
rk0a: hard error sn3324 er=2000<NXM> ds=4713<SOK,DRY,RWSRDY>
rk0a: hard error sn3324 er=2000<NXM> ds=4720<SOK,DRY,RWSRDY,SKC>
rk0a: hard error sn3324 er=2000<NXM> ds=4713<SOK,DRY,RWSRDY>
rk0a: hard error sn3324 er=2000<NXM> ds=4720<SOK,DRY,RWSRDY,SKC>
rk0a: hard error sn3324 er=2000<NXM> ds=4713<SOK,DRY,RWSRDY>
rk0a: hard error sn3324 er=2000<NXM> ds=4720<SOK,DRY,RWSRDY,SKC>
rk0a: hard error sn3324 er=2000<NXM> ds=4713<SOK,DRY,RWSRDY>
rk0a: hard error sn3324 er=2000<NXM> ds=4720<SOK,DRY,RWSRDY,SKC>
rk0a: hard error sn3324 er=2000<NXM> ds=4720<SOK,DRY,RWSRDY,SKC>
rk0a: hard error sn3324 er=2000<NXM> ds=4713<SOK,DRY,RWSRDY>
ka6 13624 aps 145542
pc 5767 ps 5767
ov 9
cpuerr 160
trap type 0
panic: trap
syncing disks...

- Stranger still, configuring as a /44 changes the output to:
Hello, world [t37]: 11/44 m9312 rk05 bootstrap

44Boot from rk(0,0,0) at 0177404
:
: rk(0,0,0)unix
Boot: bootdev=03000 bootcsr=0177404

2.11 BSD UNIX #26: Thu Jan 1 19:49:13 PST 2009
    root@curly.2bsd.com:/usr/src/sys/RETRONFPRK


phys mem  = 2097152
avail mem = 1742848
user mem  = 307200

% %e%T init: configure system

dz ? csr 160100 vector 310 skipped:  No CSR.
lp ? csr 177514 vector 200 skipped:  No CSR.
rk 0 csr 177400 vector 220 attached
rl 0 csr 174400 vector 160 attached
tm ? csr 172520 vector 224 skipped:  No CSR.
xp ? csr 176700 vector 254 skipped:  No CSR.
cn 1 csr 176500 vector 300 skipped:  No CSR.
<hangs>

- Even more strange, configuring as /84 gives
autoconfig: missing information on line 12.
January  4 16:45:38 init: SERIOUS CONFIGURATION ERROR

-: 6 Memory fault - core dumped
and a shell after that - but still crashing all over.

dd if=211bsd_rk_root.dsk of=/dev/sdc
dd seek=6144 if=211bsd_rk_swap.dsk of=/dev/sdc
dd seek=12288 if=211bsd_rk_tmp.dsk of=/dev/sdc
dd seek=18432 if=211bsd_rk_bin.dsk of=/dev/sdc
dd seek=24576 if=211bsd_rk_usr.dsk of=/dev/sdc

11/4
- Found rather silly mistake in the rk core, apparently
  I forgot to copy two rather essential lines from the
  read core into the write core. Having to do with copying
  the addresses, incremented by the sdcard state machine
  back into the controller proper - and this very obviously
  causes failures in multsector writes.
  Preliminary tests with rt11 show that disk now mostly
  behaves as expected.
  V5 boots, login ok, c compiler fails "Fatal error in /lib/c1"?
  V6 boots, login ok, can compile c program
  mounting several rk images (4 in distribution) works
  as expected
  RSX rk install image boots to command prompt
- updated several xxdp25 test outputs

Commands to create multiple rk sdcard:
dd if=unix0_v6_rk.dsk of=/dev/sdc
dd seek=6144 if=unix1_v6_rk.dsk of=/dev/sdc
dd seek=12288 if=unix2_v6_rk.dsk of=/dev/sdc
dd seek=18432 if=unix3_v6_rk.dsk of=/dev/sdc


10/14
- Several relatively minor changes to make zrkk run
  without error - or at least without explained errors.
  zrkl however may seem to point to multi sector
  operations still failing, though. Needs research.
- rt-11/mubas - no change.
- rsx3.1 now gives:
  RSX-11M V3.1 BL22   28K
>RED DK0:=SY0:
>RED DK0:=LB0:
>MOU DK0:BASLINE
 *** ...SAV LB0:  -- CHECKPOINT WRITE ERROR
- for rt-11 in general, reading seems ok but there
  still seem to be some issues with writing - at
  least, it seems to crash whenever something like
  a write has occurred.
.DELETE RTBL.MAP
 Files deleted:
DK:RTBL.MAP    ? Y
^C
^
?MON-F-System write error 000000
- Strangely, writing to the rk seems to work fine on
  the rt-11 that comes with mubas?????


10/13
- The rt-11 rk05 with mubas (from bitsavers) boots
  and mubas can be brought up. This is due to the
  latest fix in generating the interrupt for seek
  completion.
- However, rsx3.1 still crashes - maybe caused by
  something else, like the cpu type? 34 and 45
  produce this:
Hello, world [t36]: m9312 rk05 bootstrap



  RSX-11M V3.1 BL22   28K
>RED DK0:=SY0:
>RED DK0:=LB0:
>MOU DK0:BASLINE
>
TASK "...SAV" TERMINATED
T BIT TRAP OR BPT EXECUTION
  PC=017760
  PS=017760
  R0=017760
  R1=017760
  R2=043350
  R3=017144
  R4=017144
  R5=043350
  SP=041150

  while 20 crashes during the mount command.
- Unix v5 also does not yet work.


10/11
- found error in rk disk address to sd card
  address calculator. RSX now issues a couple
  of lines before crashing. But RT-11 WORKS :-)
  (well - it seems to crash on anything besides
  reading the rk, but still that''s way more than
  I ever got rt11 to do)

Hello, world [t36]: m9312 rk05 bootstrap


RT-11SJ  V04.00

.D 56=5015

.TYPE V4USER.TXT
Welcome to RT-11 Version 4. RT-11 V04 provides new hardware support
and some major enhancements over Version 3B.

Please use the HELP command;  it describes the new options in many
of the utilities.

If you are using a terminal that requires fill characters,
modify location 56 with a Deposit command before proceeding with
system installation. LA36 DECwriter II and VT52 DECscope terminals
do NOT require such modification.


.D 56=0

.


10/10
- found the major issue in the controller
  not working at all - I had forgotten to
  generate the npr signal to the cpu, so
  the main controller logic would never
  kick off. Now the controller is back
  to just not working correctly, instead
  of not working at all :-)
  Fixing some of the bugs, already, with
  the help of zrkk :-)


10/9
- working late - loud party at the neighbors.
  rk11 controller is proving troublesome - I
  don't have a clue what is going on with it,
  but the summary seems to be that it just does
  not want to work.


10/8
- minor changes after a hard night of training
  in the gym. Several times confused about which
  core is actually compiled - it seems that
  Quartus is doing the wrong thing if a module
  is changed, but all names inside it are
  the same. As in my case, if I exchange a
  blockram. Then again, it may also be that I so
  completely screwed up the rk11 controller that
  it makes no difference at all what Quartus
  comes up with ;-) At least, after I got suspicious
  of the above, and corrected some of the cabling,
  recompiled, everything did not work as expected
  either. Well. Let's blame it on climbing too
  hard.
  Anyway. Did done some changes, rk11 now
  passes the zrkj tests without errors. Good
  enough for today.


10/7
- after rebuilding my main workstation,
  I'm restarting the rk effort. Latest
  improvements come from having enabled
  rl11 and rk11 to work at the same time.
  Curiously, I've not been able to see the
  sddebug signals from the rk - must be
  a stupid error, but I can't find it.
  Good news however is that the zrk???
  series of tests are usable, and the
  sources remain. Working through those
  seems a valid way forward.


8/22
- still typing on the rk11 implementation,
  read and write now working at a bare
  minimum. rsx11 rk issues a first
  message, then crashes. rt11, unixv5
  crash before any terminal movement.


8/12
- started typing on the rk11 implementation


8/3
- implemented the psw bit model filter in the
  cpu, basically on the assumption that that
  would fix the last set of issues in gkab
  for 11/04. Doesnt... apparently, the gkab
  test that now fails has something to do
  with the order in which an interrupt?
  is executed, after having cleared the psw?
  if the next is a trap insn.


8/2
- changed mmu back to the most integrated version -
  that means, one single source. First run
  passes all 11/44 tests.
- several minor changes to enable gkab 11/04
  test to run. gkaa ran faultlessly already -
  and also does when configured as a '44.
- Changes verified against gkaa/b, fkaa/b/c,
  fkth, kkaa/b, kkta/b/ua, kfpa.


5/25
- bothered by intermittent errors that I cannot
  find the source of.
  Nevertheless found one serious one; when changing
  the trap sequence to correctly select the stack
  specified by the psw mode in the new psw, also
  introduced the mistake of fetching the new pc from
  the space that that psw points to - which obviously
  should have been kernel space instead. The impact of
  this error is only directly visible in all flavours
  of unix - they all break.


5/22
- done regressions... and as far as I can see,
  applied the same changes as before. However,
  for deeply mysterious reasons, quartus now
  sees fit to put part of the mmu registers into
  ram structures, which I don't think it did before.
  Anyway, the symptom that before occurred and killed
  the kkua test, now does not reappear. Apparently.
  I'm sure there is an error I made that triggered
  all this, but which?


5/20
- After all of the mysterious errors of yesterday
  evening, eventually reverted to the first
  version that passed kkua. That now passes again...
  not sure if it will do so consistently, though.
  Anyway, time to do some regression testing first.

5/19
- kkua now passes flawlessly
- 11/45 tested, rsx11 autoconf:

>@sysgen
>;
>; RSX-11M V4.0 BL32   System Generation PHASE I -- version 1.53
>;
>; 29-DEC-81 17:00:15
>; RL01 distribution kit
>;
>*  1. Autoconfigure the host system hardware? [Y/N]: y
>INS $ACF.BSL
>INS $ACO
>ACF
>ACO SHOW
Processor Type:  11/45          Memory Size:  124. Kw

Options:

        Floating Point Processor (FP11)
        Extended Instruction Set (EIS)
        Switch Register (SWR)
        Display Register

Name    Vector     CSR      Unit    Type      Remark
DLA      160      174400
                             0      RL01
                             1      RL01
                             2      RL01
                             3      RL01
YLA      060      177560

>ACO SYSGEN
>REM ACF
>REM ACO
>*  2. Do you want to override Autoconfigure results? [Y/N]:

- However, with that positive note, the good news
  ends. After reaching kkua, updated the board
  specific core for s3board, to see if the s3board
  was (as I suspected for a long time) sensitive
  - or rather more than de1 and de270 - to timing
  issues in the memory interface. Apparently this
  is indeed so, because after updating the core
  to the 8-cycle model that de270 uses, also
  s3board now suddenly passes all floating
  point tests - which it has never done before. And,
  also, apparently it now consistently passes the
  floating point tests... but, it does not really
  seem to like the newer core, like 22-bit mmu and
  unibus map. Also, there remain several issues in
  the current mmu core... At least, after the jobbie
  on the s3board core, it seemed that all tests that
  before ran succesfully now start failing again. Time
  to go to sleep, apparently.


5/18
- after rather tiring debug sessions yesterday
  and tonight finally found the major problem in
  the unibus map... selecting the wrong bus
  when reading back the result into the mmu
  backplane. That took a lot of time... but
  the rest of the errors seem a lot more
  understandable.


5/16
- reworked 'backplane' vhdl to allow for 22-bits
  bus, to allow for the unibus map.

>@sysgen
>;
>; RSX-11M V4.0 BL32   System Generation PHASE I -- version 1.53
>;
>; 29-DEC-81 17:00:14
>; RL01 distribution kit
>;
>*  1. Autoconfigure the host system hardware? [Y/N]: y
>INS $ACF.BSL
>INS $ACO
>ACF
>ACO SHOW
Processor Type:  11/44          Memory Size:  1024. Kw

Options:

        Floating Point Processor (FP11)
        Extended Instruction Set (EIS)
        Extended (22-Bit) Addressing
        Switch Register (SWR)
        Display Register
        Cache Memory
        Parity Memory

Name    Vector     CSR      Unit    Type      Remark
DLA      160      174400
                             0      RL02
                             1      RL02
                             2      RL02
                             3      RL02
YLA      060      177560

>ACO SYSGEN
>REM ACF
>REM ACO
>*  2. Do you want to override Autoconfigure results? [Y/N]:

5/16
- unibus map still not working correctly,
  but not clear why. Still, the last
  not sr1 related problem reported by kkta
  disappeared.


5/15
- started implementation of the unibus map;
  added the mapping registers etc.


5/14
- fixed semi-permanently set cer_iobto bit in
  cer; this proved to be the final remaining
  issue that prevented kkab to pass without
  error messages. Also, one of the other
  fixes done last week causes the rsx11m40
  sysgen autoconfiguration to correctly
  identify a '44.

>@sysgen
>;
>; RSX-11M V4.0 BL32   System Generation PHASE I -- version 1.53
>;
>; 29-DEC-81 17:00:24
>; RL01 distribution kit
>;
>*  1. Autoconfigure the host system hardware? [Y/N]: y
>INS $ACF.BSL
>INS $ACO
>ACF
>ACO SHOW
Processor Type:  11/44          Memory Size:  124. Kw

Options:

        Floating Point Processor (FP11)
        Extended Instruction Set (EIS)
        Switch Register (SWR)
        Display Register
        Cache Memory

Name    Vector     CSR      Unit    Type      Remark
DLA      160      174400
                             0      RL02
                             1      RL02
                             2      RL02
                             3      RL02
YLA      060      177560

>ACO SYSGEN
>REM ACF
>REM ACO
>*  2. Do you want to override Autoconfigure results? [Y/N]:


5/11
- no progress whatsoever on the pdp11, but moved
  to the new cvs on the new server. Noticably
  faster :-)


5/10
- fixed minor issues in kkab, caused by different
  layout of cer in 11/44. Also fixed issue caused
  by 44 not using changed psw priority field immediately
  upon a write to the psw location, but only after
  the next instruction fetch; ie. if an interrupt
  is pending, and the priority is lowered so that
  it would become enabled, the next instruction
  is still fetched before the interrupt is dealt
  with. After that, one issue remains in kkab,
  which seems to be triggered by what seems to
  be wrong behaviour of the cer_iobto bit in cer;
  it looks like this bit is always set...


5/9
- fixed remaining problem in csm insn detected by
  kktb; needed to set the i/d switches correctly
  to select the d space for stack pushing. kktb
  now passes flawlessly
- fixed (again) a problem in div, where when the
  v flag is set because of an overflow, the old
  behaviour of copying the z flag from the previous
  psw was again apparently incorrect. with this
  fix, now passing kkaa, while not breaking
  fkac as earlier changes to this core did.


5/8
- started implementing the csm instruction


5/6
- discovered - more or less by accident - that
  rsx11m has started to work. At least when configured
  as a 11/34, the disk set contained in rsx11m40.zip
  can be used to do a sysgen. Autoconfiguration
  during the sysgen even correctly identifies the
  hardware!


5/1
- some minor changes and fkth now passes without
  errors. 11/34 tests now passing are: ffpa, ffpb,
  ffpc, fkaa, fkab, fkac, fkth. That seems to leave
  only fktg - but it is unclear what it's output
  should be, it currently throws out a lot of what
  could be test output; and fkka, which is a cache
  diagnostic.


4/29
- trying to understand the last error from fkth
  besides maint mode. Which will come somewhat
  later, maybe even tomorrow. If even only to
  get rid of all fkth errors. Done ;-)


4/28
- fixing tests in fkth, esp. odd aborts overriding
  mmu aborts took a long time...


4/27
- continuing work on mmu configurability,
  fixed double error test in fkth. This specific
  expected behaviour in 11/34 gives rise to the
  question why the wait states between src3a and
  dst were ever implemented, as the increment on
  the register should take place in the previous
  state. Fixing that too, for states 3 and 5.
- in the course of working on fkth, also
  changed the red stack trap to no longer
  react to mmu aborts. Whether this is correct
  remains to be seen after regression testing.


4/26
- started making the mmu configurable


4/25
- recoded trap handling to correctly determine
  the stack that should be used acc. psw
  from the trap vector
- minor fixes to make fkab test work


1/21
- various minor fixes to fp11 core, to make
  zkdl - the fp test for j11 - pass. strangely
  several new errors, not detected by any of
  the earlier tests, came out of zkdl. Running
  zkdl was not possible before now, because
  the dummy ccr was not available before 1/20.
- adding support for model code based configuration,
  starting with the mfpt insn
- changed several modules into one for most
  cpu control registers.


1/20
- added dummy cache control register


1/17
- got de2-70 to work, after a major
  struggle with the synchronous sram
  chip. Apparently, most of the really
  confusing problems were caused by forgetting
  to set the gw input to inactive; this
  caused updates to both bytes even if only
  a byte operation was intended. All of this
  basically took from Wed thru Sun to work out...
- strangely, though, xxdp25 cannot figure out
  whether or not it is running on a unibus
  system. Had that before, but not sure why
  it went away. But why does it reappear on the
  de2-70 board? -- Ok, found that one. It is
  because of all the comments I added to
  cpu.vhd during quartus runs, I accidentally
  commented-in the mfpt insn.

1/10
- finalized last changes to modf|modd
  All seems to work now, except for the
  messages:
TEST 22, TESTING INTERRUPTS.
  from ffpb and kfpb. No clue what this
  is yet, though.
  X3B does not work yet; differences between
  X3B and DE1 seem to be limited to the fp
  code.

OS status:
2.11 BSD started working!

>>
Hello, world: cpu t32: m9312-style rl02 bootstrap


45Boot from rl(0,0,0) at 0174400
:
: rl(0,0,0)unix
Boot: bootdev=03400 bootcsr=0174400

2.11 BSD UNIX #0: Thu Feb 29 13:46:44 PST 1996
    sparky@elfje:/vol1/usr/src/sys/SYSTEM


phys mem  = 253952
avail mem = 92736
user mem  = 307200

February 29 15:05:47 init: configure system

rk ? csr 177400 vector 220 skipped:  No CSR.
rl 0 csr 174400 vector 160 attached
erase, kill ^U, intr ^C
-: stty: cannot execute
-: stty: cannot execute
#



1/6
- changed load and state machine for fpao
  type insns; this simplifies the core
  considerably, but there remain some
  errors that were introduced by the
  change, most notably a failure in the
  sign bit for a subf where the src is zero,
  and the stc(f|d)(i|l) insns do not work
  yet.

1/5
- fixed undeflow/overflow for mulf, still
  need to add same approach for divf etc.


1/3/2010
- added divf, having some issues with
  round/trunc, not implemented overflow
  or underflow yet.


12/27
- found problem in cmpf, the secondary
  operand, ie from the ac, did not arrive
  to the falu in time for it to be propagated
  into condition codes before these were
  copied out of the alu. simple solution
  is adding a new state; cmpf was the
  first fsrc type insn with an interesting
  value in the ac operand, but without its own
  follow on state. Probably only cmpf will
  need a dummy follow on state, as all others
  will need the falu_fsm and hence their own
  substate anyway. Still, it is a bit inelegant.
- fixed error in ldcfd, the sense of the D bit
  is reversed as opposed to stcfd.
- fixed error in ldcfd, read full d mode 64
  bits if mode is f, to enable correct
  rounding if bit 31 was set in the source.


12/26
- kfpb made somewhat usable by disabling
  the odd address memory abort, it seems
  that about half of the formatting
  routines in kfpb cause odd addresses.
  output from kfpb is not optimally
  useful, at least in the first two
  examples, problems with the addd insn,
  it is not clear what the problem really
  is.
- found lots of other tests, decided to
  use jfpa/jfpb for now. First few checks
  seem productive :-)
- changed ldfps, set the unused bits 13-12
  to zero.
- fixed autoinc/dec problem in ldcfd
- fixing issues in subd, apparently
  the order - ie what gets subtracted
  from what - was still wrong.


12/21
- added stc(f|d)(i|l), still many errors
  however, some updates to mmu i/d generation
  as well, kfpc downto 56


12/20
- added core for stc(f|d)(d|f)
- added pending fp11 interrupt logic,
  not really happy with how it works
  yet, the code is ugly.
- numerous fixes in neg, tst, ldexp,
  ldc(i|f)(f|d); down to 124 in kfpc
- added stexp, downto 103 in kfpc :-)
- fixed final problem in stc(f|d)(d|f)
  downto 101 in kfpc, most of those
  are stc(f|d)(i|l), mmu, or not yet
  clear. Anyway, made lots of progress
  today.


12/19
- state machine work for the load-convert
  instructions; also alu work for same.
- same for store-convert, stexp. kfpc
  now runs to the end of a pass, with
  172 errors :-)
- load-convert nominally implemented,
  test finds a lot of problems though;
  same for ldexp
- fix for minor issue in ldexp, now
  kfpc runs 167 errors... that's octal


12/18
- tentative fix to some of the abs/neg errors
  reported by kfpc; the flag for the fp11
  core variant for autoincrement/decrement
  was never set for these insns.
- also update sr1, and suppress using the
  fp11 style autoinc/dec when r7 is the index
- fix to actually use the correct dest addr
  on single op fp11 insns
- fixed sequencing errors on single op insns


12/17
- after seemingly trivial change, kfpa works
  without any errors. That is to say, the 6
  or 7 strange and unexplainable errors have
  been solved!
  Issue was that after a add/sub with either
  of the operands zero, the shortcut correctly
  set the output to the nonzero input, but
  the state machine would still be setup
  to the normalize inputs state. Depending
  on the input, this would then cause the
  hardware to stay active for an unspecified
  time, start aligning, adding and normalizing,
  and depending on the timing of the arrival
  of new inputs, screw these up...


8/16
- added sub(f|d), not complete yet. add(f|d)
  also still causes some errors on kfpa


8/13
- been working on fp11, most states needed for
  the major state machine already worked on 8/3,
  some minor fixes to that. Most work however
  since last log went into all possible forms
  that the addf insn needs. Getting there,
  apparently. Good news should be that subf is
  almost the same :-)


8/3
- fp11 test kfpa started producing usable output,
  after some relatively minor fixes: all opcodes
  starting with 17xxxx now use the fp vector 244
  to report illegal op codes and illegal operands.
- earlier problems with stability of both S3B and
  DE0 probably due to toolchain issues beyond
  comprehension; things have started working
  again.


8/2
- fp11 updates; partial implementation of clrf, tstf,
  absf, negf.
- S3B and DE0 now both fail to run almost anything
  except (sometimes) xxdp22. Completely not clear
  why?


8/1
- working on fp11. found at least (last?) that negative
  updates to sr1 were wrong; either -2 or -3
  were set instead of -1 and -2.
- fp11 at this point correctly handles state
  sequencing for arith, load, store insns (or more
  generally, the fp ac and operand group where
  the second operand is of fsrc or fdst form). Also,
  the fp operate insns are processed correctly.
  Missing at this point is the fp single operand
  group.
- Strangely, the current model fails to boot
  xxdp25 on S3B, but runs fine on DE0. That seems
  to be a first... Most other OS fail to run though,
  because of partial implementation of fp11 at this
  point.


7/30
- working on rl11, making the controller zrlg
  compatible


7/23
- rl11 - took out unused state to see if that
  makes a difference in optimization warnings
  --> yes, this solves the warning.


4/8
- Redid interrupt generation, especially from slu
  this had a high likelihood of generating null
  interrupt vectors, and hence branch to zero events.
  Needs some more rework, the current approach does
  not yet allow for daisy-chaining interrupts which
  will be needed when the number of devices grows
  beyond one per level.
- Also disabled interrupt chaining for kw11l and
  rl11 controllers for now; seems to stabilize V7.
  Strangely, V7 consistently crashes on DE1, but
  runs happily on s3board. Need to look into this.

4/2
- found some problems; generation of mmu
  page length abort signal was not correct;
  also byte writes into mmu control registers
  were wrongly implemented.
- As a result, V7 now boots; Ultrix however crashes :-?
  apparently consistently around 14784+17024+8192+8000
  this point.
- Also tried to more consistently apply unsigned
  type casting to comparisons. Not sure if this
  actually helps; the SLU starts giving grief
  after a long period of troublefree working.
  However, this may also be a sign that Quartus is off
  into lalaland again, also after quite some time
  of working great. The Xilinx stuff seems to boot
  Ultrix just fine, and SLU is very responsive so far.
  V7 also quite happily runs on the s3board.


3/30

Sizing Memory...
..
..Boot: rl(0,0)unix    (CTRL/C will abort auto-boot)
..
..Load device (? for help, <RETURN> if none) < ht tm ts tk rx rl rc > ? r\cl
..
..rl(0,0)unix: 14784+17024+8192+8000+8064+8000+8064+8128+8000+7808+7936+7936+768
0+7360+1344
..
..ULTRIX-11 Kernel V3.1
..
..realmem = 253952
..buffers = 25600
..clists  = 1600
..usermem = 94784
..maxumem = 94784
..erase = delete, kill = ^U, intr = ^C
# ls
(crash)

3/29
- added write to rl11, not tested to a point
  that any confidence is warranted but it
  seems to at least write some data :-)
- rt11 crash at a76c is due to a halt. the
  previous instruction is arrived at by a
  jsr pc,@(sp)+ which seems to work correctly,
  only the location a76a to which the jsr
  branches is not loaded.
- rsts upon start insists on 'cleaning disks',
  and that somehow overwrites the boot sector.

3/28
- determined why (at least for now) 2.11bsd will
  not work; it falls over a floating point insn.
  in case, a SETL insn, opcode 170012, at loc
  44304 or 48c4.

3/27
- yesterday spent some time on finding and fixing
  a minor problem in the div insn, according to
  the fkac test for 11/34; two test cases numbers
  342, 343 fail; actually these signal the same
  problem: detection of an overflow is off by one.
  Tried to fix, works fine for fkac but the t25
  tests based on czkdjb0 barf all over the place.
  Worked on most of today, no luck and finally
  decided to revert.
- reworked the old core that presets rbus_ix to
  sp before switching to a pdststate, for the
  off-chance that the pdststate might be jsr.
  jsr now has its own precursor state that selects
  the right value into rbus_ix. However, by
  that change, found a major problem: the br_xx
  states also did not select rbus_ix or
  rbus_cpu_mode. This has gone unobserved for a
  long time, because of the jsr doings; because
  of that, the chance that a br_xx state would
  occur but rbus_ix /= "110" were very slight.
- State as of now: xxdp22 and xxdp25 boot fine,
  after xxdp25 problems earlier (those triggered
  looking into the br_xx state issue). Ultrix
  issues the same messages as before, but now
  visibly goes into some kind of timer loop in
  which the wait insn is used; the de1 iwait
  sseg display for address works very nice. V7
  still crashes at the same loc A3D0. RT11 also
  crashes, at A76C.
- RSTS started working!!
Hello, world: cpu t32: m9312-style rl02 bootstrap

�
��

RSTS V7.0-07 llama (DL0)


Option: START

You currently have: JOB MAX = 20, SWAP MAX = 31K.

JOB MAX or SWAP MAX changes? NO

Any memory allocation changes? NO

You currently have crash dump enabled.

Crash dump? NO

DD-MMM-YY? 28-MAR-09
Illegal date : please try again.

DD-MMM-YY? 28-MAR-89
12:00 PM? 01:23
DK0: disabled - no RK: controller
DK1: disabled - no RK: controller
DK2: disabled - no RK: controller
DK3: disabled - no RK: controller
DK4: disabled - no RK: controller
DK5: disabled - no RK: controller
DK6: disabled - no RK: controller
DK7: disabled - no RK: controller
DR0: disabled - no RR: controller
DR1: disabled - no RR: controller
DR2: disabled - no RR: controller
DR3: disabled - no RR: controller
DR4: disabled - no RR: controller
DR5: disabled - no RR: controller
DR6: disabled - no RR: controller
DR7: disabled - no RR: controller
LP0: disabled - no LP0: controller
PR0: disabled - no PR0: controller
PP0: disabled - no PP0: controller
MT0: disabled - no TM: controller
MT1: disabled - no TM: controller
MT2: disabled - no TM: controller
MT3: disabled - no TM: controller
MT4: disabled - no TM: controller
MT5: disabled - no TM: controller
MT6: disabled - no TM: controller
MT7: disabled - no TM: controller
DX0: disabled - no RX0: controller
DX1: disabled - no RX0: controller
DX2: disabled - no RX1: controller
DX3: disabled - no RX1: controller
DX4: disabled - no RX2: controller
DX5: disabled - no RX2: controller
DX6: disabled - no RX3: controller
DX7: disabled - no RX3: controller

35 devices disabled


3/25

- focused on getting kktb/1144 mmu test to work
  with as little unexplained complaining as possible.
  this actually finds several nontrivial errors,
  such as the - previously known - unneeded states
  in modes 6 and 7, which cause a memory access in
  the wrong one of data or insn space. Also, mfpi|d/
  mtpi|d mode 0 was apparently forgotten.
- the obscure case of curr/previous mode both 11
  ie. user for mfpi has been added and verified.
- no real change in os support to report. however,
  xxdp25 boots and runs the d command; yesterday
  the d command crashed consistently.


3/24

-- xxdp25 now boots :-)

Hello, world: cpu t32: m9312-style rl02 bootstrap




BOOTING UP XXDP-XM EXTENDED MONITOR


XXDP-XM EXTENDED MONITOR - XXDP V2.5
REVISION: F0
BOOTED FROM DL0
124KW OF MEMORY


IS THIS A UNIBUS SYSTEM ? (Y/N CR=Y)
UNIBUS SYSTEM

RESTART ADDRESS: 152000
TYPE "H" FOR HELP !

.

- Besides this, not all that much progress :-)
- Theory is that 11/34 mmu tests fail because
  of the mov (sp)+,(sp) instruction somewhere
  in the tty output routines. This would not
  seem to work as intended, since the increment
  is only processed after the start of the states
  that the destination operand cause. This brings
  on the question of how an instruction like
  mov (sp)+,(sp) is supposed to work anyway?
- Made a change to cpu that effects updating
  a source register in mode 2,3,4,5 before
  accessing it as a destination.

- After implementing that, Ultrix starts doing
  a bit more than before:



Sizing Memory...
..
..Boot: rl(0,0)unix    (CTRL/C will abort auto-boot)
..
..Load device (? for help, <RETURN> if none) < ht tm ts tk rx rl rc > ? rl
..
..rl(0,0)unix: 14784+17024+8192+8000+8064+8000+8064+8128+8000+7808+7936+7936+7680+
7360+1344
..
..ULTRIX-11 Kernel V3.1
..
..realmem = 253952
..buffers = 25600
..clists  = 1600
..usermem = 94784
..maxumem = 94784
..

-- Alas, a crash after that. V7 also still crashes.




3/23
- No progress, really. Situation as of
  yesterday unchanged: all OSses complain
  about something with memory management,
  if at all. Except xxdp22, which works
  consistently.
- Several experiments with the tests that xxdp22
  brings get me no closer to what the problem with
  the mmu actually could be. All available tests
  crash or stop, but either that is due to some
  explainable idiosyncracy of the specific machine
  the test is for, or due to the limitations of the
  tests rather than the system-under-test.

Hello, world: cpu t32: m9312-style rl02 bootstrap



CHMDLD0 XXDP+ DL MONITOR
BOOTED VIA UNIT 0
28K UNIBUS SYSTEM

ENTER DATE (DD-MMM-YY): 23-MAR-89

RESTART ADDR: 152010
THIS IS XXDP+.  TYPE "H" OR "H/L" FOR HELP.



3/22
- Significant change: inserting a memory
  access turnaround cycle into the trap
  sequence brings what seems to be a
  minor breaktrough

- xxdp25 now gets to the following message:


FAILURE DETECTED IN MEMORY MANAGEMENT UNIT.
SYSTEM CANNOT COMPLETE BOOT PROCESS.
PLEASE USE XXDP SM BASED DIAGNOSTICS TO
DETERMINE CAUSE OF FAILURE

- xxdp22 seems to work

- rt11 now gives:

?BOOT-U-I/O error

- ultrix:


Sizing Memory...
..
..Boot: rl(0,0)unix    (CTRL/C will abort auto-boot)
..
..
..Trap - bus error
..
..ps = 140351
..pc = 4006
..r0 = 0
..r1 = 24356
..r2 = 100
..r3 = 177676
..r4 = 3
..r5 = 153766
..sp = 157754
..

- V7 still crashes without new messages.



3/19
- some more debugging done. Some structural
  changes on the rl11 code; took out all the
  intermediate registers for the different
  meaning of the dar bits again; now there
  is once more just the dar. First results
  would seem promising, apart from that unix
  no longer gets through the secondary boot,
  and quartus again throws every size spanner
  in the works by at random times refusing
  to produce a working chip. Why remains a
  mystery.

3/18
- spent several days debugging, and finding
  rather obvious mistakes in the new core every
  now and then. Today's gem was better than most,
  the additions to come up with the sector address
  from head, sector, cylinder and disk number lost
  precision somewhere in the addition due to the
  order of the expressions in the statement.
- However, one major milestone is gained: the
  secondary boot prompt from unix now (today) starts
  appearing every now and then. The boot from that
  does not work yet, and I've had some continuing
  problem with nonexistant or minor changes apparently
  messing up the timing of the entire design so it
  is sometimes very hard to be debugging instead
  of chasing toolchain problems.
- The secondary boot problem may very well be due
  to the rl11 not being complete yet. Work for another
  day :-)

>>
Hello, world: cpu t32

t32 m9312-style rl02 bootstrap

Hello, world: cpu t31
  regfile
  full mmu
  psw, cpu error register, stack limit register, csdr, pir on bus
  base isns set
  eis insns
  m[ft]p[di], m[ft]ps, mfpt insns
  tstset, wrtlck insns
  single 50mhz clock

  slu w. input,output,interrupts
  kw11l w. interrupts
  basic rl11
  32 Kbytes core

  t31 is started by rl11 bootstrap


Hello, world: cpu t32

t32 m9312-style rl02 bootstrap

@boot
New Boot, known devices are hp ht rk rl rp tm vt
: rl(0,0)rl2unix

>>

3/13
- forgot to mention yesterday (which seems like
  it should be the 11'th) that for some strange
  peculiar reason, the bootstrap output from the
  t32 code (which is loaded from the m9312 style
  bootrom based at 773000) works fine; however,
  slu output from the booted block is garbled
  in a strange way.
  Another night of debugging finally reveals the
  clue: the indexing into sram goes wrong; byte
  and word addressing is different. The memory
  chips on both boards, ie. de1 and s3board, are
  16 bits wide. When indexing these with a byte
  address, and putting 16 bits in regardless,
  things subtly go wrong.
  A simple bug to fix, though.
  In other words: it works :-) Both boards now
  boot the first sector just fine. Just extending
  the rl11 core should be the next thing, and that
  looks to be simple enough.

3/12
- implemented access to s3board and de1 sram.

3/11
- minor changes to rl11 including at least the
  end condition of the read command. This was
  after all quite essential because the lack of
  it caused the rl11 not to give up the nbr signal,
  hence the cpu could never regain control of the
  bus.
  Code loaded from the bootblock, ie. the first
  256 bytes of an sd card, now run happily. Next
  comes that the controller should be able to read
  more than 1 block of 256 in one command. Which
  would seem a rather trivial update after the
  work already accomplished the last few days.

3/10
- adding the controller part of the rl11. in this
  specific case, that seems to mean everything
  except the sd card interface, as I've been
  happily adding logic all night without even
  touching the board with the sd cards on :-)
  Current version handles the (newly added)
  t30 tests just fine. These tests, by the way,
  are a copy of a boot strap that is modeled after
  an m9312 boot strap. Just so you understand.

3/7
- started at last with the last big work. that is,
  prior to adding floating point to the cpu. In this
  case, I mean adding the rl11 controller, including
  the sd card interface. Some experiments in a much
  smaller setup have proven very useful in gaining
  at least some insight into the sd card interface
  workings. The current idea is to initialize the
  sd card using a state machine, then setting it to
  some kind of idle state. Manipulating the rl11
  registers eventually cause the sd interface to start
  a read or a write, which will effectively move the
  state machine out of idle. When that happens, the
  current plan is to stop the cpu, and making the rl11
  controller bus master.

2/15
- added tests 16 and 17
- fixed minor mmu bug in which mmusr0 was not set
  according to previous mode if previous mode access
  caused an abort.

2/14
- finished mmu trap
- added another mmu test, now up to 13. Test 13
  brings up something interesting: sr1 is updated
  differently than the test expects, because apparently
  the j11 does autoincrement earlier due to pipelining.
  Also, test 13 needs changes because of differences
  in the acf (3 bits in kt11c, 2 in j11).
- fixed bug in mtp(i|d) re updates to sr1
- reinstated mmu blocking bus signals during abort,
  this apparently got lost somewhere during the three-
  state bus experiments.
- mmu tests now upto 15

2/12
- added final 2 tests from czkdjb0 that make sense
  in this context (263, 264)
- as a trial, adding some of the tests from czkdkb0
  but these need substantial modification, since
  the tests use floating point insns which we don't
  have, and also the kdj11 mmu is a 22-bit one.
- w bit in pdr's should not be set on access to mmu
  registers, see KT11C_MaintMan.pdf

2/11
- added red stack trap code, fixed some yellow stuff
  as well. czkdjb0 up to/i 262. Core needed is > 16K,
  expanded genblkram to 32K variant. Verified in
  hardware :-)

2/10
- added czkdjb0 up to/i 252 (some work yesterday)
  all tests working without major problems :-), only
  change necessary to logic was to prevent yellow stack
  trap from triggering a yellow trap itself :-)

2/8
- work is taking lots of time, not been feeling very well but
  better now. cer almost finished, including the actual
  functioning of the bits causing each bit in cer to become
  set. this includes odd parity, illegal halt, nxmem, nxio,
  yellow stack trap. red stack trap still to be done.
  tests from czkdjb0 now up to/i 220.

1/22
- adding cpu error register. One thought here is that the
  total seems to be moving to an 11/93 on steroids. However
  it can also be said that the cer is actually quite useful,
  allows for running more of the original czkdjb0 and thus
  an arguably closer match to the real pdp11's, and 'it will
  not take up that much logic'. Hmm. Maybe the truth is that
  the step to start implementing the sdcard interface for the
  rl11 is a big one.

1/17
- hopefully improved cdc in kw11l between lineclk and cpuclk
- added wait blinkenlight

1/16
- changing wait insn to actually wait instead of locking the cpu

1/15
- adding kw11l, incl. genlineclk, renamed old genlineclk to gensluclk

1/7
- decreased std slu speed to 9600, clock generation was too inaccurate
  at 115200 w/50Mhz crystal. Options are to move to 8 times sampling,
  then accuracy at 115200 should be enough. However, for now 9600 is
  sufficient as well.
- finished some minor issues in slu ao. handling of rxdone bit
- added interrupts and verified rxinterrupt in de1

1/6
- debugged slu with logic analyzer, first
  serious use of logic analyzer :-)
  slu input mostly works

1/5
- first attempt at polled input from slu

1/4
- added xor, enabled t150, t152. Neither of these
  tests destination modes other than 0, seems like
  a rather big omission
- added tstset, wrtlck, t210, t211

1/3
- ash, ashc added
- entered t214, t215 from czkdjb0; tests pass
- s3e starter board also tests ok

1/2
- div passes czkdjb0 t213
  current design (incl. div instruction and eis framework for state sequencer)
  no longer fits in xc3s200; moved to xc3s1000 s3starter board
- mul passes czkdjb0 t212

January 1, 2009
- adding div instruction

12/31
- de1 works again, solution was to reenter the project definition
  in quartus?

12/30
- reset causes init signal to devices on bus
- czkdjb0 entered upto 207, several minor bugs in mmu etc fixed

12/29
- m(f|t)p(i|d) passes current tests
- mfpt instruction added, sets r0=1111 octal currently
- added mfps, mtps

12/26
- added pir
- adding mfp(i|d) instructions

12/25
- czkdjb0 entered upto 172, found several bugs in cpu, esp. branch insns
- de1 board for some completely obscure reason hangs on czkdjb0/tst126, does
  execute all other tests perfectly. isesim and s3starter execute all tests fine.

12/21
- several fixes to the cpu as a result of implementing czkdjb0

12/20
- started implementing czkdjb0, as found in the document 0095_CZKDJB0_KDJ11.
  This test is intended for a J11 cpu, but most tests are usable.

12/18
- added console switch and display register (csdr)
- changed vector width to 9 bit, ie. o'777
- added new level in hierarchy of modules

12/17
- adding interrupt mechanism, incl. trial implementation for SLU

December 14, 2008
- decided the internal unibus model is not viable, and started removing it again.
  CPU : changes made in the cpu core to accommodate the internal unibus will remain,
  the timing model is more elegant even though it does not optimally use all cycles.
  MMU : changed interface signals, unibus style byte flipper retained
  PSW : only changed interface signals
  Blockram : only changed interface signals
  SLU : regenerated source
- removed use of 'Z' signal level

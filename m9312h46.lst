       1                                         .title   M9312 boot roms
       2                                ;
       3                                ;
       4                                ; copied from http://ak6dn.dyndns.org/PDP-11/M9312/ and modified to fit in a single source
       5                                ;
       6                                ; $Revision: 1.5 $
       7                                
       8 174400                         rlcsr     =174400             ; std RL11 csrbase
       9                                
      10 000000                         rlcs      =+0                 ; control/status
      11 000002                         rlba      =+2                 ; bus address
      12 000004                         rlda      =+4                 ; disk address
      13 000006                         rlmp      =+6                 ; multipurpose
      14                                
      15 000004                         cmstat    =2*2                ; get status
      16 000006                         cmseek    =3*2                ; seek
      17 000010                         cmrdhd    =4*2                ; read header
      18 000014                         cmrdda    =6*2                ; read data
      19                                
      20 165564                         diags     =165564             ; console diags phase2 entry
      21                                
      22                                         .asect
      23 173000                                  .=173000
      24                                
      25                                ; --------------------------------------------------
      26                                
      27                                start:
      28 173000    114     104          rlstart: .ascii   "LD"        ; device code (reversed)
      29                                
      30 173002 000176                           .word rkstart-.      ; offset to next boot header
      31                                
      32 173004 000261                  dl0n:    sec                  ; boot std csr, unit zero, no diags
      33 173006 012700  000000          dl0d:    mov   #0,r0          ; boot std csr, unit zero, with diags
      34 173012 012701  174400          dlNr:    mov   #rlcsr,r1      ; boot std csr, unit <R0>
      35 173016 010704                  dlNb:    mov   pc,r4          ; boot csr <R1>, unit <R0>
      36 173020 103064                           bcc   diag           ; br if diags requested
      37 173022 000402                           br    rlgo           ; return to (R4)+2 from diags
      38                                                              ; then skip over pseudo reboot vector
      39                                
      40                                ; --------------------------------------------------
      41                                
      42 173024 173000                  .word 173000                  ; prom start addess @ 24
      43 173026 000340                  .word 340                     ; and priority level @ 26
      44                                
      45                                ; --------------------------------------------------
      46                                
      47 173030 010003                  rlgo:    mov   r0,r3          ; save unit number
      48 173032 000303                           swab  r3             ; unit number in upper byte
      49 173034 010311                           mov   r3,(r1)        ; set unit, NOP cmd
      50                                
      51 173036 012761  000013  000004           mov   #013,rlda(r1)  ; subcmd reset+getstatus
      52 173044 052703  000004                   bis   #cmstat,r3     ; get status cmd (r3lo is 0)
      53 173050 010311                           mov   r3,(r1)        ; execute
      54 173052 105711                  1$:      tstb  (r1)           ; test for ready
      55 173054 100376                           bpl   1$             ; wait
      56                                
      57 173056 105003                           clrb  r3             ; unit number in upper byte
      58 173060 052703  000010                   bis   #cmrdhd,r3     ; read header cmd
      59 173064 010311                           mov   r3,(r1)        ; execute
      60 173066 105711                  2$:      tstb  (r1)           ; test for ready
      61 173070 100376                           bpl   2$             ; wait
      62                                
      63 173072 016102  000006                   mov   rlmp(r1),r2    ; retrieve cyl/head/sector
      64 173076 042702  000077                   bic   #77,r2         ; set sector to zero
      65 173102 005202                           inc   r2             ; set head 0, seek to cyl 0
      66 173104 010261  000004                   mov   r2,rlda(r1)    ; into da for seek
      67 173110 105003                           clrb  r3             ; unit number in upper byte
      68 173112 052703  000006                   bis   #cmseek,r3     ; seek cmd
      69 173116 010311                           mov   r3,(r1)        ; execute
      70 173120 105711                  3$:      tstb  (r1)           ; test for ready
      71 173122 100376                           bpl   3$             ; wait
      72                                
      73 173124 005061  000004                   clr   rlda(r1)       ; select cyl0/head0/sector0
      74 173130 012761  177000  000006           mov   #-512.,rlmp(r1)      ; set word count
      75 173136 105003                           clrb  r3             ; unit number in upper byte
      76 173140 052703  000014                   bis   #cmrdda,r3     ; read data cmd
      77 173144 010311                           mov   r3,(r1)        ; execute
      78 173146 105711                  4$:      tstb  (r1)           ; test for ready
      79 173150 100376                           bpl   4$             ; wait
      80                                
      81 173152 005711                           tst   (r1)           ; test for error
      82 173154 100003                           bpl   5$             ; br if ok
      83 173156 000005                           reset                ; ERROR - reset the world
      84 173160 000164  000002                   jmp   2(r4)          ; retry
      85                                
      86 173164 042711  000377          5$:      bic   #377,(r1)      ; execute nop cmd
      87 173170 005007                           clr   pc             ; jump to bootstrap at zero
      88                                
      89                                ; --------------------------------------------------
      90                                
      91 173172 000137  165564          diag:    jmp   @#diags        ; jump to console diags
      92                                
      93                                
      94                                ; --------------------------------------------------
      95                                ; 2nd rom
      96                                ; --------------------------------------------------
      97                                
      98 173200                                  .=173200
      99                                
     100 177400                         rkcsr    =177400              ; std RK03/05 DECdisk csrbase
     101                                
     102 000002                         rkwc     =+6-4                ; word count
     103 000006                         rkda     =+12-4               ; disk address
     104                                
     105 177340                         tccsr    =177340              ; std TU55/56 DECtape csrbase
     106                                
     107 177776                         tccs     =+0-2                ; control/status
     108 000002                         tcwc     =+4-2                ; word count
     109                                
     110 000002                         xxwc     =rkwc                ; common word count offset
     111                                
     112 165564                         diags    =165564              ; console diags phase2 entry
     113                                
     114                                
     115 173200    113     104          rkstart: .ascii   "KD"        ; device code (reversed)
     116                                
     117 173202 000026                           .word dtstart-.      ; offset to next boot header
     118                                
     119 173204 000261                  dk0n:    sec                  ; boot std csr, unit zero, no diags
     120 173206 012700  000000          dk0d:    mov   #0,r0          ; boot std csr, unit zero, with diags
     121 173212 012701  177404          dkNr:    mov   #rkcsr+4,r1    ; boot std csr, unit <R0>
     122 173216 010704                  dkNb:    mov   pc,r4          ; boot csr <R1>, unit <R0>
     123 173220 103364                           bcc   diag           ; br if diags requested
     124 173222 000426                           br    disk           ; return to (R4)+2 from diags
     125                                                              ; then skip over pseudo reboot vector
     126                                
     127                                ; --------------------------------------------------
     128                                
     129 173224 173000                           .word 173000         ; prom start addess @ 24
     130 173226 000340                           .word 340            ; and priority level @ 26
     131                                
     132                                ; --------------------------------------------------
     133                                
     134 173230    124     104          dtstart: .ascii   "TD"        ; device code (reversed)
     135                                
     136 173232 000146                     .word rpstart-.            ; offset to next boot header
     137                                
     138 173234 000261                  dt0n:    sec                  ; boot std csr, unit zero, no diags
     139 173236 012700  000000          dt0d:    mov   #0,r0          ; boot std csr, unit zero, with diags
     140 173242 012701  177342          dtNr:    mov   #tccsr+2,r1    ; boot std csr, unit <R0>
     141 173246 010704                  dtNb:    mov   pc,r4          ; boot csr <R1>, unit <R0>
     142 173250 103350                           bcc   diag           ; br if diags requested
     143                                                              ; return to (R4)+2 from diags
     144                                                              ; then skip over pseudo reboot vector
     145                                
     146 173252 010003                  tape:    mov   r0,r3          ; get unit number
     147 173254 000303                           swab  r3             ; into high byte
     148 173256 010311                           mov   r3,(r1)        ; store in controller
     149 173260 052711  004003                   bis   #4003,(r1)     ; set REVERSE and RNUM+GO
     150 173264 005711                  1$:      tst   (r1)           ; test error bit
     151 173266 100376                           bpl   1$             ; loop until error set (at BOT)
     152                                
     153 173270 005761  177776                   tst   tccs(r1)       ; read control/status
     154 173274 010311                           mov   r3,(r1)        ; set unit number in controller
     155 173276 000410                           br common            ; continue
     156                                
     157 173300 010003                  disk:    mov   r0,r3          ; get unit number
     158 173302 000241                           clc                  ; C=0 for ror
     159 173304 006003                           ror   r3             ; shift into 15:12
     160 173306 006003                           ror   r3             ;
     161 173310 006003                           ror   r3             ;
     162 173312 006003                           ror   r3             ;
     163 173314 010361  000006                   mov   r3,rkda(r1)    ; unit number, sector 0 to disk addr
     164                                
     165 173320 012761  177000  000002  common:  mov   #-512.,xxwc(r1)   ; set word count
     166 173326 052703  000005                   bis   #5,r3          ; command READ+GO
     167 173332 010311                           mov   r3,(r1)        ; execute
     168 173334 105711                  2$:      tstb  (r1)           ; test ready
     169 173336 100376                           bpl   2$             ; loop
     170                                
     171 173340 005711                           tst   (r1)           ; check error
     172 173342 100003                           bpl   3$             ; br if no error
     173                                
     174 173344 000005                           reset                ; reset the world
     175 173346 000164  000002                   jmp   2(r4)          ; and retry
     176                                
     177 173352 042711  000377          3$:      bic   #377,(r1)      ; nop command
     178 173356 005007                           clr   pc             ; jump to loaded boot sector
     179                                
     180                                
     181 173360 000261                  dk2n:    sec                  ; boot std csr, unit two, no diags
     182 173362 012700  000002          dk2d:    mov   #2,r0          ; boot std csr, unit two, with diags
     183 173366 000711                           br dkNr              ; continue
     184                                
     185                                
     186                                ; --------------------------------------------------
     187                                ; 3rd rom
     188                                ; --------------------------------------------------
     189                                
     190 173400                                  .=173400
     191                                         
     192 176714                         rpcsr    =176714              ; std RP11-C csrbase 
     193                                .if      df    altrmcsr
     194                                rmcsr    =176300              ; alt RH11 csrbase [match J.West .bin]
     195                                .iff
     196 176700                         rmcsr    =176700              ; std RH11 csrbase
     197                                .endc
     198                                
     199 000000                         rpcs  =+0                     ; control status offset
     200 000002                         rpwc  =+2                     ; word count offset
     201 000004                         rpba  =+4                     ; bus addr offset
     202 000010                         rpcs2 =+10                    ; control status 2 offset
     203 000016                         rpas  =+16                    ; atten summary offset
     204 000032                         rpof  =+32                    ; offset register offset
     205 165564                         diags =165564                 ; console diags phase2 entry
     206                                
     207 173400    120     104          rpstart: .ascii   "PD"        ; device code (reversed)
     208                                
     209 173402 000042                           .word rp2start-.     ; offset to next boot header
     210                                
     211 173404 000261                  dp0n:    sec                  ; boot std csr, unit zero, no diags
     212 173406 012700  000000          dp0d:    mov   #0,r0          ; boot std csr, unit zero, with diags
     213 173412 012701  176714          dpNr:    mov   #rpcsr,r1      ; boot std csr, unit <R0>
     214 173416 010704                  dpNb:    mov   pc,r4          ; boot csr <R1>, unit <R0>
     215 173420 103264                           bcc   diag           ; br if diags requested
     216 173422 000402                           br    rpgo           ; return to (R4)+2 from diags
     217                                                              ; then skip over pseudo reboot vector
     218                                
     219                                ; --------------------------------------------------
     220                                
     221 173424 173000                           .word 173000         ; prom start addess @ 24
     222 173426 000340                           .word 340            ; and priority level @ 26
     223                                
     224                                ; --------------------------------------------------
     225                                
     226 173430 010003                  rpgo:    mov   r0,r3          ; copy unit number
     227 173432 000303                           swab  r3             ; into upper byte
     228 173434 010311                           mov   r3,(r1)        ; store into controller
     229 173436 012702  000005                   mov   #5,r2          ; READ+GO command code
     230 173442 000425                           br bootrp            ; continue
     231                                
     232                                ; ----------------------------------------
     233                                
     234                                .if df altrmcsr
     235                                rp2start: .ascii   "RD"       ; device code (reversed) [match J.West .bin]
     236                                .iff
     237 173444    102     104          rp2start: .ascii   "BD"       ; device code (reversed)
     238                                .endc
     239                                
     240 173446 000132                           .word zzstart-.      ; offset to next boot header
     241                                
     242 173450 000261                  db0n:    sec                  ; boot std csr, unit zero, no diags
     243 173452 012700  000000          db0d:    mov   #0,r0          ; boot std csr, unit zero, with diags
     244 173456 012701  176700          dbNr:    mov   #rmcsr,r1      ; boot std csr, unit <R0>
     245 173462 010704                  dbNb:    mov   pc,r4          ; boot csr <R1>, unit <R0>
     246 173464 103242                           bcc   diag           ; br if diags requested
     247                                
     248                                ; ----------------------------------------
     249                                
     250 173466 010061  000010                   mov   r0,rpcs2(r1)   ; set unit number into controller
     251 173472 012702  000071                   mov   #071,r2        ; READ+GO command code
     252 173476 012711  000021                   mov   #021,(r1)      ; RIP+GO command
     253 173502 012761  014000  000032           mov   #014000,rpof(r1)  ; set 16b mode, inhibit ECC mode
     254 173510 016161  000016  000016           mov   rpas(r1),rpas(r1) ; clear attention bits
     255                                
     256 173516 012761  177000  000002  bootrp:  mov   #-512.,rpwc(r1)      ; set word count
     257 173524 011103                           mov   (r1),r3        ; get unit number
     258 173526 042703  000377                   bic   #377,r3        ; clear command byte
     259 173532 050203                           bis   r2,r3          ; insert read command code
     260 173534 010311                           mov   r3,(r1)        ; execute read command
     261 173536 105711                  2$:      tstb  (r1)           ; test unit ready
     262 173540 100376                           bpl   2$             ; br if not yet
     263                                
     264 173542 005711                           tst   (r1)           ; test any error
     265 173544 100003                           bpl   3$             ; br if not
     266                                
     267 173546 000005                           reset                ; error, reset the world
     268 173550 000164  000002                   jmp   2(r4)          ; and jump back to restart
     269                                
     270 173554 042711  000377          3$:      bic   #377,(r1)      ; nop command, clear controller
     271 173560 005007                           clr   pc             ; jump to bootstrap start
     272                                
     273 173562 000261                  dp1n:    sec                  ; boot std csr, unit one, no diags
     274 173564 012700  000001          dp1d:    mov   #1,r0          ; boot std csr, unit one, with diags
     275 173570 000710                           br dpNr              ; continue
     276                                
     277                                
     278                                ; --------------------------------------------------
     279                                ; 4th rom
     280                                ; --------------------------------------------------
     281                                
     282 173600                                  .=173600
     283                                
     284 165564                         diags    =165564              ; ph2 diags, ret to 2(R4), temp R2,R3,R5,SP
     285 165430                         prtoct   =165430              ; print octal in R0, ret to 2(R1), temp R2,R3
     286 165500                         prteol   =165500              ; print EOL, ret to 2(R1), temp R2,R3
     287 165540                         txchar   =165540              ; print char in R2, ret to 2(R3)
     288                                
     289 173600    132     132          zzstart: .ascii   "ZZ"        ; device code (reversed)
     290 173602 000176                           .word last-.         ; offset to next boot header
     291                                
     292 173604 000261                  zz0n:    sec                  ; boot std csr, unit zero, no diags
     293 173606 012700  000000          zz0d:    mov   #0,r0          ; boot std csr, unit zero, with diags [NOTUSED]
     294 173612 012701  000000          zzNr:    mov   #0,r1          ; boot std csr, unit <R0> [NOTUSED]
     295 173616 010704                  zzNb:    mov   pc,r4          ; boot csr <R1>, unit <R0>
     296 173620 103064                           bcc   zzdiag         ; br if diags requested
     297 173622 000402                           br    zzgo           ; return to (R4)+2 from diags
     298                                                              ; then skip over pseudo reboot vector
     299                                
     300                                ; --------------------------------------------------
     301                                
     302 173624 173000                           .word 173000         ; prom start addess @ 24
     303 173626 000340                           .word 340            ; and priority level @ 26
     304                                
     305                                ; --------------------------------------------------
     306                                
     307 173630 010701                  zzgo:    mov   pc,r1          ; setup return address
     308 173632 000455                           br    87$            ; call EOL print
     309                                
     310 173634 005003                  2$:      clr   r3             ; R3=000000 C=0
     311 173636 005203                           inc   r3             ; R3=000001 C=0
     312 173640 005103                           com   r3             ; R3=177776 C=1
     313 173642 006203                           asr   r3             ; R3=177777 C=0
     314 173644 006303                           asl   r3             ; R3=177776 C=1
     315 173646 006003                           ror   r3             ; R3=177777 C=0
     316 173650 005703                           tst   r3             ; R3=177777 C=0
     317 173652 005403                           neg   r3             ; R3=000001 C=1
     318 173654 005303                           dec   r3             ; R3=000000 C=1
     319 173656 005603                           sbc   r3             ; R3=177777 C=1
     320 173660 006103                           rol   r3             ; R3=177777 C=1
     321 173662 005503                           adc   r3             ; R3=000000 C=1
     322 173664 000303                           swab  r3             ; R3=000000 C=0
     323 173666 001377                           bne   .              ; br . if FAIL
     324                                
     325 173670 010704                           mov   pc,r4          ; setup return address
     326 173672 000437                           br    zzdiag         ; call ph2 diagnostics
     327                                
     328 173674 005200                           inc   r0             ; bump pass count
     329 173676 010001                           mov   r0,r1          ;
     330 173700 010102                           mov   r1,r2          ; check some registers
     331 173702 010203                           mov   r2,r3          ;
     332 173704 010304                           mov   r3,r4          ;
     333 173706 010405                           mov   r4,r5          ; save pass count
     334                                
     335 173710 010701                           mov   pc,r1          ; where we are
     336 173712 062701  000032                   add   #30$-.,r1      ; offset to string
     337 173716 112102                  4$:      movb  (r1)+,r2       ; get next char
     338 173720 001403                           beq   5$             ; br if done
     339 173722 010703                           mov   pc,r3          ; setup return address
     340 173724 000414                           br    85$            ; print char in R2
     341 173726 000773                           br    4$             ; loop
     342                                
     343 173730 010701                  5$:      mov   pc,r1          ; setup return address
     344 173732 000413                           br    86$            ; call octal print of R0
     345                                
     346 173734 010701                           mov   pc,r1          ; setup return address
     347 173736 000413                           br    87$            ; call EOL print
     348                                
     349 173740 010500                           mov   r5,r0          ; restore pass count
     350 173742 000734                           br    2$             ; and loop forever
     351                                
     352                                   ; --------------------------------------------------
     353                                
     354 173744    105     156     144  30$:     .asciz   "End Pass " ; a message
         173747    040     120     141  
         173752    163     163     040  
         173755    000                  
     355                                
     356 173756 000137  165540          85$:     jmp   @#txchar       ; jump to char print
     357 173762 000137  165430          86$:     jmp   @#prtoct       ; jump to octal print
     358 173766 000137  165500          87$:     jmp   @#prteol       ; jump to EOL print
     359 173772 000137  165564          zzdiag:  jmp   @#diags
     360                                
     361                                   ; --------------------------------------------------
     362                                
     363 174000                                  .=start+1000
     364                                last:
     365                                   .end
     365                                

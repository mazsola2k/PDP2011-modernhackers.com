       1                                         .title test42 - terminal proof of concept code
       2                                
       3                                ;--
       4                                ;-- Copyright (c) 2008-2019 Sytse van Slooten
       5                                ;--
       6                                ;-- Permission is hereby granted to any person obtaining a copy of these VHDL source files and
       7                                ;-- other language source files and associated documentation files ("the materials") to use
       8                                ;-- these materials solely for personal, non-commercial purposes.
       9                                ;-- You are also granted permission to make changes to the materials, on the condition that this
      10                                ;-- copyright notice is retained unchanged.
      11                                ;--
      12                                ;-- The materials are distributed in the hope that they will be useful, but WITHOUT ANY WARRANTY;
      13                                ;-- without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
      14                                ;--
      15                                
      16                                
      17 000000 000167  000774                   jmp t42
      18                                ;         .word 0   ;                    0
      19                                ;         .word 0   ;                    2
      20 000004 000000                           .word 0   ;                    4
      21 000006 000000                           .word 0   ;                    6
      22 000010 000000                           .word 0   ;                   10
      23 000012 000000                           .word 0   ;                   12
      24 000014 000000                           .word 0   ;                   14
      25 000016 000000                           .word 0   ;                   16
      26 000020 000000                           .word 0   ;                   20
      27 000022 000000                           .word 0   ;                   22
      28 000024 000000                           .word 0   ;                   24
      29 000026 000000                           .word 0   ;                   26
      30 000030 000000                           .word 0   ;                   30
      31 000032 000000                           .word 0   ;                   32
      32 000034 000000                           .word 0   ;                   34
      33 000036 000000                           .word 0   ;                   36
      34 000040 000000                           .word 0   ;                   40
      35 000042 000000                           .word 0   ;                   42
      36 000044 000000                           .word 0   ;                   44
      37 000046 000000                           .word 0   ;                   46
      38 000050 000000                           .word 0   ;                   50
      39 000052 000000                           .word 0   ;                   52
      40 000054 000000                           .word 0   ;                   54
      41 000056 000000                           .word 0   ;                   56
      42 000060 000000                           .word 0   ;                   60
      43 000062 000000                           .word 0   ;                   62
      44 000064 000000                           .word 0   ;                   64
      45 000066 000000                           .word 0   ;                   66
      46 000070 000000                           .word 0   ;                   70
      47 000072 000000                           .word 0   ;                   72
      48 000074 000000                           .word 0   ;                   74
      49 000076 000000                           .word 0   ;                   76
      50 000100 000000                           .word 0   ;                  100
      51 000102 000000                           .word 0   ;                  102
      52 000104 000000                           .word 0   ;                  104
      53 000106 000000                           .word 0   ;                  106
      54 000110 000000                           .word 0   ;                  110
      55 000112 000000                           .word 0   ;                  112
      56 000114 000000                           .word 0   ;                  114
      57 000116 000000                           .word 0   ;                  116
      58 000120 000000                           .word 0   ;                  120
      59 000122 000000                           .word 0   ;                  122
      60 000124 000000                           .word 0   ;                  124
      61 000126 000000                           .word 0   ;                  126
      62 000130 000000                           .word 0   ;                  130
      63 000132 000000                           .word 0   ;                  132
      64 000134 000000                           .word 0   ;                  134
      65 000136 000000                           .word 0   ;                  136
      66 000140 000000                           .word 0   ;                  140
      67 000142 000000                           .word 0   ;                  142
      68 000144 000000                           .word 0   ;                  144
      69 000146 000000                           .word 0   ;                  146
      70 000150 000000                           .word 0   ;                  150
      71 000152 000000                           .word 0   ;                  152
      72 000154 000000                           .word 0   ;                  154
      73 000156 000000                           .word 0   ;                  156
      74 000160 000000                           .word 0   ;                  160
      75 000162 000000                           .word 0   ;                  162
      76 000164 000000                           .word 0   ;                  164
      77 000166 000000                           .word 0   ;                  166
      78 000170 000000                           .word 0   ;                  170
      79 000172 000000                           .word 0   ;                  172
      80 000174 000000                           .word 0   ;                  174
      81 000176 000000                           .word 0   ;                  176
      82 000200 000000                           .word 0   ;                  200
      83 000202 000000                           .word 0   ;                  202
      84 000204 000000                           .word 0   ;                  204
      85 000206 000000                           .word 0   ;                  206
      86 000210 000000                           .word 0   ;                  210
      87 000212 000000                           .word 0   ;                  212
      88 000214 000000                           .word 0   ;                  214
      89 000216 000000                           .word 0   ;                  216
      90 000220 000000                           .word 0   ;                  220
      91 000222 000000                           .word 0   ;                  222
      92 000224 000000                           .word 0   ;                  224
      93 000226 000000                           .word 0   ;                  226
      94 000230 000000                           .word 0   ;                  230
      95 000232 000000                           .word 0   ;                  232
      96 000234 000000                           .word 0   ;                  234
      97 000236 000000                           .word 0   ;                  236
      98 000240 000000                           .word 0   ;                  240
      99 000242 000000                           .word 0   ;                  242
     100 000244 000000                           .word 0   ;                  244
     101 000246 000000                           .word 0   ;                  246
     102 000250 000000                           .word 0   ;                  250
     103 000252 000000                           .word 0   ;                  252
     104 000254 000000                           .word 0   ;                  254
     105 000256 000000                           .word 0   ;                  256
     106 000260 000000                           .word 0   ;                  260
     107 000262 000000                           .word 0   ;                  262
     108 000264 000000                           .word 0   ;                  264
     109 000266 000000                           .word 0   ;                  266
     110 000270 000000                           .word 0   ;                  270
     111 000272 000000                           .word 0   ;                  272
     112 000274 000000                           .word 0   ;                  274
     113 000276 000000                           .word 0   ;                  276
     114 000300 000000                           .word 0   ;                  300
     115 000302 000000                           .word 0   ;                  302
     116 000304 000000                           .word 0   ;                  304
     117 000306 000000                           .word 0   ;                  306
     118 000310 000000                           .word 0   ;                  310
     119 000312 000000                           .word 0   ;                  312
     120 000314 000000                           .word 0   ;                  314
     121 000316 000000                           .word 0   ;                  316
     122 000320 000000                           .word 0   ;                  320
     123 000322 000000                           .word 0   ;                  322
     124 000324 000000                           .word 0   ;                  324
     125 000326 000000                           .word 0   ;                  326
     126 000330 000000                           .word 0   ;                  330
     127 000332 000000                           .word 0   ;                  332
     128 000334 000000                           .word 0   ;                  334
     129 000336 000000                           .word 0   ;                  336
     130 000340 000000                           .word 0   ;                  340
     131 000342 000000                           .word 0   ;                  342
     132 000344 000000                           .word 0   ;                  344
     133 000346 000000                           .word 0   ;                  346
     134 000350 000000                           .word 0   ;                  350
     135 000352 000000                           .word 0   ;                  352
     136 000354 000000                           .word 0   ;                  354
     137 000356 000000                           .word 0   ;                  356
     138 000360 000000                           .word 0   ;                  360
     139 000362 000000                           .word 0   ;                  362
     140 000364 000000                           .word 0   ;                  364
     141 000366 000000                           .word 0   ;                  366
     142 000370 000000                           .word 0   ;                  370
     143 000372 000000                           .word 0   ;                  372
     144 000374 000000                           .word 0   ;                  374
     145 000376 000000                           .word 0   ;                  376
     146 000400 000000                           .word 0   ;                  400
     147 000402 000000                           .word 0   ;                  402
     148 000404 000000                           .word 0   ;                  404
     149 000406 000000                           .word 0   ;                  406
     150 000410 000000                           .word 0   ;                  410
     151 000412 000000                           .word 0   ;                  412
     152 000414 000000                           .word 0   ;                  414
     153 000416 000000                           .word 0   ;                  416
     154 000420 000000                           .word 0   ;                  420
     155 000422 000000                           .word 0   ;                  422
     156 000424 000000                           .word 0   ;                  424
     157 000426 000000                           .word 0   ;                  426
     158 000430 000000                           .word 0   ;                  430
     159 000432 000000                           .word 0   ;                  432
     160 000434 000000                           .word 0   ;                  434
     161 000436 000000                           .word 0   ;                  436
     162 000440 000000                           .word 0   ;                  440
     163 000442 000000                           .word 0   ;                  442
     164 000444 000000                           .word 0   ;                  444
     165 000446 000000                           .word 0   ;                  446
     166 000450 000000                           .word 0   ;                  450
     167 000452 000000                           .word 0   ;                  452
     168 000454 000000                           .word 0   ;                  454
     169 000456 000000                           .word 0   ;                  456
     170 000460 000000                           .word 0   ;                  460
     171 000462 000000                           .word 0   ;                  462
     172 000464 000000                           .word 0   ;                  464
     173 000466 000000                           .word 0   ;                  466
     174 000470 000000                           .word 0   ;                  470
     175 000472 000000                           .word 0   ;                  472
     176 000474 000000                           .word 0   ;                  474
     177 000476 000000                           .word 0   ;                  476
     178 000500 000000                           .word 0   ;                  500
     179 000502 000000                           .word 0   ;                  502
     180 000504 000000                           .word 0   ;                  504
     181 000506 000000                           .word 0   ;                  506
     182 000510 000000                           .word 0   ;                  510
     183 000512 000000                           .word 0   ;                  512
     184 000514 000000                           .word 0   ;                  514
     185 000516 000000                           .word 0   ;                  516
     186 000520 000000                           .word 0   ;                  520
     187 000522 000000                           .word 0   ;                  522
     188 000524 000000                           .word 0   ;                  524
     189 000526 000000                           .word 0   ;                  526
     190 000530 000000                           .word 0   ;                  530
     191 000532 000000                           .word 0   ;                  532
     192 000534 000000                           .word 0   ;                  534
     193 000536 000000                           .word 0   ;                  536
     194 000540 000000                           .word 0   ;                  540
     195 000542 000000                           .word 0   ;                  542
     196 000544 000000                           .word 0   ;                  544
     197 000546 000000                           .word 0   ;                  546
     198 000550 000000                           .word 0   ;                  550
     199 000552 000000                           .word 0   ;                  552
     200 000554 000000                           .word 0   ;                  554
     201 000556 000000                           .word 0   ;                  556
     202 000560 000000                           .word 0   ;                  560
     203 000562 000000                           .word 0   ;                  562
     204 000564 000000                           .word 0   ;                  564
     205 000566 000000                           .word 0   ;                  566
     206 000570 000000                           .word 0   ;                  570
     207 000572 000000                           .word 0   ;                  572
     208 000574 000000                           .word 0   ;                  574
     209 000576 000000                           .word 0   ;                  576
     210 000600 000000                           .word 0   ;                  600
     211 000602 000000                           .word 0   ;                  602
     212 000604 000000                           .word 0   ;                  604
     213 000606 000000                           .word 0   ;                  606
     214 000610 000000                           .word 0   ;                  610
     215 000612 000000                           .word 0   ;                  612
     216 000614 000000                           .word 0   ;                  614
     217 000616 000000                           .word 0   ;                  616
     218 000620 000000                           .word 0   ;                  620
     219 000622 000000                           .word 0   ;                  622
     220 000624 000000                           .word 0   ;                  624
     221 000626 000000                           .word 0   ;                  626
     222 000630 000000                           .word 0   ;                  630
     223 000632 000000                           .word 0   ;                  632
     224 000634 000000                           .word 0   ;                  634
     225 000636 000000                           .word 0   ;                  636
     226 000640 000000                           .word 0   ;                  640
     227 000642 000000                           .word 0   ;                  642
     228 000644 000000                           .word 0   ;                  644
     229 000646 000000                           .word 0   ;                  646
     230 000650 000000                           .word 0   ;                  650
     231 000652 000000                           .word 0   ;                  652
     232 000654 000000                           .word 0   ;                  654
     233 000656 000000                           .word 0   ;                  656
     234 000660 000000                           .word 0   ;                  660
     235 000662 000000                           .word 0   ;                  662
     236 000664 000000                           .word 0   ;                  664
     237 000666 000000                           .word 0   ;                  666
     238 000670 000000                           .word 0   ;                  670
     239 000672 000000                           .word 0   ;                  672
     240 000674 000000                           .word 0   ;                  674
     241 000676 000000                           .word 0   ;                  676
     242 000700 000000                           .word 0   ;                  700
     243 000702 000000                           .word 0   ;                  702
     244 000704 000000                           .word 0   ;                  704
     245 000706 000000                           .word 0   ;                  706
     246 000710 000000                           .word 0   ;                  710
     247 000712 000000                           .word 0   ;                  712
     248 000714 000000                           .word 0   ;                  714
     249 000716 000000                           .word 0   ;                  716
     250 000720 000000                           .word 0   ;                  720
     251 000722 000000                           .word 0   ;                  722
     252 000724 000000                           .word 0   ;                  724
     253 000726 000000                           .word 0   ;                  726
     254 000730 000000                           .word 0   ;                  730
     255 000732 000000                           .word 0   ;                  732
     256 000734 000000                           .word 0   ;                  734
     257 000736 000000                           .word 0   ;                  736
     258 000740 000000                           .word 0   ;                  740
     259 000742 000000                           .word 0   ;                  742
     260 000744 000000                           .word 0   ;                  744
     261 000746 000000                           .word 0   ;                  746
     262 000750 000000                           .word 0   ;                  750
     263 000752 000000                           .word 0   ;                  752
     264 000754 000000                           .word 0   ;                  754
     265 000756 000000                           .word 0   ;                  756
     266 000760 000000                           .word 0   ;                  760
     267 000762 000000                           .word 0   ;                  762
     268 000764 000000                           .word 0   ;                  764
     269 000766 000000                           .word 0   ;                  766
     270 000770 000000                           .word 0   ;                  770
     271 000772 000000                           .word 0   ;                  772
     272 000774 000000                           .word 0   ;                  774
     273                                stbot:
     274                                stk:
     275 000776 000000                           .word 0   ;                  776
     276                                ;
     277                                ; misc definitions
     278                                ;
     279 000011                         ht       = 11
     280 000012                         lf       = 12
     281 000015                         cr       = 15
     282 177776                         ps       = 177776
     283 177774                         stklmt   = 177774
     284 177772                         pirq     = 177772
     285                                ;
     286                                ; general purpose register definitions
     287                                ;
     288 000000                         r0       = %0
     289 000001                         r1       = %1
     290 000002                         r2       = %2
     291 000003                         r3       = %3
     292 000004                         r4       = %4
     293 000005                         r5       = %5
     294 000006                         r6       = %6
     295 000007                         r7       = %7
     296 000006                         sp       = %6
     297 000007                         pc       = %7
     298                                ;
     299                                ; start of code
     300                                ;
     301                                t42:
     302 001000 012737  000340  177776           mov #340,@#177776             ; set psw prio to 7 - block interrupts
     303 001006 012706  001000                   mov #1000,sp
     304                                ;
     305                                ; setup buffers
     306                                ;
     307 001012 005067  001522                   clr rcvcons                   ; consume equal produce means buffer empty
     308 001016 005067  001520                   clr rcvprod                   ; receive is what we receive on our slu port
     309 001022 005067  001516                   clr ps2cons                   ; first we consume, then we produce
     310 001026 005067  001514                   clr ps2prod                   ; xmit is what we received from the ps2 port
     311                                ;
     312                                ; setup interrupt vectors
     313                                ;
     314 001032 012737  002210  000060           mov #ivecrcv,@#60
     315 001040 012737  000340  000062           mov #340,@#62
     316 001046 012737  002302  000064           mov #ivecxmt,@#64
     317 001054 012737  000340  000066           mov #340,@#66
     318 001062 012737  002304  000070           mov #ivecps2,@#70
     319 001070 012737  000340  000072           mov #340,@#72
     320 001076 012737  000100  177560           mov #100,@#177560             ; set interrupt enable in slu
     321 001104 012737  000100  150000           mov #100,@#150000
     322                                ;
     323                                ; mainline code
     324                                ;
     325 001112 012737  000000  177776           mov #0,@#177776
     326                                ;
     327                                ; old sh*t
     328                                ;
     329 001120 012703  100000                   mov #100000,r3
     330                                1$:
     331 001124 112723  000040                   movb #40,(r3)+              ; fill the buffer with spaces
     332 001130 020327  106300                   cmp r3,#106300              ; this value is 64. past the end of the visible area, and causes to show if the top line of the next row is off.
     333 001134 001373                           bne 1$
     334                                
     335 001136 012702  002376                   mov #hello,r2
     336 001142 012703  100000                   mov #100000,r3
     337                                2$:
     338 001146 112223                           movb (r2)+,(r3)+
     339 001150 001376                           bne 2$
     340 001152 112743  000040                   movb #40,-(r3)
     341                                
     342 001156 012703  100240                   mov #100240,r3
     343                                4$:
     344 001162 010337  140000                   mov r3,@#140000
     345                                
     346 001166 004767  000342                   jsr pc,ps2getc
     347 001172 020027  000000                   cmp r0,#0
     348 001176 001411                           beq 44$
     349 001200 004767  000526                   jsr pc,ps2xlt
     350 001204 020027  000000                   cmp r0,#0
     351 001210 001404                           beq 44$
     352 001212 010100                           mov r1,r0
     353 001214 110037  177566                   movb r0,@#177566
     354 001220 000760                           br 4$
     355                                ;         br 444$    ; this does local echo
     356                                44$:
     357 001222 004767  000224                   jsr pc,rcvgetc
     358                                
     359 001226 020027  000000                   cmp r0,#0                     ; did we get a character
     360 001232 001753                           beq 4$                        ; zero means no
     361                                
     362 001234 110100                           movb r1,r0
     363 001236 142700  000200                   bicb #200,r0             ; vt is a 7-bit terminal... apparently
     364                                
     365                                444$:
     366 001242 120027  000015                   cmpb r0,#15              ; cr
     367 001246 001017                           bne 6$
     368 001250 012701  100000                   mov #100000,r1
     369                                5$:
     370 001254 062701  000120                   add #120,r1
     371 001260 020103                           cmp r1,r3
     372 001262 003774                           ble 5$
     373 001264 162701  000120                   sub #120,r1
     374 001270 020127  100000                   cmp r1,#100000
     375 001274 002002                           bge 55$
     376 001276 012701  100000                   mov #100000,r1
     377                                55$:
     378 001302 010103                           mov r1,r3
     379 001304 000726                           br 4$
     380                                6$:
     381 001306 004767  000056                   jsr pc,spchar
     382 001312 120027  000000                   cmpb r0,#0
     383 001316 001401                           beq 99$
     384 001320 110023                           movb r0,(r3)+
     385                                99$:
     386 001322 020327  106200                   cmp r3,#106200
     387 001326 002715                           blt 4$
     388 001330 012701  100120                   mov #100120,r1
     389 001334 012702  100000                   mov #100000,r2
     390 001340 012704  106200                   mov #106200,r4
     391                                100$:
     392 001344 012122                           mov (r1)+,(r2)+
     393 001346 020104                           cmp r1,r4
     394 001350 001375                           bne 100$
     395                                101$:
     396 001352 112722  000040                   movb #40,(r2)+
     397 001356 020204                           cmp r2,r4
     398 001360 001374                           bne 101$
     399 001362 012703  106060                   mov #106060,r3
     400                                ;         cmp r0,#12
     401                                ;         beq 4$                        ; if we scrolled for lf, don't redo the last store
     402 001366 000675                           br 4$                         ; done, next round
     403                                ;
     404                                ; spchar - deal with special characters; returns r0=0 if the char has been dealt with, the char itself otherwise. r3 has cursor address, rest must be left intact
     405                                ;
     406                                spchar:
     407 001370 120027  000000                   cmpb r0,#0               ; null
     408 001374 001425                           beq spcnex
     409                                ;
     410 001376 120027  000012                   cmpb r0,#12              ; lf
     411 001402 001004                           bne spcn12
     412 001404 062703  000120                   add #120,r3
     413 001410 005000                           clr r0
     414 001412 000416                           br spcnex
     415                                spcn12:
     416                                ;
     417 001414 120027  000177                   cmpb r0,#177             ; del
     418 001420 001001                           bne spcn177
     419 001422 005000                           clr r0
     420                                spcn177:
     421                                ;
     422 001424 120027  000010                   cmpb r0,#10              ; bs
     423 001430 001007                           bne spcn10
     424 001432 020327  100000                   cmp r3,#100000           ; don't backspace out of buffer
     425 001436 001402                           beq 10$
     426 001440 162703  000001                   sub #1,r3
     427                                10$:
     428 001444 005000                           clr r0
     429 001446 000400                           br spcnex
     430                                spcn10:
     431                                ;
     432                                spcnex:
     433 001450 000207                           rts pc
     434                                ;
     435                                ; rcvgetc - routine to consume a character from the slu rcv buf. Clobbers r0,r1; r0 is nonzero if a character is produced in r1
     436                                ;
     437                                rcvgetc:
     438 001452 012737  000340  177776           mov #340,@#177776             ; disable interrupts
     439 001460 016700  001056                   mov rcvprod,r0                ; get produce pointer in r0
     440 001464 016701  001050                   mov rcvcons,r1                ; get consume pointer in r1
     441 001470 020001                           cmp r0,r1                     ; equal?
     442 001472 001002                           bne 10$                       ; no, continue
     443 001474 005000                           clr r0                        ; equal, signal buffer was empty
     444 001476 000412                           br 90$                        ; goto exit
     445                                10$:
     446 001500 005200                           inc r0                        ; increment produce pointer - we're producing
     447 001502 020027  000120                   cmp r0,#80.                   ; need to wrap?
     448 001506 002401                           blt 20$                       ; no, jump
     449 001510 005000                           clr r0                        ; wrap in buffer
     450                                20$:
     451 001512 010067  001024                   mov r0,rcvprod                ; store updated produce pointer
     452 001516 062700  002550                   add #rcvbuf,r0                ; add address to offset
     453 001522 111001                           movb (r0),r1                  ; load byte into r1; r0 - success flag - is certain to be nonzero after using it as the address
     454                                90$:
     455 001524 012737  000000  177776           mov #0,@#177776
     456 001532 000207                           rts pc
     457                                ;
     458                                ; ps2getc - routine to consume a character from the ps2 rcv buf. Clobbers r0,r1; r0 is nonzero if a character is produced in r1
     459                                ;
     460                                ps2getc:
     461 001534 012737  000340  177776           mov #340,@#177776             ; disable interrupts
     462 001542 016700  001000                   mov ps2prod,r0                ; get produce pointer in r0
     463 001546 016701  000772                   mov ps2cons,r1                ; get consume pointer in r1
     464 001552 020001                           cmp r0,r1                     ; equal?
     465 001554 001002                           bne 10$                       ; no, continue
     466 001556 005000                           clr r0                        ; equal, signal buffer was empty
     467 001560 000412                           br 90$                        ; goto exit
     468                                10$:
     469 001562 005200                           inc r0                        ; increment produce pointer - we're producing
     470 001564 020027  000120                   cmp r0,#80.                   ; need to wrap?
     471 001570 002401                           blt 20$                       ; no, jump
     472 001572 005000                           clr r0                        ; wrap in buffer
     473                                20$:
     474 001574 010067  000746                   mov r0,ps2prod                ; store updated produce pointer
     475 001600 062700  002670                   add #ps2buf,r0                ; add address to offset
     476 001604 111001                           movb (r0),r1                  ; load byte into r1; r0 - success flag - is certain to be nonzero after using it as the address
     477                                90$:
     478 001606 012737  000000  177776           mov #0,@#177776
     479 001614 000207                           rts pc
     480                                ;
     481                                ; ps2xku - routine to maintain status flags for key up events
     482                                ;
     483                                ps2xku:
     484 001616 120027  000024                   cmpb r0,#24                   ; left control
     485 001622 001002                           bne 14$
     486 001624 005067  001164                   clr ps2lc
     487                                14$:
     488 001630 120027  000022                   cmpb r0,#22                   ; left shift
     489 001634 001002                           bne 18$
     490 001636 005067  001154                   clr ps2ls
     491                                18$:
     492 001642 120027  000131                   cmpb r0,#131                  ; right shift
     493 001646 001002                           bne 20$
     494 001650 005067  001144                   clr ps2rs
     495                                20$:
     496 001654 000207                           rts pc
     497                                ;
     498                                ; ps2xkd - routine to maintain status flags for key down events
     499                                ;
     500                                ps2xkd:
     501 001656 120027  000024                   cmpb r0,#24                   ; left control
     502 001662 001004                           bne 14$
     503 001664 012767  000001  001122           mov #1,ps2lc
     504 001672 005000                           clr r0
     505                                14$:
     506 001674 120027  000022                   cmpb r0,#22                   ; left shift
     507 001700 001004                           bne 18$
     508 001702 012767  000001  001106           mov #1,ps2ls
     509 001710 005000                           clr r0
     510                                18$:
     511 001712 120027  000131                   cmpb r0,#131                  ; right shift
     512 001716 001004                           bne 20$
     513 001720 012767  000001  001072           mov #1,ps2rs
     514 001726 005000                           clr r0
     515                                20$:
     516 001730 000207                           rts pc
     517                                ;
     518                                ; ps2xlt - routine to translate ps2 scan code to ascii. Input scancode in r1; output ascii in r1, r0 nonzero if valid
     519                                ;
     520                                ps2xlt:
     521 001732 005767  001052                   tst ps2up                     ; key up flag set?
     522 001736 001415                           beq 10$                       ; no
     523 001740 120127  000340                   cmpb r1,#340                  ; check if the current code is e0
     524 001744 001004                           bne 5$
     525 001746 012767  000001  001036           mov #1,ps2ex                  ; set marker
     526 001754 000513                           br 99$
     527                                5$:
     528 001756 005067  001026                   clr ps2up                     ; clear key up flag
     529 001762 110100                           movb r1,r0                    ; copy code
     530 001764 004767  177626                   jsr pc,ps2xku                 ; process key up events
     531 001770 000505                           br 99$                        ; done - ignore the code
     532                                10$:
     533 001772 005767  001014                   tst ps2ex                     ; extended key code flag set?
     534 001776 001403                           beq 12$                       ; no
     535 002000 005067  001006                   clr ps2ex                     ; clear extended key code flag
     536 002004 000477                           br 99$                        ; ignore the code - for now
     537                                12$:
     538 002006 110100                           movb r1,r0                    ; get input code into r0
     539 002010 120027  000360                   cmpb r0,#360                  ; key up - f0?
     540 002014 001004                           bne 14$                       ; no
     541 002016 012767  000001  000764           mov #1,ps2up                  ; set flag
     542 002024 000467                           br 99$
     543                                14$:
     544 002026 120027  000340                   cmpb r0,#340                  ; extended key - e0?
     545 002032 001004                           bne 16$                       ; no
     546 002034 012767  000001  000750           mov #1,ps2ex                  ; set flag
     547 002042 000460                           br 99$
     548                                16$:
     549 002044 004767  177606                   jsr pc,ps2xkd                 ; process key down status events
     550 002050 120027  000000                   cmpb r0,#0                    ; result?
     551 002054 001001                           bne 18$                       ; no
     552 002056 000452                           br 99$
     553                                18$:
     554 002060 132700  000200                   bitb #200,r0                  ; check if bit is set
     555 002064 001047                           bne 99$                       ; yes, skip rest - don't know what to do with it
     556                                20$:
     557 002066 042700  177600                   bic #177600,r0                ; mask to low 7 bits
     558 002072 005767  000716                   tst ps2lc                     ; left control down?
     559 002076 001417                           beq 60$                       ; no
     560 002100 062700  003022                   add #ps2tb1,r0                ; add base address of translate table
     561 002104 111000                           movb (r0),r0                  ; load byte
     562 002106 105700                           tstb r0                       ; was something nonzero there?
     563 002110 001435                           beq 99$                       ; no - finished
     564 002112 120027  000140                   cmpb r0,#140                  ; lower case a minus one
     565 002116 003432                           ble 99$                       ; below? then no go
     566 002120 120027  000172                   cmpb r0,#172                  ; lower case z
     567 002124 003027                           bgt 99$                       ; over? then no go
     568 002126 162700  000140                   sub #140,r0                   ; controllify
     569 002132 110001                           movb r0,r1                    ; set output
     570 002134 000420                           br 98$
     571                                
     572                                60$:
     573 002136 005767  000654                   tst ps2ls                     ; left shift down?
     574 002142 001006                           bne 70$                       ; yes
     575 002144 005767  000650                   tst ps2rs                     ; right shift down?
     576 002150 001003                           bne 70$                       ; yes
     577                                
     578 002152 062700  003022                   add #ps2tb1,r0                ; add base address of translate table
     579 002156 000402                           br 72$
     580                                70$:
     581 002160 062700  003222                   add #ps2tb2,r0                ; add base address of shifted translate table
     582                                72$:
     583 002164 111000                           movb (r0),r0                  ; load byte
     584 002166 105700                           tstb r0                       ; was something nonzero there?
     585 002170 001405                           beq 99$                       ; no - finished
     586 002172 110001                           movb r0,r1                    ; set output
     587 002174 000400                           br 98$
     588                                
     589                                98$:                                   ; exit path, code translated, make sure r0 is nonzero
     590 002176 005000                           clr r0
     591 002200 005200                           inc r0
     592 002202 000207                           rts pc
     593                                
     594                                99$:                                   ; exit path, no code - make sure r0 is zero
     595 002204 005000                           clr r0
     596 002206 000207                           rts pc
     597                                
     598                                ;
     599                                ; interrupt service routine - receive from slu
     600                                ;
     601                                ivecrcv:
     602 002210 105737  177560                   tstb @#177560                 ; check slu - did we really receive something?
     603 002214 100026                           bpl 90$                       ; positive means ready bit is not set
     604 002216 010046                           mov r0,-(sp)                  ; save r0
     605 002220 010146                           mov r1,-(sp)                  ; save r1
     606                                
     607 002222 016700  000312                   mov rcvcons,r0                ; get consume pointer in r0
     608 002226 016701  000310                   mov rcvprod,r1                ; get produce pointer in r1
     609 002232 005200                           inc r0                        ; increment consume pointer - we're about to consume
     610 002234 020027  000120                   cmp r0,#80.                   ; check for max size of buffer
     611 002240 002401                           blt 20$                       ; less?
     612 002242 005000                           clr r0                        ; if yes, then start at zero
     613                                20$:
     614 002244 020001                           cmp r0,r1                     ; after incrementing consume, produce and consume should not be the same - that would mean a buffer overrun
     615 002246 001407                           beq 80$                       ; skip storing if buffer overrun
     616                                
     617 002250 010067  000264                   mov r0,rcvcons                ; update consume pointer
     618 002254 113701  177562                   movb @#177562,r1              ; copy received character into r1
     619 002260 062700  002550                   add #rcvbuf,r0                ; add base to pointer
     620 002264 110110                           movb r1,(r0)                  ; store into buffer
     621                                
     622                                80$:
     623 002266 012601                           mov (sp)+,r1                  ; restore r1
     624 002270 012600                           mov (sp)+,r0                  ; restore r0
     625                                90$:
     626 002272 012737  000100  177560           mov #100,@#177560             ; make sure interrupt enable is set again
     627 002300 000002                           rti
     628                                
     629                                ;
     630                                ; interrupt service routine - slu xmit
     631                                ;
     632                                ivecxmt:
     633 002302 000002                           rti
     634                                
     635                                ;
     636                                ; interrupt service routine - receive from ps2
     637                                ;
     638                                ivecps2:
     639 002304 105737  150000                   tstb @#150000                 ; check ps2 - did we really receive something?
     640 002310 100026                           bpl 90$                       ; positive means ready bit is not set
     641 002312 010046                           mov r0,-(sp)                  ; save r0
     642 002314 010146                           mov r1,-(sp)                  ; save r1
     643                                
     644 002316 016700  000222                   mov ps2cons,r0                ; get consume pointer in r0
     645 002322 016701  000220                   mov ps2prod,r1                ; get produce pointer in r1
     646 002326 005200                           inc r0                        ; increment consume pointer - we're about to consume
     647 002330 020027  000120                   cmp r0,#80.                   ; check for max size of buffer
     648 002334 002401                           blt 20$                       ; less?
     649 002336 005000                           clr r0                        ; if yes, then start at zero
     650                                20$:
     651 002340 020001                           cmp r0,r1                     ; after incrementing consume, produce and consume should not be the same - that would mean a buffer overrun
     652 002342 001407                           beq 80$                       ; skip storing if buffer overrun
     653                                
     654 002344 010067  000174                   mov r0,ps2cons                ; update consume pointer
     655 002350 113701  150002                   movb @#150002,r1              ; copy received character into r1
     656 002354 062700  002670                   add #ps2buf,r0                ; add base to pointer
     657 002360 110110                           movb r1,(r0)                  ; store into buffer
     658                                
     659                                80$:
     660 002362 012601                           mov (sp)+,r1                  ; restore r1
     661 002364 012600                           mov (sp)+,r0                  ; restore r0
     662                                90$:
     663 002366 012737  000100  150000           mov #100,@#150000             ; make sure interrupt enable is set again
     664 002374 000002                           rti
     665                                
     666 002376    110     145     154  hello:   .asciz /Hello, world: vt-cpu t42                                                                        /
         002401    154     157     054  
         002404    040     167     157  
         002407    162     154     144  
         002412    072     040     166  
         002415    164     055     143  
         002420    160     165     040  
         002423    164     064     062  
         002426    040     040     040  
         002431    040     040     040  
         002434    040     040     040  
         002437    040     040     040  
         002442    040     040     040  
         002445    040     040     040  
         002450    040     040     040  
         002453    040     040     040  
         002456    040     040     040  
         002461    040     040     040  
         002464    040     040     040  
         002467    040     040     040  
         002472    040     040     040  
         002475    040     040     040  
         002500    040     040     040  
         002503    040     040     040  
         002506    040     040     040  
         002511    040     040     040  
         002514    040     040     040  
         002517    040     040     040  
         002522    040     040     040  
         002525    040     040     040  
         002530    040     040     040  
         002533    040     040     040  
         002536    000                  
     667                                
     668 002537    000                           .even
     669                                ;
     670                                ; pointers in circular buffers
     671                                ;
     672 002540 000000                  rcvcons: .word 0
     673 002542 000000                  rcvprod: .word 0
     674 002544 000000                  ps2cons: .word 0
     675 002546 000000                  ps2prod: .word 0
     676                                ;
     677                                ; buffers - each 40 words, ie 80 bytes long
     678                                ;
     679 002550 000000  000000  000000  rcvbuf:  .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
         002556 000000  000000  000000  
         002564 000000  000000  000000  
         002572 000000  000000  000000  
         002600 000000  000000  000000  
         002606 000000  000000  000000  
         002614 000000  000000  000000  
         002622 000000  000000  000000  
         002630 000000  000000  000000  
         002636 000000  000000  000000  
         002644 000000  000000  000000  
         002652 000000  000000  000000  
         002660 000000  000000  000000  
         002666 000000                  
     680 002670 000000  000000  000000  ps2buf:  .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
         002676 000000  000000  000000  
         002704 000000  000000  000000  
         002712 000000  000000  000000  
         002720 000000  000000  000000  
         002726 000000  000000  000000  
         002734 000000  000000  000000  
         002742 000000  000000  000000  
         002750 000000  000000  000000  
         002756 000000  000000  000000  
         002764 000000  000000  000000  
         002772 000000  000000  000000  
         003000 000000  000000  000000  
         003006 000000                  
     681                                ;
     682                                ; data
     683                                ;
     684 003010 000000                  ps2up:   .word 0                       ; nonzero if last scancode was a f0 - key up event
     685 003012 000000                  ps2ex:   .word 0                       ; nonzero if last scancode was a e0 - extended key
     686 003014 000000                  ps2lc:   .word 0                       ; nonzero if left control key is down
     687 003016 000000                  ps2ls:   .word 0                       ; nonzero if left shift key is down
     688 003020 000000                  ps2rs:   .word 0                       ; nonzero if right shift key is down
     689                                ;
     690                                ; ps2 scancode translate table - normal case
     691                                ;
     692                                ps2tb1:
     693 003022    000                           .byte 0                       ; 00 - unused
     694 003023    000                           .byte 0                       ; 01 - f9
     695 003024    000                           .byte 0                       ; 02 -
     696 003025    000                           .byte 0                       ; 03 - f5
     697 003026    000                           .byte 0                       ; 04 - f3
     698 003027    000                           .byte 0                       ; 05 - f1
     699 003030    000                           .byte 0                       ; 06 - f2
     700 003031    000                           .byte 0                       ; 07 - f12
     701 003032    000                           .byte 0                       ; 08 -
     702 003033    000                           .byte 0                       ; 09 - f10
     703 003034    000                           .byte 0                       ; 0a - f8
     704 003035    000                           .byte 0                       ; 0b - f6
     705 003036    000                           .byte 0                       ; 0c - f4
     706 003037    011                           .ascii <11>                   ; 0d - tab
     707 003040    140                           .ascii /`/                    ; 0e - backtick/tilde
     708 003041    000                           .byte 0                       ; 0f -
     709 003042    000                           .byte 0                       ; 10 -
     710 003043    000                           .byte 0                       ; 11 -
     711 003044    000                           .byte 0                       ; 12 -
     712 003045    000                           .byte 0                       ; 13 -
     713 003046    000                           .byte 0                       ; 14 -
     714 003047    161                           .ascii /q/                    ; 15 - q
     715 003050    061                           .ascii /1/                    ; 16 - 1
     716 003051    000                           .byte 0                       ; 17 -
     717 003052    000                           .byte 0                       ; 18 -
     718 003053    000                           .byte 0                       ; 19 -
     719 003054    172                           .ascii /z/                    ; 1a - z
     720 003055    163                           .ascii /s/                    ; 1b - s
     721 003056    141                           .ascii /a/                    ; 1c - a
     722 003057    167                           .ascii /w/                    ; 1d - w
     723 003060    062                           .ascii /2/                    ; 1e - 2
     724 003061    000                           .byte 0                       ; 1f -
     725 003062    000                           .byte 0                       ; 20 -
     726 003063    143                           .ascii /c/                    ; 21 - c
     727 003064    170                           .ascii /x/                    ; 22 - x
     728 003065    144                           .ascii /d/                    ; 23 - d
     729 003066    145                           .ascii /e/                    ; 24 - e
     730 003067    064                           .ascii /4/                    ; 25 - 4
     731 003070    063                           .ascii /3/                    ; 26 - 3
     732 003071    000                           .byte 0                       ; 27 -
     733 003072    000                           .byte 0                       ; 28 -
     734 003073    040                           .ascii / /                    ; 29 - space
     735 003074    166                           .ascii /v/                    ; 2a - v
     736 003075    146                           .ascii /f/                    ; 2b - f
     737 003076    164                           .ascii /t/                    ; 2c - t
     738 003077    162                           .ascii /r/                    ; 2d - r
     739 003100    065                           .ascii /5/                    ; 2e - 5
     740 003101    000                           .byte 0                       ; 2f -
     741 003102    000                           .byte 0                       ; 30 -
     742 003103    156                           .ascii /n/                    ; 31 - n
     743 003104    142                           .ascii /b/                    ; 32 - b
     744 003105    150                           .ascii /h/                    ; 33 - h
     745 003106    147                           .ascii /g/                    ; 34 - g
     746 003107    171                           .ascii /y/                    ; 35 - y
     747 003110    066                           .ascii /6/                    ; 36 - 6
     748 003111    000                           .byte 0                       ; 37 -
     749 003112    000                           .byte 0                       ; 38 -
     750 003113    000                           .byte 0                       ; 39 -
     751 003114    155                           .ascii /m/                    ; 3a - m
     752 003115    152                           .ascii /j/                    ; 3b - j
     753 003116    165                           .ascii /u/                    ; 3c - u
     754 003117    067                           .ascii /7/                    ; 3d - 7
     755 003120    070                           .ascii /8/                    ; 3e - 8
     756 003121    000                           .byte 0                       ; 3f -
     757 003122    000                           .byte 0                       ; 40 -
     758 003123    054                           .ascii /,/                    ; 41 - comma, lt
     759 003124    153                           .ascii /k/                    ; 42 - k
     760 003125    151                           .ascii /i/                    ; 43 - i
     761 003126    157                           .ascii /o/                    ; 44 - o
     762 003127    060                           .ascii /0/                    ; 45 - 0
     763 003130    071                           .ascii /9/                    ; 46 - 9
     764 003131    000                           .byte 0                       ; 47 -
     765 003132    000                           .byte 0                       ; 48 -
     766 003133    056                           .ascii /./                    ; 49 - period, gt
     767 003134    057                           .ascii <57>                   ; 4a - slash, question mark
     768 003135    154                           .ascii /l/                    ; 4b - l
     769 003136    073                           .ascii /;/                    ; 4c - semicolon, colon
     770 003137    160                           .ascii /p/                    ; 4d - p
     771 003140    055                           .ascii /-/                    ; 4e - minus, underscore
     772 003141    000                           .byte 0                       ; 4f -
     773 003142    000                           .byte 0                       ; 50 -
     774 003143    000                           .byte 0                       ; 51 -
     775 003144    047                           .ascii /'/                    ; 52 - quote, double quote
     776 003145    000                           .byte 0                       ; 53 -
     777 003146    133                           .ascii /[/                    ; 54 - left square bracket, left curly bracket
     778 003147    075                           .ascii /=/                    ; 55 - equals, plus
     779 003150    000                           .byte 0                       ; 56 -
     780 003151    000                           .byte 0                       ; 57 -
     781 003152    000                           .byte 0                       ; 58 - caps lock
     782 003153    000                           .byte 0                       ; 59 - right shift
     783 003154    015                           .ascii <15>                   ; 5a - enter
     784 003155    135                           .ascii /]/                    ; 5b - right square bracket, right curly bracket
     785 003156    000                           .byte 0                       ; 5c -
     786 003157    134                           .ascii /\/                    ; 5d - backslash, vertical bar
     787 003160    000                           .byte 0                       ; 5e -
     788 003161    000                           .byte 0                       ; 5f -
     789 003162    000                           .byte 0                       ; 60 -
     790 003163    000                           .byte 0                       ; 61 -
     791 003164    000                           .byte 0                       ; 62 -
     792 003165    000                           .byte 0                       ; 63 -
     793 003166    000                           .byte 0                       ; 64 -
     794 003167    000                           .byte 0                       ; 65 -
     795 003170    177                           .ascii <177>                  ; 66 - backspace - sends del
     796 003171    000                           .byte 0                       ; 67 -
     797 003172    000                           .byte 0                       ; 68 -
     798 003173    000                           .byte 0                       ; 69 -
     799 003174    000                           .byte 0                       ; 6a -
     800 003175    000                           .byte 0                       ; 6b -
     801 003176    000                           .byte 0                       ; 6c -
     802 003177    000                           .byte 0                       ; 6d -
     803 003200    000                           .byte 0                       ; 6e -
     804 003201    000                           .byte 0                       ; 6f -
     805 003202    000                           .byte 0                       ; 70 -
     806 003203    000                           .byte 0                       ; 71 -
     807 003204    000                           .byte 0                       ; 72 -
     808 003205    000                           .byte 0                       ; 73 -
     809 003206    000                           .byte 0                       ; 74 -
     810 003207    000                           .byte 0                       ; 75 -
     811 003210    033                           .ascii <33>                   ; 76 - escape
     812 003211    000                           .byte 0                       ; 77 -
     813 003212    000                           .byte 0                       ; 78 - f11
     814 003213    000                           .byte 0                       ; 79 -
     815 003214    000                           .byte 0                       ; 7a -
     816 003215    000                           .byte 0                       ; 7b -
     817 003216    000                           .byte 0                       ; 7c -
     818 003217    000                           .byte 0                       ; 7d -
     819 003220    000                           .byte 0                       ; 7e -
     820 003221    000                           .byte 0                       ; 7f -
     821                                ;
     822                                ; ps2 scancode translate table - shifted case
     823                                ;
     824                                ps2tb2:
     825 003222    000                           .byte 0                       ; 00 - unused
     826 003223    000                           .byte 0                       ; 01 - f9
     827 003224    000                           .byte 0                       ; 02 -
     828 003225    000                           .byte 0                       ; 03 - f5
     829 003226    000                           .byte 0                       ; 04 - f3
     830 003227    000                           .byte 0                       ; 05 - f1
     831 003230    000                           .byte 0                       ; 06 - f2
     832 003231    000                           .byte 0                       ; 07 - f12
     833 003232    000                           .byte 0                       ; 08 -
     834 003233    000                           .byte 0                       ; 09 - f10
     835 003234    000                           .byte 0                       ; 0a - f8
     836 003235    000                           .byte 0                       ; 0b - f6
     837 003236    000                           .byte 0                       ; 0c - f4
     838 003237    011                           .ascii <11>                   ; 0d - tab
     839 003240    176                           .ascii /~/                    ; 0e - backtick/tilde
     840 003241    000                           .byte 0                       ; 0f -
     841 003242    000                           .byte 0                       ; 10 -
     842 003243    000                           .byte 0                       ; 11 -
     843 003244    000                           .byte 0                       ; 12 -
     844 003245    000                           .byte 0                       ; 13 -
     845 003246    000                           .byte 0                       ; 14 -
     846 003247    121                           .ascii /Q/                    ; 15 - q
     847 003250    041                           .ascii /!/                    ; 16 - 1
     848 003251    000                           .byte 0                       ; 17 -
     849 003252    000                           .byte 0                       ; 18 -
     850 003253    000                           .byte 0                       ; 19 -
     851 003254    132                           .ascii /Z/                    ; 1a - z
     852 003255    123                           .ascii /S/                    ; 1b - s
     853 003256    101                           .ascii /A/                    ; 1c - a
     854 003257    127                           .ascii /W/                    ; 1d - w
     855 003260    100                           .ascii /@/                    ; 1e - 2
     856 003261    000                           .byte 0                       ; 1f -
     857 003262    000                           .byte 0                       ; 20 -
     858 003263    103                           .ascii /C/                    ; 21 - c
     859 003264    130                           .ascii /X/                    ; 22 - x
     860 003265    104                           .ascii /D/                    ; 23 - d
     861 003266    105                           .ascii /E/                    ; 24 - e
     862 003267    044                           .ascii /$/                    ; 25 - 4
     863 003270    043                           .ascii /#/                    ; 26 - 3
     864 003271    000                           .byte 0                       ; 27 -
     865 003272    000                           .byte 0                       ; 28 -
     866 003273    040                           .ascii / /                    ; 29 - space
     867 003274    126                           .ascii /V/                    ; 2a - v
     868 003275    106                           .ascii /F/                    ; 2b - f
     869 003276    124                           .ascii /T/                    ; 2c - t
     870 003277    122                           .ascii /R/                    ; 2d - r
     871 003300    045                           .ascii /%/                    ; 2e - 5
     872 003301    000                           .byte 0                       ; 2f -
     873 003302    000                           .byte 0                       ; 30 -
     874 003303    116                           .ascii /N/                    ; 31 - n
     875 003304    102                           .ascii /B/                    ; 32 - b
     876 003305    110                           .ascii /H/                    ; 33 - h
     877 003306    107                           .ascii /G/                    ; 34 - g
     878 003307    131                           .ascii /Y/                    ; 35 - y
     879 003310    136                           .ascii /^/                    ; 36 - 6
     880 003311    000                           .byte 0                       ; 37 -
     881 003312    000                           .byte 0                       ; 38 -
     882 003313    000                           .byte 0                       ; 39 -
     883 003314    115                           .ascii /M/                    ; 3a - m
     884 003315    112                           .ascii /J/                    ; 3b - j
     885 003316    125                           .ascii /U/                    ; 3c - u
     886 003317    046                           .ascii /&/                    ; 3d - 7
     887 003320    052                           .ascii /*/                    ; 3e - 8
     888 003321    000                           .byte 0                       ; 3f -
     889 003322    000                           .byte 0                       ; 40 -
     890 003323    074                           .ascii /</                    ; 41 - comma, lt
     891 003324    113                           .ascii /K/                    ; 42 - k
     892 003325    111                           .ascii /I/                    ; 43 - i
     893 003326    117                           .ascii /O/                    ; 44 - o
     894 003327    051                           .ascii /)/                    ; 45 - 0
     895 003330    050                           .ascii /(/                    ; 46 - 9
     896 003331    000                           .byte 0                       ; 47 -
     897 003332    000                           .byte 0                       ; 48 -
     898 003333    076                           .ascii />/                    ; 49 - period, gt
     899 003334    077                           .ascii /?/                    ; 4a - slash, question mark
     900 003335    114                           .ascii /L/                    ; 4b - l
     901 003336    072                           .ascii /:/                    ; 4c - semicolon, colon
     902 003337    120                           .ascii /P/                    ; 4d - p
     903 003340    137                           .ascii /_/                    ; 4e - minus, underscore
     904 003341    000                           .byte 0                       ; 4f -
     905 003342    000                           .byte 0                       ; 50 -
     906 003343    000                           .byte 0                       ; 51 -
     907 003344    042                           .ascii /"/                    ; 52 - quote, double quote
     908 003345    000                           .byte 0                       ; 53 -
     909 003346    173                           .ascii /{/                    ; 54 - left square bracket, left curly bracket
     910 003347    053                           .ascii /+/                    ; 55 - equals, plus
     911 003350    000                           .byte 0                       ; 56 -
     912 003351    000                           .byte 0                       ; 57 -
     913 003352    000                           .byte 0                       ; 58 - caps lock
     914 003353    000                           .byte 0                       ; 59 -
     915 003354    015                           .ascii <15>                   ; 5a - enter
     916 003355    175                           .ascii /}/                    ; 5b - right square bracket, right curly bracket
     917 003356    000                           .byte 0                       ; 5c -
     918 003357    174                           .ascii /|/                    ; 5d - backslash, vertical bar
     919 003360    000                           .byte 0                       ; 5e -
     920 003361    000                           .byte 0                       ; 5f -
     921 003362    000                           .byte 0                       ; 60 -
     922 003363    000                           .byte 0                       ; 61 -
     923 003364    000                           .byte 0                       ; 62 -
     924 003365    000                           .byte 0                       ; 63 -
     925 003366    000                           .byte 0                       ; 64 -
     926 003367    000                           .byte 0                       ; 65 -
     927 003370    010                           .ascii <10>                   ; 66 - backspace
     928 003371    000                           .byte 0                       ; 67 -
     929 003372    000                           .byte 0                       ; 68 -
     930 003373    000                           .byte 0                       ; 69 -
     931 003374    000                           .byte 0                       ; 6a -
     932 003375    000                           .byte 0                       ; 6b -
     933 003376    000                           .byte 0                       ; 6c -
     934 003377    000                           .byte 0                       ; 6d -
     935 003400    000                           .byte 0                       ; 6e -
     936 003401    000                           .byte 0                       ; 6f -
     937 003402    000                           .byte 0                       ; 70 -
     938 003403    000                           .byte 0                       ; 71 -
     939 003404    000                           .byte 0                       ; 72 -
     940 003405    000                           .byte 0                       ; 73 -
     941 003406    000                           .byte 0                       ; 74 -
     942 003407    000                           .byte 0                       ; 75 -
     943 003410    033                           .ascii <33>                   ; 76 - escape
     944 003411    000                           .byte 0                       ; 77 -
     945 003412    000                           .byte 0                       ; 78 - f11
     946 003413    000                           .byte 0                       ; 79 -
     947 003414    000                           .byte 0                       ; 7a -
     948 003415    000                           .byte 0                       ; 7b -
     949 003416    000                           .byte 0                       ; 7c -
     950 003417    000                           .byte 0                       ; 7d -
     951 003420    000                           .byte 0                       ; 7e -
     952 003421    000                           .byte 0                       ; 7f -
     952                                

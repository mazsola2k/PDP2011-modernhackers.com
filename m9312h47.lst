       1                                         .title   M9312 boot roms
       2                                ;
       3                                ;
       4                                ; boot code taken from http://ak6dn.dyndns.org/PDP-11/M9312/ and modified to work with m9312l47.mac
       5                                ; which does not include diagnostics, does not use the rom code letters.
       6                                ;
       7                                ; $Revision: 1.3 $
       8                                
       9 000001                         bit0     =000001              ; plain old bit definitions
      10 000002                         bit1     =000002              ;
      11 000004                         bit2     =000004              ;
      12 000010                         bit3     =000010              ;
      13 000020                         bit4     =000020              ;
      14 000040                         bit5     =000040              ;
      15 000100                         bit6     =000100              ;
      16 000200                         bit7     =000200              ;
      17 000400                         bit8     =000400              ;
      18 001000                         bit9     =001000              ;
      19 002000                         bit10    =002000              ;
      20 004000                         bit11    =004000              ;
      21 010000                         bit12    =010000              ;
      22 020000                         bit13    =020000              ;
      23 040000                         bit14    =040000              ;
      24 100000                         bit15    =100000              ;
      25                                
      26 000040                         BL       =040                 ; ascii SPACE
      27 000015                         CR       =015                 ; ascii CR
      28 000012                         LF       =012                 ; ascii LF
      29 000400                         U        =bit8                ; upperbyte multiplier
      30 000001                         L        =bit0                ; lowerbyte multiplier
      31                                
      32                                         .asect
      33 173000                                  .=173000
      34                                ;
      35                                ;
      36                                ;
      37 173000 000137  173014                   jmp   @#boot         ; 173000
      38 173004 000137  173566                   jmp   @#prtoct       ; 173004
      39                                bprtascz:
      40 173010 000137  173542                   jmp   @#prtascz      ; 173010
      41                                ;
      42                                ; boot: boot from first controller that exists in the system out of rk,rl,rh
      43                                ;
      44                                boot:
      45 173014 012706  001000                   mov   #1000,sp
      46 173020 005037  000006                   clr   @#6
      47 173024 012737  173062  000004           mov   #nork,@#4
      48 173032 005737  177400                   tst   @#177400
      49 173036 012702  173636                   mov   #bootrk,r2
      50 173042 010701                           mov   pc,r1
      51 173044 000761                           br    bprtascz
      52 173046 005037  000004                   clr   @#4
      53 173052 005037  000006                   clr   @#6
      54 173056 005000                           clr   r0
      55 173060 000536                           br    rkgo
      56                                ;
      57                                nork:
      58 173062 012706  001000                   mov   #1000,sp
      59 173066 005037  000006                   clr   @#6
      60 173072 012737  173130  000004           mov   #norl,@#4
      61 173100 005737  174400                   tst   @#174400
      62 173104 012702  173660                   mov   #bootrl,r2
      63 173110 010701                           mov   pc,r1
      64 173112 000736                           br    bprtascz
      65 173114 005037  000004                   clr   @#4
      66 173120 005037  000006                   clr   @#6
      67 173124 005000                           clr   r0
      68 173126 000430                           br    rlgo
      69                                ;
      70                                norl:
      71 173130 012706  001000                   mov   #1000,sp
      72 173134 005037  000006                   clr   @#6
      73 173140 012737  173176  000004           mov   #norp,@#4
      74 173146 005737  176700                   tst   @#176700
      75 173152 012702  173702                   mov   #bootrp,r2
      76 173156 010701                           mov   pc,r1
      77 173160 000713                           br    bprtascz
      78 173162 005037  000004                   clr   @#4
      79 173166 005037  000006                   clr   @#6
      80 173172 005000                           clr   r0
      81 173174 000522                           br    rpgo
      82                                ;
      83                                norp:
      84 173176 012702  173724                   mov   #nodev,r2
      85 173202 010701                           mov   pc,r1
      86 173204 000701                           br    bprtascz
      87 173206 000000                           halt
      88                                         
      89                                ; --------------------------------------------------
      90                                ; rl 
      91                                ; --------------------------------------------------
      92                                
      93 174400                         rlcsr     =174400             ; std RL11 csrbase
      94                                
      95 000000                         rlcs      =+0                 ; control/status
      96 000002                         rlba      =+2                 ; bus address
      97 000004                         rlda      =+4                 ; disk address
      98 000006                         rlmp      =+6                 ; multipurpose
      99                                
     100 000004                         cmstat    =2*2                ; get status
     101 000006                         cmseek    =3*2                ; seek
     102 000010                         cmrdhd    =4*2                ; read header
     103 000014                         cmrdda    =6*2                ; read data
     104                                
     105 173210 012701  174400          rlgo:    mov   #rlcsr,r1
     106 173214 010003                           mov   r0,r3          ; save unit number
     107 173216 000303                           swab  r3             ; unit number in upper byte
     108 173220 010311                           mov   r3,(r1)        ; set unit, NOP cmd
     109                                
     110 173222 012761  000013  000004           mov   #013,rlda(r1)  ; subcmd reset+getstatus
     111 173230 052703  000004                   bis   #cmstat,r3     ; get status cmd (r3lo is 0)
     112 173234 010311                           mov   r3,(r1)        ; execute
     113 173236 105711                  1$:      tstb  (r1)           ; test for ready
     114 173240 100376                           bpl   1$             ; wait
     115                                
     116 173242 105003                           clrb  r3             ; unit number in upper byte
     117 173244 052703  000010                   bis   #cmrdhd,r3     ; read header cmd
     118 173250 010311                           mov   r3,(r1)        ; execute
     119 173252 105711                  2$:      tstb  (r1)           ; test for ready
     120 173254 100376                           bpl   2$             ; wait
     121                                
     122 173256 016102  000006                   mov   rlmp(r1),r2    ; retrieve cyl/head/sector
     123 173262 042702  000077                   bic   #77,r2         ; set sector to zero
     124 173266 005202                           inc   r2             ; set head 0, seek to cyl 0
     125 173270 010261  000004                   mov   r2,rlda(r1)    ; into da for seek
     126 173274 105003                           clrb  r3             ; unit number in upper byte
     127 173276 052703  000006                   bis   #cmseek,r3     ; seek cmd
     128 173302 010311                           mov   r3,(r1)        ; execute
     129 173304 105711                  3$:      tstb  (r1)           ; test for ready
     130 173306 100376                           bpl   3$             ; wait
     131                                
     132 173310 005061  000004                   clr   rlda(r1)       ; select cyl0/head0/sector0
     133 173314 012761  177000  000006           mov   #-512.,rlmp(r1)      ; set word count
     134 173322 105003                           clrb  r3             ; unit number in upper byte
     135 173324 052703  000014                   bis   #cmrdda,r3     ; read data cmd
     136 173330 010311                           mov   r3,(r1)        ; execute
     137 173332 105711                  4$:      tstb  (r1)           ; test for ready
     138 173334 100376                           bpl   4$             ; wait
     139                                
     140 173336 005711                           tst   (r1)           ; test for error
     141 173340 100003                           bpl   5$             ; br if ok
     142 173342 000005                           reset                ; ERROR - reset the world
     143 173344 000164  000002                   jmp   2(r4)          ; retry
     144                                
     145 173350 042711  000377          5$:      bic   #377,(r1)      ; execute nop cmd
     146 173354 005007                           clr   pc             ; jump to bootstrap at zero
     147                                         
     148                                ; --------------------------------------------------
     149                                ; rk
     150                                ; --------------------------------------------------
     151                                
     152 177400                         rkcsr    =177400              ; std RK03/05 DECdisk csrbase
     153                                
     154 000002                         rkwc     =+6-4                ; word count
     155 000006                         rkda     =+12-4               ; disk address
     156                                
     157 177340                         tccsr    =177340              ; std TU55/56 DECtape csrbase
     158                                
     159 177776                         tccs     =+0-2                ; control/status
     160 000002                         tcwc     =+4-2                ; word count
     161                                
     162 000002                         xxwc     =rkwc                ; common word count offset
     163                                
     164 165564                         diags    =165564              ; console diags phase2 entry
     165                                
     166                                
     167 173356 012701  177404          rkgo:    mov   #rkcsr+4,r1    ; boot std csr, unit <R0>
     168 173362 010003                           mov   r0,r3          ; get unit number
     169 173364 000241                           clc                  ; C=0 for ror
     170 173366 006003                           ror   r3             ; shift into 15:12
     171 173370 006003                           ror   r3             ;
     172 173372 006003                           ror   r3             ;
     173 173374 006003                           ror   r3             ;
     174 173376 010361  000006                   mov   r3,rkda(r1)    ; unit number, sector 0 to disk addr
     175                                
     176 173402 012761  177000  000002  common:  mov   #-512.,xxwc(r1)   ; set word count
     177 173410 052703  000005                   bis   #5,r3          ; command READ+GO
     178 173414 010311                           mov   r3,(r1)        ; execute
     179 173416 105711                  2$:      tstb  (r1)           ; test ready
     180 173420 100376                           bpl   2$             ; loop
     181                                
     182 173422 005711                           tst   (r1)           ; check error
     183 173424 100003                           bpl   3$             ; br if no error
     184                                
     185 173426 000005                           reset                ; reset the world
     186 173430 000164  000002                   jmp   2(r4)          ; and retry
     187                                
     188 173434 042711  000377          3$:      bic   #377,(r1)      ; nop command
     189 173440 005007                           clr   pc             ; jump to loaded boot sector
     190                                
     191                                
     192                                ; --------------------------------------------------
     193                                ; rp
     194                                ; --------------------------------------------------
     195                                
     196 176700                         rmcsr    =176700              ; std RH11 csrbase
     197                                
     198 000000                         rpcs  =+0                     ; control status offset
     199 000002                         rpwc  =+2                     ; word count offset
     200 000004                         rpba  =+4                     ; bus addr offset
     201 000010                         rpcs2 =+10                    ; control status 2 offset
     202 000016                         rpas  =+16                    ; atten summary offset
     203 000032                         rpof  =+32                    ; offset register offset
     204                                
     205                                
     206 173442 012701  176700          rpgo:    mov   #rmcsr,r1      ; boot std csr, unit <R0>
     207                                
     208 173446 010061  000010                   mov   r0,rpcs2(r1)   ; set unit number into controller
     209 173452 012702  000071                   mov   #071,r2        ; READ+GO command code
     210 173456 012711  000021                   mov   #021,(r1)      ; RIP+GO command
     211 173462 012761  014000  000032           mov   #014000,rpof(r1)  ; set 16b mode, inhibit ECC mode
     212 173470 016161  000016  000016           mov   rpas(r1),rpas(r1) ; clear attention bits
     213                                
     214 173476 012761  177000  000002           mov   #-512.,rpwc(r1)      ; set word count
     215 173504 011103                           mov   (r1),r3        ; get unit number
     216 173506 042703  000377                   bic   #377,r3        ; clear command byte
     217 173512 050203                           bis   r2,r3          ; insert read command code
     218 173514 010311                           mov   r3,(r1)        ; execute read command
     219 173516 105711                  2$:      tstb  (r1)           ; test unit ready
     220 173520 100376                           bpl   2$             ; br if not yet
     221                                
     222 173522 005711                           tst   (r1)           ; test any error
     223 173524 100003                           bpl   3$             ; br if not
     224                                
     225 173526 000005                           reset                ; error, reset the world
     226 173530 000164  000002                   jmp   2(r4)          ; and jump back to restart
     227                                
     228 173534 042711  000377          3$:      bic   #377,(r1)      ; nop command, clear controller
     229 173540 005007                           clr   pc             ; jump to bootstrap start
     230                                
     231                                
     232                                ;
     233                                ; prtascz
     234                                ; r1 - return address
     235                                ; r2 - pointer to asciz string
     236                                ;
     237                                prtascz:
     238                                $10:
     239 173542 105737  177564                   tstb  @#177564
     240 173546 100375                           bpl   $10
     241 173550 105712                           tstb  (r2)
     242 173552 001403                           beq   $20
     243 173554 112237  177566                   movb  (r2)+,@#177566
     244 173560 000770                           br    $10
     245                                $20:
     246 173562 000161  000002                   jmp   2(r1)
     247                                ;
     248                                ; prtoct
     249                                ;
     250                                ; R0 = register value to print
     251                                ; R1 = return address
     252                                ; R2 = temp char
     253                                ; R3 = temp addr
     254                                
     255 173566 012702  000030          prtoct:  mov   #<'0/bit1>,r2  ; ascii 0 right 1b
     256 173572 000261                           sec                  ; shift a 1 into R0 lsb as done bit
     257 173574 006100                  1$:      rol   r0             ; msb out of R0
     258 173576 106102                           rolb  r2             ; into lsb of R2
     259 173600 010703                           mov   pc,r3          ; ret addr
     260 173602 105737  177564                   tstb  @#177564
     261 173606 100375                           bpl   .-4
     262 173610 110237  177566                   movb  r2,@#177566
     263 173614 012702  020206                   mov   #<BL*bit8>+200+<'0/bit3>,r2 ; ascii SP upper, ascii 0 right 3b lower
     264 173620 006300                  2$:      asl   r0             ; msb out of R0
     265 173622 001403                           beq   3$             ; when R0 has gone to zero we are done
     266 173624 106102                           rolb  r2             ; into lsb of R2
     267 173626 103774                           bcs   2$             ; loop once more if flagbit was set
     268 173630 000761                           br    1$             ; go get last bit and print char
     269                                3$:      
     270 173632 000161  000002                   jmp   2(r1)          ; return
     271                                ;
     272                                ;
     273                                ;
     274 173636    015     012          bootrk:  .ascii <15><12>
     275 173640    142     157     157           .ascii /boot from rk:/
         173643    164     040     146  
         173646    162     157     155  
         173651    040     162     153  
         173654    072                  
     276 173655    015     012     000           .asciz <15><12>
     277 173660    015     012          bootrl:  .ascii <15><12>
     278 173662    142     157     157           .ascii /boot from rl:/
         173665    164     040     146  
         173670    162     157     155  
         173673    040     162     154  
         173676    072                  
     279 173677    015     012     000           .asciz <15><12>
     280 173702    015     012          bootrp:  .ascii <15><12>
     281 173704    142     157     157           .ascii /boot from rp:/
         173707    164     040     146  
         173712    162     157     155  
         173715    040     162     160  
         173720    072                  
     282 173721    015     012     000           .asciz <15><12>
     283 173724    015     012          nodev:   .ascii <15><12>
     284 173726    142     157     157           .ascii /boot: no dev/
         173731    164     072     040  
         173734    156     157     040  
         173737    144     145     166  
     285 173742    015     012     000           .asciz <15><12>
     286 173745    000                           .even
     287                                
     288                                   .end
     288                                
